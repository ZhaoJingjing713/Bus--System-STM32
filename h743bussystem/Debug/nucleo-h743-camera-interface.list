
nucleo-h743-camera-interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e18c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a08  0800e428  0800e428  0001e428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee30  0800ee30  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee30  0800ee30  0001ee30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee38  0800ee38  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee38  0800ee38  0001ee38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee3c  0800ee3c  0001ee3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  24000000  0800ee40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002629c  2400021c  0800f05c  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240264b8  0800f05c  000264b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d05e  00000000  00000000  0002024a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004446  00000000  00000000  0004d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a00  00000000  00000000  000516f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001850  00000000  00000000  000530f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00039e55  00000000  00000000  00054940  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018aa1  00000000  00000000  0008e795  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016cf8e  00000000  00000000  000a7236  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002141c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007690  00000000  00000000  00214240  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000004e  00000000  00000000  0021b8d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400021c 	.word	0x2400021c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800e40c 	.word	0x0800e40c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000220 	.word	0x24000220
 80002d4:	0800e40c 	.word	0x0800e40c

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <lcd_write_cmd>:
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;
static sFONT *LCD_Currentfonts = &Font8x16;
static uint16_t CurrentTextColor   = BLACK;
static uint16_t CurrentBackColor   = WHITE;
static void lcd_write_cmd(volatile uint16_t cmd)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
    cmd = cmd;      //make compiler happy
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	80fb      	strh	r3, [r7, #6]
    LCD->lcd_reg = cmd;
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <lcd_write_cmd+0x24>)
 80005fa:	88fa      	ldrh	r2, [r7, #6]
 80005fc:	b292      	uxth	r2, r2
 80005fe:	801a      	strh	r2, [r3, #0]
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	6007fffe 	.word	0x6007fffe

08000610 <lcd_write_data>:
//{
//    data = data;    //make compiler happy
//    LCD->lcd_ram = data;
//}
void lcd_write_data(volatile uint16_t data)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	80fb      	strh	r3, [r7, #6]
    data = data;    //make compiler happy
 800061a:	88fb      	ldrh	r3, [r7, #6]
 800061c:	b29b      	uxth	r3, r3
 800061e:	80fb      	strh	r3, [r7, #6]
    LCD->lcd_ram = data;
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <lcd_write_data+0x24>)
 8000622:	88fa      	ldrh	r2, [r7, #6]
 8000624:	b292      	uxth	r2, r2
 8000626:	805a      	strh	r2, [r3, #2]
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	6007fffe 	.word	0x6007fffe

08000638 <ILI9341_REG_Config>:
    return -1;
}

//Initialize
static void ILI9341_REG_Config ( void )
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	  lcd_write_cmd(0xCF);
 800063c:	20cf      	movs	r0, #207	; 0xcf
 800063e:	f7ff ffd3 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x00);
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff ffe4 	bl	8000610 <lcd_write_data>
	lcd_write_data(0xC1);
 8000648:	20c1      	movs	r0, #193	; 0xc1
 800064a:	f7ff ffe1 	bl	8000610 <lcd_write_data>
	lcd_write_data(0X30);
 800064e:	2030      	movs	r0, #48	; 0x30
 8000650:	f7ff ffde 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0xED);
 8000654:	20ed      	movs	r0, #237	; 0xed
 8000656:	f7ff ffc7 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x64);
 800065a:	2064      	movs	r0, #100	; 0x64
 800065c:	f7ff ffd8 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x03);
 8000660:	2003      	movs	r0, #3
 8000662:	f7ff ffd5 	bl	8000610 <lcd_write_data>
	lcd_write_data(0X12);
 8000666:	2012      	movs	r0, #18
 8000668:	f7ff ffd2 	bl	8000610 <lcd_write_data>
	lcd_write_data(0X81);
 800066c:	2081      	movs	r0, #129	; 0x81
 800066e:	f7ff ffcf 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0xE8);
 8000672:	20e8      	movs	r0, #232	; 0xe8
 8000674:	f7ff ffb8 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x85);
 8000678:	2085      	movs	r0, #133	; 0x85
 800067a:	f7ff ffc9 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x10);
 800067e:	2010      	movs	r0, #16
 8000680:	f7ff ffc6 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x7A);
 8000684:	207a      	movs	r0, #122	; 0x7a
 8000686:	f7ff ffc3 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0xCB);
 800068a:	20cb      	movs	r0, #203	; 0xcb
 800068c:	f7ff ffac 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x39);
 8000690:	2039      	movs	r0, #57	; 0x39
 8000692:	f7ff ffbd 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x2C);
 8000696:	202c      	movs	r0, #44	; 0x2c
 8000698:	f7ff ffba 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x00);
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff ffb7 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x34);
 80006a2:	2034      	movs	r0, #52	; 0x34
 80006a4:	f7ff ffb4 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x02);
 80006a8:	2002      	movs	r0, #2
 80006aa:	f7ff ffb1 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0xF7);
 80006ae:	20f7      	movs	r0, #247	; 0xf7
 80006b0:	f7ff ff9a 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x20);
 80006b4:	2020      	movs	r0, #32
 80006b6:	f7ff ffab 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0xEA);
 80006ba:	20ea      	movs	r0, #234	; 0xea
 80006bc:	f7ff ff94 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x00);
 80006c0:	2000      	movs	r0, #0
 80006c2:	f7ff ffa5 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x00);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f7ff ffa2 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0xC0);    //Power control
 80006cc:	20c0      	movs	r0, #192	; 0xc0
 80006ce:	f7ff ff8b 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x1B);   //VRH[5:0]
 80006d2:	201b      	movs	r0, #27
 80006d4:	f7ff ff9c 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0xC1);    //Power control
 80006d8:	20c1      	movs	r0, #193	; 0xc1
 80006da:	f7ff ff85 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x01);   //SAP[2:0];BT[3:0]
 80006de:	2001      	movs	r0, #1
 80006e0:	f7ff ff96 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0xC5);    //VCM control
 80006e4:	20c5      	movs	r0, #197	; 0xc5
 80006e6:	f7ff ff7f 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x30); 	 //3F
 80006ea:	2030      	movs	r0, #48	; 0x30
 80006ec:	f7ff ff90 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x30); 	 //3C
 80006f0:	2030      	movs	r0, #48	; 0x30
 80006f2:	f7ff ff8d 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0xC7);    //VCM control2
 80006f6:	20c7      	movs	r0, #199	; 0xc7
 80006f8:	f7ff ff76 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0XB7);
 80006fc:	20b7      	movs	r0, #183	; 0xb7
 80006fe:	f7ff ff87 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0x36);    // Memory Access Control
 8000702:	2036      	movs	r0, #54	; 0x36
 8000704:	f7ff ff70 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x48);
 8000708:	2048      	movs	r0, #72	; 0x48
 800070a:	f7ff ff81 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0x3A);
 800070e:	203a      	movs	r0, #58	; 0x3a
 8000710:	f7ff ff6a 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x55);
 8000714:	2055      	movs	r0, #85	; 0x55
 8000716:	f7ff ff7b 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0xB1);
 800071a:	20b1      	movs	r0, #177	; 0xb1
 800071c:	f7ff ff64 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x00);
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff ff75 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x1A);
 8000726:	201a      	movs	r0, #26
 8000728:	f7ff ff72 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0xB6);    // Display Function Control
 800072c:	20b6      	movs	r0, #182	; 0xb6
 800072e:	f7ff ff5b 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x0A);
 8000732:	200a      	movs	r0, #10
 8000734:	f7ff ff6c 	bl	8000610 <lcd_write_data>
	lcd_write_data(0xA2);
 8000738:	20a2      	movs	r0, #162	; 0xa2
 800073a:	f7ff ff69 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0xF2);    // 3Gamma Function Disable
 800073e:	20f2      	movs	r0, #242	; 0xf2
 8000740:	f7ff ff52 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x00);
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff ff63 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0x26);    //Gamma curve selected
 800074a:	2026      	movs	r0, #38	; 0x26
 800074c:	f7ff ff4c 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x01);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ff5d 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0xE0);    //Set Gamma
 8000756:	20e0      	movs	r0, #224	; 0xe0
 8000758:	f7ff ff46 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x0F);
 800075c:	200f      	movs	r0, #15
 800075e:	f7ff ff57 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x2A);
 8000762:	202a      	movs	r0, #42	; 0x2a
 8000764:	f7ff ff54 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x28);
 8000768:	2028      	movs	r0, #40	; 0x28
 800076a:	f7ff ff51 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x08);
 800076e:	2008      	movs	r0, #8
 8000770:	f7ff ff4e 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x0E);
 8000774:	200e      	movs	r0, #14
 8000776:	f7ff ff4b 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x08);
 800077a:	2008      	movs	r0, #8
 800077c:	f7ff ff48 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x54);
 8000780:	2054      	movs	r0, #84	; 0x54
 8000782:	f7ff ff45 	bl	8000610 <lcd_write_data>
	lcd_write_data(0XA9);
 8000786:	20a9      	movs	r0, #169	; 0xa9
 8000788:	f7ff ff42 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x43);
 800078c:	2043      	movs	r0, #67	; 0x43
 800078e:	f7ff ff3f 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x0A);
 8000792:	200a      	movs	r0, #10
 8000794:	f7ff ff3c 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x0F);
 8000798:	200f      	movs	r0, #15
 800079a:	f7ff ff39 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x00);
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff ff36 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x00);
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff ff33 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x00);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f7ff ff30 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x00);
 80007b0:	2000      	movs	r0, #0
 80007b2:	f7ff ff2d 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0XE1);    //Set Gamma
 80007b6:	20e1      	movs	r0, #225	; 0xe1
 80007b8:	f7ff ff16 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x00);
 80007bc:	2000      	movs	r0, #0
 80007be:	f7ff ff27 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x15);
 80007c2:	2015      	movs	r0, #21
 80007c4:	f7ff ff24 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x17);
 80007c8:	2017      	movs	r0, #23
 80007ca:	f7ff ff21 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x07);
 80007ce:	2007      	movs	r0, #7
 80007d0:	f7ff ff1e 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x11);
 80007d4:	2011      	movs	r0, #17
 80007d6:	f7ff ff1b 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x06);
 80007da:	2006      	movs	r0, #6
 80007dc:	f7ff ff18 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x2B);
 80007e0:	202b      	movs	r0, #43	; 0x2b
 80007e2:	f7ff ff15 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x56);
 80007e6:	2056      	movs	r0, #86	; 0x56
 80007e8:	f7ff ff12 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x3C);
 80007ec:	203c      	movs	r0, #60	; 0x3c
 80007ee:	f7ff ff0f 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x05);
 80007f2:	2005      	movs	r0, #5
 80007f4:	f7ff ff0c 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x10);
 80007f8:	2010      	movs	r0, #16
 80007fa:	f7ff ff09 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x0F);
 80007fe:	200f      	movs	r0, #15
 8000800:	f7ff ff06 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x3F);
 8000804:	203f      	movs	r0, #63	; 0x3f
 8000806:	f7ff ff03 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x3F);
 800080a:	203f      	movs	r0, #63	; 0x3f
 800080c:	f7ff ff00 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x0F);
 8000810:	200f      	movs	r0, #15
 8000812:	f7ff fefd 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0x2B);
 8000816:	202b      	movs	r0, #43	; 0x2b
 8000818:	f7ff fee6 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x00);
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff fef7 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x00);
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff fef4 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x01);
 8000828:	2001      	movs	r0, #1
 800082a:	f7ff fef1 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x3f);
 800082e:	203f      	movs	r0, #63	; 0x3f
 8000830:	f7ff feee 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0x2A);
 8000834:	202a      	movs	r0, #42	; 0x2a
 8000836:	f7ff fed7 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data(0x00);
 800083a:	2000      	movs	r0, #0
 800083c:	f7ff fee8 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x00);
 8000840:	2000      	movs	r0, #0
 8000842:	f7ff fee5 	bl	8000610 <lcd_write_data>
	lcd_write_data(0x00);
 8000846:	2000      	movs	r0, #0
 8000848:	f7ff fee2 	bl	8000610 <lcd_write_data>
	lcd_write_data(0xef);
 800084c:	20ef      	movs	r0, #239	; 0xef
 800084e:	f7ff fedf 	bl	8000610 <lcd_write_data>
	lcd_write_cmd(0x11); //Exit Sleep
 8000852:	2011      	movs	r0, #17
 8000854:	f7ff fec8 	bl	80005e8 <lcd_write_cmd>
	HAL_Delay(120);
 8000858:	2078      	movs	r0, #120	; 0x78
 800085a:	f002 fc79 	bl	8003150 <HAL_Delay>
	lcd_write_cmd(0x29); //display on
 800085e:	2029      	movs	r0, #41	; 0x29
 8000860:	f7ff fec2 	bl	80005e8 <lcd_write_cmd>
//	lcd_write_cmd ( 0x11 );
//	HAL_Delay ( 100 );
//
//	/* Display ON (29h) */
//	lcd_write_cmd ( 0x29 );
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <ILI9341_Rst>:
 * @brief  ILI9341G 软复位
 * @param
 * @retval
 */
void ILI9341_Rst( void )
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( RST_GPIO_Port,RST_Pin,GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <ILI9341_Rst+0x30>)
 8000874:	f006 fdb6 	bl	80073e4 <HAL_GPIO_WritePin>

	HAL_Delay ( 500 );
 8000878:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800087c:	f002 fc68 	bl	8003150 <HAL_Delay>

	HAL_GPIO_WritePin( RST_GPIO_Port,RST_Pin,GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <ILI9341_Rst+0x30>)
 8000888:	f006 fdac 	bl	80073e4 <HAL_GPIO_WritePin>

	HAL_Delay ( 500 );
 800088c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000890:	f002 fc5e 	bl	8003150 <HAL_Delay>

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	58020c00 	.word	0x58020c00

0800089c <ILI9341_GramScan>:
 *6--D to U, L to R
 *7--D to U, R to L
 *******************************************************/

void ILI9341_GramScan ( uint8_t ucOption )
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	//参数，0-7
	if(ucOption >7 )
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b07      	cmp	r3, #7
 80008aa:	d860      	bhi.n	800096e <ILI9341_GramScan+0xd2>
		return;

	LCD_SCAN_MODE = ucOption;
 80008ac:	4a32      	ldr	r2, [pc, #200]	; (8000978 <ILI9341_GramScan+0xdc>)
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	7013      	strb	r3, [r2, #0]

	if(ucOption%2 == 0)// *	2，4，6，0  Y方向320 x240
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d107      	bne.n	80008ce <ILI9341_GramScan+0x32>
	{
		LCD_X_LENGTH = ILI9341_LESS_PIXEL;
 80008be:	4b2f      	ldr	r3, [pc, #188]	; (800097c <ILI9341_GramScan+0xe0>)
 80008c0:	22f0      	movs	r2, #240	; 0xf0
 80008c2:	801a      	strh	r2, [r3, #0]
		LCD_Y_LENGTH =	ILI9341_MORE_PIXEL;
 80008c4:	4b2e      	ldr	r3, [pc, #184]	; (8000980 <ILI9341_GramScan+0xe4>)
 80008c6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80008ca:	801a      	strh	r2, [r3, #0]
 80008cc:	e006      	b.n	80008dc <ILI9341_GramScan+0x40>
	}
	else
	{
		//1、3、5、7 X方向320，Y240
		LCD_X_LENGTH = ILI9341_MORE_PIXEL;
 80008ce:	4b2b      	ldr	r3, [pc, #172]	; (800097c <ILI9341_GramScan+0xe0>)
 80008d0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80008d4:	801a      	strh	r2, [r3, #0]
		LCD_Y_LENGTH =	ILI9341_LESS_PIXEL;
 80008d6:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <ILI9341_GramScan+0xe4>)
 80008d8:	22f0      	movs	r2, #240	; 0xf0
 80008da:	801a      	strh	r2, [r3, #0]
	}

	lcd_write_cmd ( 0x36 );
 80008dc:	2036      	movs	r0, #54	; 0x36
 80008de:	f7ff fe83 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data ( 0x08 |(ucOption<<5));
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	015b      	lsls	r3, r3, #5
 80008e6:	b21b      	sxth	r3, r3
 80008e8:	f043 0308 	orr.w	r3, r3, #8
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fe8d 	bl	8000610 <lcd_write_data>
	lcd_write_cmd ( CMD_SetCoordinateX );
 80008f6:	202a      	movs	r0, #42	; 0x2a
 80008f8:	f7ff fe76 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data ( 0x00 );
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff fe87 	bl	8000610 <lcd_write_data>
	lcd_write_data ( 0x00 );
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff fe84 	bl	8000610 <lcd_write_data>
	lcd_write_data ( ((LCD_X_LENGTH-1)>>8)&0xFF );
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <ILI9341_GramScan+0xe0>)
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	3b01      	subs	r3, #1
 800090e:	121b      	asrs	r3, r3, #8
 8000910:	b29b      	uxth	r3, r3
 8000912:	b2db      	uxtb	r3, r3
 8000914:	b29b      	uxth	r3, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fe7a 	bl	8000610 <lcd_write_data>
	lcd_write_data ( (LCD_X_LENGTH-1)&0xFF );
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <ILI9341_GramScan+0xe0>)
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	3b01      	subs	r3, #1
 8000922:	b29b      	uxth	r3, r3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	b29b      	uxth	r3, r3
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fe71 	bl	8000610 <lcd_write_data>

	lcd_write_cmd ( CMD_SetCoordinateY );
 800092e:	202b      	movs	r0, #43	; 0x2b
 8000930:	f7ff fe5a 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data ( 0x00 );
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff fe6b 	bl	8000610 <lcd_write_data>
	lcd_write_data ( 0x00 );
 800093a:	2000      	movs	r0, #0
 800093c:	f7ff fe68 	bl	8000610 <lcd_write_data>
	lcd_write_data ( ((LCD_Y_LENGTH-1)>>8)&0xFF );
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <ILI9341_GramScan+0xe4>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	3b01      	subs	r3, #1
 8000946:	121b      	asrs	r3, r3, #8
 8000948:	b29b      	uxth	r3, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	b29b      	uxth	r3, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fe5e 	bl	8000610 <lcd_write_data>
	lcd_write_data ( (LCD_Y_LENGTH-1)&0xFF );
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <ILI9341_GramScan+0xe4>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	3b01      	subs	r3, #1
 800095a:	b29b      	uxth	r3, r3
 800095c:	b2db      	uxtb	r3, r3
 800095e:	b29b      	uxth	r3, r3
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fe55 	bl	8000610 <lcd_write_data>
	/* write gram start */
	lcd_write_cmd ( CMD_SetPixel );
 8000966:	202c      	movs	r0, #44	; 0x2c
 8000968:	f7ff fe3e 	bl	80005e8 <lcd_write_cmd>
 800096c:	e000      	b.n	8000970 <ILI9341_GramScan+0xd4>
		return;
 800096e:	bf00      	nop
}
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	24000000 	.word	0x24000000
 800097c:	24000002 	.word	0x24000002
 8000980:	24000004 	.word	0x24000004

08000984 <lcd_init>:




void lcd_init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(BG_GPIO_Port, BG_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2104      	movs	r1, #4
 800098c:	4806      	ldr	r0, [pc, #24]	; (80009a8 <lcd_init+0x24>)
 800098e:	f006 fd29 	bl	80073e4 <HAL_GPIO_WritePin>
	ILI9341_Rst();
 8000992:	f7ff ff69 	bl	8000868 <ILI9341_Rst>
	ILI9341_REG_Config();
 8000996:	f7ff fe4f 	bl	8000638 <ILI9341_REG_Config>
	ILI9341_GramScan(LCD_SCAN_MODE);
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <lcd_init+0x28>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff7c 	bl	800089c <ILI9341_GramScan>
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	58020800 	.word	0x58020800
 80009ac:	24000000 	.word	0x24000000

080009b0 <ILI9341_OpenWindow>:



//开窗口函数
void ILI9341_OpenWindow ( uint16_t usX, uint16_t usY, uint16_t usWidth, uint16_t usHeight )
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4604      	mov	r4, r0
 80009b8:	4608      	mov	r0, r1
 80009ba:	4611      	mov	r1, r2
 80009bc:	461a      	mov	r2, r3
 80009be:	4623      	mov	r3, r4
 80009c0:	80fb      	strh	r3, [r7, #6]
 80009c2:	4603      	mov	r3, r0
 80009c4:	80bb      	strh	r3, [r7, #4]
 80009c6:	460b      	mov	r3, r1
 80009c8:	807b      	strh	r3, [r7, #2]
 80009ca:	4613      	mov	r3, r2
 80009cc:	803b      	strh	r3, [r7, #0]
	lcd_write_cmd ( CMD_SetCoordinateX ); 				 /* ÉèÖÃX×ø±ê */
 80009ce:	202a      	movs	r0, #42	; 0x2a
 80009d0:	f7ff fe0a 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data ( usX >> 8  );	 /* ÏÈ¸ß8Î»£¬È»ºóµÍ8Î» */
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	0a1b      	lsrs	r3, r3, #8
 80009d8:	b29b      	uxth	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fe18 	bl	8000610 <lcd_write_data>
	lcd_write_data ( usX & 0xff  );	 /* ÉèÖÃÆðÊ¼µãºÍ½áÊøµã*/
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fe12 	bl	8000610 <lcd_write_data>
	lcd_write_data ( ( usX + usWidth - 1 ) >> 8  );
 80009ec:	88fa      	ldrh	r2, [r7, #6]
 80009ee:	887b      	ldrh	r3, [r7, #2]
 80009f0:	4413      	add	r3, r2
 80009f2:	3b01      	subs	r3, #1
 80009f4:	121b      	asrs	r3, r3, #8
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fe09 	bl	8000610 <lcd_write_data>
	lcd_write_data ( ( usX + usWidth - 1 ) & 0xff  );
 80009fe:	88fa      	ldrh	r2, [r7, #6]
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	4413      	add	r3, r2
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	3b01      	subs	r3, #1
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fdfe 	bl	8000610 <lcd_write_data>

	lcd_write_cmd ( CMD_SetCoordinateY ); 			     /* ÉèÖÃY×ø±ê*/
 8000a14:	202b      	movs	r0, #43	; 0x2b
 8000a16:	f7ff fde7 	bl	80005e8 <lcd_write_cmd>
	lcd_write_data ( usY >> 8  );
 8000a1a:	88bb      	ldrh	r3, [r7, #4]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fdf5 	bl	8000610 <lcd_write_data>
	lcd_write_data ( usY & 0xff  );
 8000a26:	88bb      	ldrh	r3, [r7, #4]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fdef 	bl	8000610 <lcd_write_data>
	lcd_write_data ( ( usY + usHeight - 1 ) >> 8 );
 8000a32:	88ba      	ldrh	r2, [r7, #4]
 8000a34:	883b      	ldrh	r3, [r7, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	121b      	asrs	r3, r3, #8
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fde6 	bl	8000610 <lcd_write_data>
	lcd_write_data ( ( usY + usHeight - 1) & 0xff );
 8000a44:	88ba      	ldrh	r2, [r7, #4]
 8000a46:	883b      	ldrh	r3, [r7, #0]
 8000a48:	4413      	add	r3, r2
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fddb 	bl	8000610 <lcd_write_data>

}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd90      	pop	{r4, r7, pc}

08000a62 <ILI9341_FillColor>:
}


//填充像素
static __inline void ILI9341_FillColor ( uint32_t ulAmout_Point, uint16_t usColor )
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]


	/* memory write */
	lcd_write_cmd ( CMD_SetPixel );
 8000a72:	202c      	movs	r0, #44	; 0x2c
 8000a74:	f7ff fdb8 	bl	80005e8 <lcd_write_cmd>

	for ( i = 0; i < ulAmout_Point; i ++ )
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	e006      	b.n	8000a8c <ILI9341_FillColor+0x2a>
		lcd_write_data ( usColor );
 8000a7e:	887b      	ldrh	r3, [r7, #2]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fdc5 	bl	8000610 <lcd_write_data>
	for ( i = 0; i < ulAmout_Point; i ++ )
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d3f4      	bcc.n	8000a7e <ILI9341_FillColor+0x1c>


}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <ILI9341_Clear>:



void ILI9341_Clear ( uint16_t usX, uint16_t usY, uint16_t usWidth, uint16_t usHeight , uint16_t usColor)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4608      	mov	r0, r1
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4623      	mov	r3, r4
 8000aac:	80fb      	strh	r3, [r7, #6]
 8000aae:	4603      	mov	r3, r0
 8000ab0:	80bb      	strh	r3, [r7, #4]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	807b      	strh	r3, [r7, #2]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	803b      	strh	r3, [r7, #0]
	ILI9341_OpenWindow ( usX, usY, usWidth, usHeight );
 8000aba:	883b      	ldrh	r3, [r7, #0]
 8000abc:	887a      	ldrh	r2, [r7, #2]
 8000abe:	88b9      	ldrh	r1, [r7, #4]
 8000ac0:	88f8      	ldrh	r0, [r7, #6]
 8000ac2:	f7ff ff75 	bl	80009b0 <ILI9341_OpenWindow>

	ILI9341_FillColor ( usWidth * usHeight, usColor );
 8000ac6:	887b      	ldrh	r3, [r7, #2]
 8000ac8:	883a      	ldrh	r2, [r7, #0]
 8000aca:	fb02 f303 	mul.w	r3, r2, r3
 8000ace:	461a      	mov	r2, r3
 8000ad0:	8b3b      	ldrh	r3, [r7, #24]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4610      	mov	r0, r2
 8000ad6:	f7ff ffc4 	bl	8000a62 <ILI9341_FillColor>

}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd90      	pop	{r4, r7, pc}
	...

08000ae4 <ILI9341_DispChar_EN>:
	}

}

void ILI9341_DispChar_EN ( uint16_t usX, uint16_t usY, const char cChar )
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	80fb      	strh	r3, [r7, #6]
 8000aee:	460b      	mov	r3, r1
 8000af0:	80bb      	strh	r3, [r7, #4]
 8000af2:	4613      	mov	r3, r2
 8000af4:	70fb      	strb	r3, [r7, #3]
	uint8_t  byteCount, bitCount,fontLength;
	uint16_t ucRelativePositon;
	uint8_t *Pfont;


	ucRelativePositon = cChar - ' ';
 8000af6:	78fb      	ldrb	r3, [r7, #3]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	3b20      	subs	r3, #32
 8000afc:	82bb      	strh	r3, [r7, #20]
	fontLength = (LCD_Currentfonts->Width*LCD_Currentfonts->Height)/8;
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <ILI9341_DispChar_EN+0xc0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	889b      	ldrh	r3, [r3, #4]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <ILI9341_DispChar_EN+0xc0>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	88db      	ldrh	r3, [r3, #6]
 8000b0c:	fb03 f302 	mul.w	r3, r3, r2
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	da00      	bge.n	8000b16 <ILI9341_DispChar_EN+0x32>
 8000b14:	3307      	adds	r3, #7
 8000b16:	10db      	asrs	r3, r3, #3
 8000b18:	74fb      	strb	r3, [r7, #19]

	Pfont = (uint8_t *)&LCD_Currentfonts->table[ucRelativePositon * fontLength];
 8000b1a:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <ILI9341_DispChar_EN+0xc0>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	8aba      	ldrh	r2, [r7, #20]
 8000b22:	7cf9      	ldrb	r1, [r7, #19]
 8000b24:	fb01 f202 	mul.w	r2, r1, r2
 8000b28:	4413      	add	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]


	ILI9341_OpenWindow ( usX, usY, LCD_Currentfonts->Width, LCD_Currentfonts->Height);
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <ILI9341_DispChar_EN+0xc0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	889a      	ldrh	r2, [r3, #4]
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <ILI9341_DispChar_EN+0xc0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	88db      	ldrh	r3, [r3, #6]
 8000b38:	88b9      	ldrh	r1, [r7, #4]
 8000b3a:	88f8      	ldrh	r0, [r7, #6]
 8000b3c:	f7ff ff38 	bl	80009b0 <ILI9341_OpenWindow>

	lcd_write_cmd ( CMD_SetPixel );
 8000b40:	202c      	movs	r0, #44	; 0x2c
 8000b42:	f7ff fd51 	bl	80005e8 <lcd_write_cmd>


	for ( byteCount = 0; byteCount < fontLength; byteCount++ )
 8000b46:	2300      	movs	r3, #0
 8000b48:	75fb      	strb	r3, [r7, #23]
 8000b4a:	e022      	b.n	8000b92 <ILI9341_DispChar_EN+0xae>
	{

			for ( bitCount = 0; bitCount < 8; bitCount++ )
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	75bb      	strb	r3, [r7, #22]
 8000b50:	e019      	b.n	8000b86 <ILI9341_DispChar_EN+0xa2>
			{
					if ( Pfont[byteCount] & (0x80>>bitCount) )
 8000b52:	7dfb      	ldrb	r3, [r7, #23]
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	4413      	add	r3, r2
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	7dbb      	ldrb	r3, [r7, #22]
 8000b5e:	2280      	movs	r2, #128	; 0x80
 8000b60:	fa42 f303 	asr.w	r3, r2, r3
 8000b64:	400b      	ands	r3, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d005      	beq.n	8000b76 <ILI9341_DispChar_EN+0x92>
						lcd_write_data ( CurrentTextColor );
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <ILI9341_DispChar_EN+0xc4>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fd4e 	bl	8000610 <lcd_write_data>
 8000b74:	e004      	b.n	8000b80 <ILI9341_DispChar_EN+0x9c>
					else
						lcd_write_data ( CurrentBackColor );
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <ILI9341_DispChar_EN+0xc8>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fd48 	bl	8000610 <lcd_write_data>
			for ( bitCount = 0; bitCount < 8; bitCount++ )
 8000b80:	7dbb      	ldrb	r3, [r7, #22]
 8000b82:	3301      	adds	r3, #1
 8000b84:	75bb      	strb	r3, [r7, #22]
 8000b86:	7dbb      	ldrb	r3, [r7, #22]
 8000b88:	2b07      	cmp	r3, #7
 8000b8a:	d9e2      	bls.n	8000b52 <ILI9341_DispChar_EN+0x6e>
	for ( byteCount = 0; byteCount < fontLength; byteCount++ )
 8000b8c:	7dfb      	ldrb	r3, [r7, #23]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	75fb      	strb	r3, [r7, #23]
 8000b92:	7dfa      	ldrb	r2, [r7, #23]
 8000b94:	7cfb      	ldrb	r3, [r7, #19]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d3d8      	bcc.n	8000b4c <ILI9341_DispChar_EN+0x68>
			}
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	24000008 	.word	0x24000008
 8000ba8:	24000238 	.word	0x24000238
 8000bac:	2400000c 	.word	0x2400000c

08000bb0 <ILI9341_DispStringLine_EN>:
void ILI9341_DispStringLine_EN (  uint16_t line,  char * pStr )
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	80fb      	strh	r3, [r7, #6]
	uint16_t usX = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	81fb      	strh	r3, [r7, #14]

	while ( * pStr != '\0' )
 8000bc0:	e02d      	b.n	8000c1e <ILI9341_DispStringLine_EN+0x6e>
	{
		if ( ( usX - ILI9341_DispWindow_X_Star + LCD_Currentfonts->Width ) > LCD_X_LENGTH )
 8000bc2:	89fb      	ldrh	r3, [r7, #14]
 8000bc4:	4a1a      	ldr	r2, [pc, #104]	; (8000c30 <ILI9341_DispStringLine_EN+0x80>)
 8000bc6:	6812      	ldr	r2, [r2, #0]
 8000bc8:	8892      	ldrh	r2, [r2, #4]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <ILI9341_DispStringLine_EN+0x84>)
 8000bce:	8812      	ldrh	r2, [r2, #0]
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	dd07      	ble.n	8000be4 <ILI9341_DispStringLine_EN+0x34>
		{
			usX = ILI9341_DispWindow_X_Star;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	81fb      	strh	r3, [r7, #14]
			line += LCD_Currentfonts->Height;
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <ILI9341_DispStringLine_EN+0x80>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	88da      	ldrh	r2, [r3, #6]
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	4413      	add	r3, r2
 8000be2:	80fb      	strh	r3, [r7, #6]
		}

		if ( ( line - ILI9341_DispWindow_Y_Star + LCD_Currentfonts->Height ) > LCD_Y_LENGTH )
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <ILI9341_DispStringLine_EN+0x80>)
 8000be8:	6812      	ldr	r2, [r2, #0]
 8000bea:	88d2      	ldrh	r2, [r2, #6]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <ILI9341_DispStringLine_EN+0x88>)
 8000bf0:	8812      	ldrh	r2, [r2, #0]
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	dd03      	ble.n	8000bfe <ILI9341_DispStringLine_EN+0x4e>
		{
			usX = ILI9341_DispWindow_X_Star;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	81fb      	strh	r3, [r7, #14]
			line = ILI9341_DispWindow_Y_Star;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	80fb      	strh	r3, [r7, #6]
		}

		ILI9341_DispChar_EN ( usX, line, * pStr);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	88f9      	ldrh	r1, [r7, #6]
 8000c04:	89fb      	ldrh	r3, [r7, #14]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff6c 	bl	8000ae4 <ILI9341_DispChar_EN>

		pStr ++;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	603b      	str	r3, [r7, #0]

		usX += LCD_Currentfonts->Width;
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <ILI9341_DispStringLine_EN+0x80>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	889a      	ldrh	r2, [r3, #4]
 8000c18:	89fb      	ldrh	r3, [r7, #14]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1cd      	bne.n	8000bc2 <ILI9341_DispStringLine_EN+0x12>

	}

}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	24000008 	.word	0x24000008
 8000c34:	24000002 	.word	0x24000002
 8000c38:	24000004 	.word	0x24000004

08000c3c <LCD_GetFont>:
  LCD_Currentfonts = fonts;
}


sFONT *LCD_GetFont(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return LCD_Currentfonts;
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <LCD_GetFont+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	24000008 	.word	0x24000008

08000c54 <LCD_ClearLine>:
  CurrentBackColor = Color;
}


void LCD_ClearLine(uint16_t Line)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af02      	add	r7, sp, #8
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	80fb      	strh	r3, [r7, #6]
  ILI9341_Clear(0,Line,LCD_X_LENGTH,((sFONT *)LCD_GetFont())->Height,CurrentBackColor);	/* ÇåÆÁ£¬ÏÔÊ¾È«ºÚ */
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <LCD_ClearLine+0x30>)
 8000c60:	881c      	ldrh	r4, [r3, #0]
 8000c62:	f7ff ffeb 	bl	8000c3c <LCD_GetFont>
 8000c66:	4603      	mov	r3, r0
 8000c68:	88da      	ldrh	r2, [r3, #6]
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <LCD_ClearLine+0x34>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	88f9      	ldrh	r1, [r7, #6]
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	4613      	mov	r3, r2
 8000c74:	4622      	mov	r2, r4
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff ff10 	bl	8000a9c <ILI9341_Clear>

}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd90      	pop	{r4, r7, pc}
 8000c84:	24000002 	.word	0x24000002
 8000c88:	2400000c 	.word	0x2400000c

08000c8c <LCD_ImgShow_gray>:
	}
	ILI9341_OpenWindow(0,0, 320,240);//恢复显示窗口为全屏
}

void  LCD_ImgShow_gray(const uint8_t* p)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	uint8_t k=0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	74fb      	strb	r3, [r7, #19]
	unsigned char picH,picL;
	ILI9341_OpenWindow(0, 0, 320,240);//窗口设置
 8000c98:	23f0      	movs	r3, #240	; 0xf0
 8000c9a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff fe85 	bl	80009b0 <ILI9341_OpenWindow>
	lcd_write_cmd ( CMD_SetPixel );
 8000ca6:	202c      	movs	r0, #44	; 0x2c
 8000ca8:	f7ff fc9e 	bl	80005e8 <lcd_write_cmd>
	for(int i=1;i<320*240*2;i++){
 8000cac:	2301      	movs	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	e033      	b.n	8000d1a <LCD_ImgShow_gray+0x8e>
		uint16_t gray = (uint16_t) p[i++];
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	617a      	str	r2, [r7, #20]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	823b      	strh	r3, [r7, #16]
		uint16_t rb = (gray * 31) / 255; // red and blue are 5 bits
 8000cc2:	8a3a      	ldrh	r2, [r7, #16]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	015b      	lsls	r3, r3, #5
 8000cc8:	1a9b      	subs	r3, r3, r2
 8000cca:	4a1b      	ldr	r2, [pc, #108]	; (8000d38 <LCD_ImgShow_gray+0xac>)
 8000ccc:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd0:	441a      	add	r2, r3
 8000cd2:	11d2      	asrs	r2, r2, #7
 8000cd4:	17db      	asrs	r3, r3, #31
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	81fb      	strh	r3, [r7, #14]
		uint16_t g = (gray *50) / 255;	// green is 6 bits
 8000cda:	8a3b      	ldrh	r3, [r7, #16]
 8000cdc:	2232      	movs	r2, #50	; 0x32
 8000cde:	fb02 f303 	mul.w	r3, r2, r3
 8000ce2:	4a15      	ldr	r2, [pc, #84]	; (8000d38 <LCD_ImgShow_gray+0xac>)
 8000ce4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce8:	441a      	add	r2, r3
 8000cea:	11d2      	asrs	r2, r2, #7
 8000cec:	17db      	asrs	r3, r3, #31
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	81bb      	strh	r3, [r7, #12]
		uint16_t color = (rb<<11)|(g<<5)|(rb<<0);
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	02db      	lsls	r3, r3, #11
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	89bb      	ldrh	r3, [r7, #12]
 8000cfa:	015b      	lsls	r3, r3, #5
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	817b      	strh	r3, [r7, #10]
//	 	uint16_t gray=(uint16_t)*(p+i);
//	 	uint16_t rb = (gray * 31) / 255; // red and blue are 5 bits
//		uint16_t g = (gray *63) / 255;	// green is 6 bits
//		uint16_t color = (rb<<11)|(g<<5)|(rb<<0);

		lcd_write_data(color);
 8000d0c:	897b      	ldrh	r3, [r7, #10]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fc7e 	bl	8000610 <lcd_write_data>
	for(int i=1;i<320*240*2;i++){
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	3301      	adds	r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
 8000d20:	dbc7      	blt.n	8000cb2 <LCD_ImgShow_gray+0x26>
	}
	ILI9341_OpenWindow(0,0, 320,240);//恢复显示窗口为全屏
 8000d22:	23f0      	movs	r3, #240	; 0xf0
 8000d24:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f7ff fe40 	bl	80009b0 <ILI9341_OpenWindow>
}
 8000d30:	bf00      	nop
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	80808081 	.word	0x80808081

08000d3c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d44:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <SCB_EnableICache+0x3c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d54:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <SCB_EnableICache+0x3c>)
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <SCB_EnableICache+0x3c>)
 8000d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d68:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7e:	f5ad 3d16 	sub.w	sp, sp, #153600	; 0x25800
 8000d82:	b0bf      	sub	sp, #252	; 0xfc
 8000d84:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	tem[0]=0xEE;
 8000d86:	4b90      	ldr	r3, [pc, #576]	; (8000fc8 <main+0x24c>)
 8000d88:	22ee      	movs	r2, #238	; 0xee
 8000d8a:	701a      	strb	r2, [r3, #0]
	tem[1]=0xE1;
 8000d8c:	4b8e      	ldr	r3, [pc, #568]	; (8000fc8 <main+0x24c>)
 8000d8e:	22e1      	movs	r2, #225	; 0xe1
 8000d90:	705a      	strb	r2, [r3, #1]
	tem[2]=0x01;
 8000d92:	4b8d      	ldr	r3, [pc, #564]	; (8000fc8 <main+0x24c>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	709a      	strb	r2, [r3, #2]
	tem[3]=0x55;
 8000d98:	4b8b      	ldr	r3, [pc, #556]	; (8000fc8 <main+0x24c>)
 8000d9a:	2255      	movs	r2, #85	; 0x55
 8000d9c:	70da      	strb	r2, [r3, #3]
	tem[4]=0xFF;
 8000d9e:	4b8a      	ldr	r3, [pc, #552]	; (8000fc8 <main+0x24c>)
 8000da0:	22ff      	movs	r2, #255	; 0xff
 8000da2:	711a      	strb	r2, [r3, #4]
	tem[5]=0xFC;
 8000da4:	4b88      	ldr	r3, [pc, #544]	; (8000fc8 <main+0x24c>)
 8000da6:	22fc      	movs	r2, #252	; 0xfc
 8000da8:	715a      	strb	r2, [r3, #5]
	tem[6]=0xFD;
 8000daa:	4b87      	ldr	r3, [pc, #540]	; (8000fc8 <main+0x24c>)
 8000dac:	22fd      	movs	r2, #253	; 0xfd
 8000dae:	719a      	strb	r2, [r3, #6]
	tem[7]=0xFF;
 8000db0:	4b85      	ldr	r3, [pc, #532]	; (8000fc8 <main+0x24c>)
 8000db2:	22ff      	movs	r2, #255	; 0xff
 8000db4:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000db6:	f001 fa9f 	bl	80022f8 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000dba:	f7ff ffbf 	bl	8000d3c <SCB_EnableICache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dbe:	f002 f935 	bl	800302c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc2:	f000 fb91 	bl	80014e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc6:	f000 ffbb 	bl	8001d40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dca:	f000 ff35 	bl	8001c38 <MX_DMA_Init>
  MX_DCMI_Init();
 8000dce:	f000 fc55 	bl	800167c <MX_DCMI_Init>
  MX_TIM2_Init();
 8000dd2:	f000 fd1d 	bl	8001810 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000dd6:	f000 fc85 	bl	80016e4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000dda:	f000 fcc3 	bl	8001764 <MX_SPI1_Init>
  MX_FMC_Init();
 8000dde:	f000 ff4b 	bl	8001c78 <MX_FMC_Init>
  MX_USART1_UART_Init();
 8000de2:	f000 fe45 	bl	8001a70 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8000de6:	f000 fd5f 	bl	80018a8 <MX_UART4_Init>
  MX_UART5_Init();
 8000dea:	f000 fda9 	bl	8001940 <MX_UART5_Init>
  MX_UART7_Init();
 8000dee:	f000 fdf3 	bl	80019d8 <MX_UART7_Init>
  MX_USART3_UART_Init();
 8000df2:	f000 fed5 	bl	8001ba0 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000df6:	f000 fe87 	bl	8001b08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Init(&huart4);
 8000dfa:	4874      	ldr	r0, [pc, #464]	; (8000fcc <main+0x250>)
 8000dfc:	f009 fe94 	bl	800ab28 <HAL_UART_Init>
  HAL_UART_Init(&huart1);
 8000e00:	4873      	ldr	r0, [pc, #460]	; (8000fd0 <main+0x254>)
 8000e02:	f009 fe91 	bl	800ab28 <HAL_UART_Init>
  HAL_UART_Init(&huart7);
 8000e06:	4873      	ldr	r0, [pc, #460]	; (8000fd4 <main+0x258>)
 8000e08:	f009 fe8e 	bl	800ab28 <HAL_UART_Init>
  HAL_UART_Init(&huart2);
 8000e0c:	4872      	ldr	r0, [pc, #456]	; (8000fd8 <main+0x25c>)
 8000e0e:	f009 fe8b 	bl	800ab28 <HAL_UART_Init>
  HAL_GPIO_WritePin(CAMERA_PWR_DWN_GPIO_Port, CAMERA_PWR_DWN_Pin, GPIO_PIN_RESET); // Turn on camera
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e18:	4870      	ldr	r0, [pc, #448]	; (8000fdc <main+0x260>)
 8000e1a:	f006 fae3 	bl	80073e4 <HAL_GPIO_WritePin>
  ov7670_init(&hdcmi, &hdma_dcmi, &hi2c1);
 8000e1e:	4a70      	ldr	r2, [pc, #448]	; (8000fe0 <main+0x264>)
 8000e20:	4970      	ldr	r1, [pc, #448]	; (8000fe4 <main+0x268>)
 8000e22:	4871      	ldr	r0, [pc, #452]	; (8000fe8 <main+0x26c>)
 8000e24:	f001 ffb6 	bl	8002d94 <ov7670_init>

#if USE_GRAYSCALE
  ov7670_config(OV7670_MODE_QVGA_YUV);
 8000e28:	2004      	movs	r0, #4
 8000e2a:	f001 ffed 	bl	8002e08 <ov7670_config>
#else
  ov7670_config(OV7670_MODE_QVGA_RGB565);
#endif
  ov7670_registerCallback(NULL, NULL, &onFrameCallback);
 8000e2e:	4a6f      	ldr	r2, [pc, #444]	; (8000fec <main+0x270>)
 8000e30:	2100      	movs	r1, #0
 8000e32:	2000      	movs	r0, #0
 8000e34:	f002 f86e 	bl	8002f14 <ov7670_registerCallback>
  lcd_init();
 8000e38:	f7ff fda4 	bl	8000984 <lcd_init>
  ILI9341_GramScan(3);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f7ff fd2d 	bl	800089c <ILI9341_GramScan>
  ILI9341_Clear(0, 0, 320,240 , WHITE);
 8000e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	23f0      	movs	r3, #240	; 0xf0
 8000e4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff fe23 	bl	8000a9c <ILI9341_Clear>
  ILI9341_DispStringLine_EN(LINE(120),"        Bus system based on stm32");
 8000e56:	f7ff fef1 	bl	8000c3c <LCD_GetFont>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	88db      	ldrh	r3, [r3, #6]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	4961      	ldr	r1, [pc, #388]	; (8000ff0 <main+0x274>)
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fea0 	bl	8000bb0 <ILI9341_DispStringLine_EN>
  HAL_Delay(1000);
 8000e70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e74:	f002 f96c 	bl	8003150 <HAL_Delay>
  LCD_ClearLine(LINE(0));
 8000e78:	f7ff fee0 	bl	8000c3c <LCD_GetFont>
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff fee9 	bl	8000c54 <LCD_ClearLine>
  HAL_UART_Receive_IT(&huart7, rdata, 1);
 8000e82:	2201      	movs	r2, #1
 8000e84:	495b      	ldr	r1, [pc, #364]	; (8000ff4 <main+0x278>)
 8000e86:	4853      	ldr	r0, [pc, #332]	; (8000fd4 <main+0x258>)
 8000e88:	f009 ff34 	bl	800acf4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, wifi_rec, 1);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	495a      	ldr	r1, [pc, #360]	; (8000ff8 <main+0x27c>)
 8000e90:	4851      	ldr	r0, [pc, #324]	; (8000fd8 <main+0x25c>)
 8000e92:	f009 ff2f 	bl	800acf4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, hot_buffer, 7);
 8000e96:	2207      	movs	r2, #7
 8000e98:	4958      	ldr	r1, [pc, #352]	; (8000ffc <main+0x280>)
 8000e9a:	484d      	ldr	r0, [pc, #308]	; (8000fd0 <main+0x254>)
 8000e9c:	f009 ff2a 	bl	800acf4 <HAL_UART_Receive_IT>
  while (1)
  {

//	HAL_UART_Transmit(&huart1, &tem, 8, 100);
//	HAL_UART_Receive_IT(&huart1, hot_buffer, 1);
	  int a=1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	4a57      	ldr	r2, [pc, #348]	; (8001000 <main+0x284>)
 8000ea4:	443a      	add	r2, r7
 8000ea6:	6013      	str	r3, [r2, #0]
	  //lcd_auto_clear(500);
#if USE_GRAYSCALE
	  // DCMI setting "Byte select" must be "capture every other byte to ignore Cb or Cr data"
	  // DCMI setting "Byte select start" must be "Interface captures second data"
	  if (new_capture){
 8000ea8:	4b56      	ldr	r3, [pc, #344]	; (8001004 <main+0x288>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 8193 	beq.w	80011d8 <main+0x45c>
		  LCD_ImgShow_gray((unsigned char*) frame_buffer);
 8000eb2:	4855      	ldr	r0, [pc, #340]	; (8001008 <main+0x28c>)
 8000eb4:	f7ff feea 	bl	8000c8c <LCD_ImgShow_gray>
		  if (HAL_GPIO_ReadPin(SWITCH2_GPIO_Port, SWITCH2_Pin)==0){
 8000eb8:	2108      	movs	r1, #8
 8000eba:	4854      	ldr	r0, [pc, #336]	; (800100c <main+0x290>)
 8000ebc:	f006 fa7a 	bl	80073b4 <HAL_GPIO_ReadPin>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f040 8174 	bne.w	80011b0 <main+0x434>
			  total_people++;
 8000ec8:	4b51      	ldr	r3, [pc, #324]	; (8001010 <main+0x294>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	4a50      	ldr	r2, [pc, #320]	; (8001010 <main+0x294>)
 8000ed0:	6013      	str	r3, [r2, #0]
			  HAL_Delay(1000);
 8000ed2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed6:	f002 f93b 	bl	8003150 <HAL_Delay>
			  char mark[5]="IMG$";
 8000eda:	4a4e      	ldr	r2, [pc, #312]	; (8001014 <main+0x298>)
 8000edc:	4b4e      	ldr	r3, [pc, #312]	; (8001018 <main+0x29c>)
 8000ede:	443b      	add	r3, r7
 8000ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ee4:	6018      	str	r0, [r3, #0]
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	7019      	strb	r1, [r3, #0]
			  char mark2[10]="$IMGEND";
 8000eea:	4a4c      	ldr	r2, [pc, #304]	; (800101c <main+0x2a0>)
 8000eec:	4b4c      	ldr	r3, [pc, #304]	; (8001020 <main+0x2a4>)
 8000eee:	443b      	add	r3, r7
 8000ef0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ef4:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ef8:	2300      	movs	r3, #0
 8000efa:	4a4a      	ldr	r2, [pc, #296]	; (8001024 <main+0x2a8>)
 8000efc:	443a      	add	r2, r7
 8000efe:	8013      	strh	r3, [r2, #0]
			  HAL_UART_Init(&huart4);
 8000f00:	4832      	ldr	r0, [pc, #200]	; (8000fcc <main+0x250>)
 8000f02:	f009 fe11 	bl	800ab28 <HAL_UART_Init>
			  HAL_UART_Transmit(&huart4, &mark,5, 100);
 8000f06:	4944      	ldr	r1, [pc, #272]	; (8001018 <main+0x29c>)
 8000f08:	4439      	add	r1, r7
 8000f0a:	2364      	movs	r3, #100	; 0x64
 8000f0c:	2205      	movs	r2, #5
 8000f0e:	482f      	ldr	r0, [pc, #188]	; (8000fcc <main+0x250>)
 8000f10:	f009 fe5a 	bl	800abc8 <HAL_UART_Transmit>
			  uint32_t tem_data[OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2];
			  for(int i=0;i<OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2;i++){
 8000f14:	2300      	movs	r3, #0
 8000f16:	4a44      	ldr	r2, [pc, #272]	; (8001028 <main+0x2ac>)
 8000f18:	443a      	add	r2, r7
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	e015      	b.n	8000f4a <main+0x1ce>
				  tem_data[i]=frame_buffer[i];
 8000f1e:	4a3a      	ldr	r2, [pc, #232]	; (8001008 <main+0x28c>)
 8000f20:	4b41      	ldr	r3, [pc, #260]	; (8001028 <main+0x2ac>)
 8000f22:	443b      	add	r3, r7
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000f2a:	4b40      	ldr	r3, [pc, #256]	; (800102c <main+0x2b0>)
 8000f2c:	4a40      	ldr	r2, [pc, #256]	; (8001030 <main+0x2b4>)
 8000f2e:	443a      	add	r2, r7
 8000f30:	4413      	add	r3, r2
 8000f32:	4a3d      	ldr	r2, [pc, #244]	; (8001028 <main+0x2ac>)
 8000f34:	443a      	add	r2, r7
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  for(int i=0;i<OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2;i++){
 8000f3c:	4b3a      	ldr	r3, [pc, #232]	; (8001028 <main+0x2ac>)
 8000f3e:	443b      	add	r3, r7
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4a38      	ldr	r2, [pc, #224]	; (8001028 <main+0x2ac>)
 8000f46:	443a      	add	r2, r7
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	4b37      	ldr	r3, [pc, #220]	; (8001028 <main+0x2ac>)
 8000f4c:	443b      	add	r3, r7
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 8000f54:	dbe3      	blt.n	8000f1e <main+0x1a2>
			  }
			  grey_transmit((uint8_t*)tem_data);
 8000f56:	4b35      	ldr	r3, [pc, #212]	; (800102c <main+0x2b0>)
 8000f58:	4a35      	ldr	r2, [pc, #212]	; (8001030 <main+0x2b4>)
 8000f5a:	443a      	add	r2, r7
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 f810 	bl	8001f84 <grey_transmit>
			  HAL_Delay(1000);
 8000f64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f68:	f002 f8f2 	bl	8003150 <HAL_Delay>
			  HAL_UART_Transmit(&huart4, &mark2, 10, 1000);
 8000f6c:	492c      	ldr	r1, [pc, #176]	; (8001020 <main+0x2a4>)
 8000f6e:	4439      	add	r1, r7
 8000f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f74:	220a      	movs	r2, #10
 8000f76:	4815      	ldr	r0, [pc, #84]	; (8000fcc <main+0x250>)
 8000f78:	f009 fe26 	bl	800abc8 <HAL_UART_Transmit>
			  uint8_t *rec=(char*)malloc(sizeof(char));
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f00b fcdd 	bl	800c93c <malloc>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a2b      	ldr	r2, [pc, #172]	; (8001034 <main+0x2b8>)
 8000f86:	443a      	add	r2, r7
 8000f88:	6013      	str	r3, [r2, #0]
//			  while(HAL_UART_Receive(&huart2, rec, 1,100)!=HAL_OK);
//			  HAL_UART_Transmit(&huart4, rec, 1,100);
			  char name[5];
			  int find=1;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	4a2a      	ldr	r2, [pc, #168]	; (8001038 <main+0x2bc>)
 8000f8e:	443a      	add	r2, r7
 8000f90:	6013      	str	r3, [r2, #0]
			  if(wifi_rec[0]=='1')
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <main+0x27c>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b31      	cmp	r3, #49	; 0x31
 8000f98:	d104      	bne.n	8000fa4 <main+0x228>
				  strcpy(name,"mym");
 8000f9a:	4b28      	ldr	r3, [pc, #160]	; (800103c <main+0x2c0>)
 8000f9c:	443b      	add	r3, r7
 8000f9e:	4a28      	ldr	r2, [pc, #160]	; (8001040 <main+0x2c4>)
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	e057      	b.n	8001054 <main+0x2d8>
			  else if(wifi_rec[0]=='2')
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <main+0x27c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b32      	cmp	r3, #50	; 0x32
 8000faa:	d104      	bne.n	8000fb6 <main+0x23a>
				  strcpy(name,"dxc");
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <main+0x2c0>)
 8000fae:	443b      	add	r3, r7
 8000fb0:	4a24      	ldr	r2, [pc, #144]	; (8001044 <main+0x2c8>)
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	e04e      	b.n	8001054 <main+0x2d8>
			  else if(wifi_rec[0]=='3')
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <main+0x27c>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b33      	cmp	r3, #51	; 0x33
 8000fbc:	d146      	bne.n	800104c <main+0x2d0>
				  strcpy(name,"zjj");
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	; (800103c <main+0x2c0>)
 8000fc0:	443b      	add	r3, r7
 8000fc2:	4a21      	ldr	r2, [pc, #132]	; (8001048 <main+0x2cc>)
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	e045      	b.n	8001054 <main+0x2d8>
 8000fc8:	24000628 	.word	0x24000628
 8000fcc:	24000ac4 	.word	0x24000ac4
 8000fd0:	24000598 	.word	0x24000598
 8000fd4:	24000284 	.word	0x24000284
 8000fd8:	24026424 	.word	0x24026424
 8000fdc:	58020800 	.word	0x58020800
 8000fe0:	2400039c 	.word	0x2400039c
 8000fe4:	240003e8 	.word	0x240003e8
 8000fe8:	24000548 	.word	0x24000548
 8000fec:	08001fd1 	.word	0x08001fd1
 8000ff0:	0800e428 	.word	0x0800e428
 8000ff4:	24000280 	.word	0x24000280
 8000ff8:	240006d8 	.word	0x240006d8
 8000ffc:	24000460 	.word	0x24000460
 8001000:	000258e4 	.word	0x000258e4
 8001004:	2400023a 	.word	0x2400023a
 8001008:	24000bd8 	.word	0x24000bd8
 800100c:	58021000 	.word	0x58021000
 8001010:	2400023c 	.word	0x2400023c
 8001014:	0800e458 	.word	0x0800e458
 8001018:	000258c0 	.word	0x000258c0
 800101c:	0800e460 	.word	0x0800e460
 8001020:	000258b4 	.word	0x000258b4
 8001024:	000258bc 	.word	0x000258bc
 8001028:	000258ec 	.word	0x000258ec
 800102c:	fffda7ac 	.word	0xfffda7ac
 8001030:	000258f0 	.word	0x000258f0
 8001034:	000258e0 	.word	0x000258e0
 8001038:	000258e8 	.word	0x000258e8
 800103c:	000258ac 	.word	0x000258ac
 8001040:	006d796d 	.word	0x006d796d
 8001044:	00637864 	.word	0x00637864
 8001048:	006a6a7a 	.word	0x006a6a7a
			  else
				  find=0;
 800104c:	2300      	movs	r3, #0
 800104e:	4aa1      	ldr	r2, [pc, #644]	; (80012d4 <main+0x558>)
 8001050:	443a      	add	r2, r7
 8001052:	6013      	str	r3, [r2, #0]
			  free(rec);
 8001054:	4ba0      	ldr	r3, [pc, #640]	; (80012d8 <main+0x55c>)
 8001056:	443b      	add	r3, r7
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	f00b fc77 	bl	800c94c <free>
			  if(find){
 800105e:	4b9d      	ldr	r3, [pc, #628]	; (80012d4 <main+0x558>)
 8001060:	443b      	add	r3, r7
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d069      	beq.n	800113c <main+0x3c0>
				  char showline[100]="             Welcome ";
 8001068:	4e9c      	ldr	r6, [pc, #624]	; (80012dc <main+0x560>)
 800106a:	4b9d      	ldr	r3, [pc, #628]	; (80012e0 <main+0x564>)
 800106c:	443b      	add	r3, r7
 800106e:	441e      	add	r6, r3
 8001070:	4b9c      	ldr	r3, [pc, #624]	; (80012e4 <main+0x568>)
 8001072:	4634      	mov	r4, r6
 8001074:	461d      	mov	r5, r3
 8001076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800107e:	6020      	str	r0, [r4, #0]
 8001080:	3404      	adds	r4, #4
 8001082:	8021      	strh	r1, [r4, #0]
 8001084:	f106 0316 	add.w	r3, r6, #22
 8001088:	224e      	movs	r2, #78	; 0x4e
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f00b fc70 	bl	800c972 <memset>
				  strcat(showline,name);
 8001092:	4a95      	ldr	r2, [pc, #596]	; (80012e8 <main+0x56c>)
 8001094:	443a      	add	r2, r7
 8001096:	4b91      	ldr	r3, [pc, #580]	; (80012dc <main+0x560>)
 8001098:	4991      	ldr	r1, [pc, #580]	; (80012e0 <main+0x564>)
 800109a:	4439      	add	r1, r7
 800109c:	440b      	add	r3, r1
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f00c f84f 	bl	800d144 <strcat>
				  ILI9341_Clear(0, 200, 320,240 , WHITE);
 80010a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	23f0      	movs	r3, #240	; 0xf0
 80010ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010b2:	21c8      	movs	r1, #200	; 0xc8
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff fcf1 	bl	8000a9c <ILI9341_Clear>
				  ILI9341_DispStringLine_EN(LINE(13),showline);
 80010ba:	f7ff fdbf 	bl	8000c3c <LCD_GetFont>
 80010be:	4603      	mov	r3, r0
 80010c0:	88db      	ldrh	r3, [r3, #6]
 80010c2:	461a      	mov	r2, r3
 80010c4:	0052      	lsls	r2, r2, #1
 80010c6:	441a      	add	r2, r3
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	4b83      	ldr	r3, [pc, #524]	; (80012dc <main+0x560>)
 80010d0:	4983      	ldr	r1, [pc, #524]	; (80012e0 <main+0x564>)
 80010d2:	4439      	add	r1, r7
 80010d4:	440b      	add	r3, r1
 80010d6:	4619      	mov	r1, r3
 80010d8:	4610      	mov	r0, r2
 80010da:	f7ff fd69 	bl	8000bb0 <ILI9341_DispStringLine_EN>
	//				  HAL_UART_Receive_IT(&huart1, hot_buffer, 10);
	//				  HAL_Delay(1000);
	//				  HAL_UART_Transmit(&huart4, hot_data, 2055, 1000);
	//				  float high=hot_camer_get_temperature(hot_data);
//				  get_t();
				  char str[50]="           Your temperature is ";
 80010de:	4e83      	ldr	r6, [pc, #524]	; (80012ec <main+0x570>)
 80010e0:	4b7f      	ldr	r3, [pc, #508]	; (80012e0 <main+0x564>)
 80010e2:	443b      	add	r3, r7
 80010e4:	441e      	add	r6, r3
 80010e6:	4b82      	ldr	r3, [pc, #520]	; (80012f0 <main+0x574>)
 80010e8:	4634      	mov	r4, r6
 80010ea:	461d      	mov	r5, r3
 80010ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80010f8:	f106 0320 	add.w	r3, r6, #32
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	821a      	strh	r2, [r3, #16]
				  strcat(str,T);
 8001108:	4b78      	ldr	r3, [pc, #480]	; (80012ec <main+0x570>)
 800110a:	4a75      	ldr	r2, [pc, #468]	; (80012e0 <main+0x564>)
 800110c:	443a      	add	r2, r7
 800110e:	4413      	add	r3, r2
 8001110:	4978      	ldr	r1, [pc, #480]	; (80012f4 <main+0x578>)
 8001112:	4618      	mov	r0, r3
 8001114:	f00c f816 	bl	800d144 <strcat>
				  //HAL_UART_Transmit(&huart4, str, 50, 100);
				  ILI9341_DispStringLine_EN(LINE(14),str);
 8001118:	f7ff fd90 	bl	8000c3c <LCD_GetFont>
 800111c:	4603      	mov	r3, r0
 800111e:	88db      	ldrh	r3, [r3, #6]
 8001120:	461a      	mov	r2, r3
 8001122:	00d2      	lsls	r2, r2, #3
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	b29a      	uxth	r2, r3
 800112a:	4b70      	ldr	r3, [pc, #448]	; (80012ec <main+0x570>)
 800112c:	496c      	ldr	r1, [pc, #432]	; (80012e0 <main+0x564>)
 800112e:	4439      	add	r1, r7
 8001130:	440b      	add	r3, r1
 8001132:	4619      	mov	r1, r3
 8001134:	4610      	mov	r0, r2
 8001136:	f7ff fd3b 	bl	8000bb0 <ILI9341_DispStringLine_EN>
 800113a:	e034      	b.n	80011a6 <main+0x42a>
			  }else{
				  char showline[50]="             Recognize failed ";
 800113c:	4e67      	ldr	r6, [pc, #412]	; (80012dc <main+0x560>)
 800113e:	4b68      	ldr	r3, [pc, #416]	; (80012e0 <main+0x564>)
 8001140:	443b      	add	r3, r7
 8001142:	441e      	add	r6, r3
 8001144:	4b6c      	ldr	r3, [pc, #432]	; (80012f8 <main+0x57c>)
 8001146:	4634      	mov	r4, r6
 8001148:	461d      	mov	r5, r3
 800114a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001152:	c407      	stmia	r4!, {r0, r1, r2}
 8001154:	8023      	strh	r3, [r4, #0]
 8001156:	3402      	adds	r4, #2
 8001158:	0c1b      	lsrs	r3, r3, #16
 800115a:	7023      	strb	r3, [r4, #0]
 800115c:	f106 031f 	add.w	r3, r6, #31
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	f8c3 200f 	str.w	r2, [r3, #15]
				  ILI9341_Clear(0, 200, 320,240 , WHITE);
 800116e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	23f0      	movs	r3, #240	; 0xf0
 8001176:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800117a:	21c8      	movs	r1, #200	; 0xc8
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fc8d 	bl	8000a9c <ILI9341_Clear>
				  ILI9341_DispStringLine_EN(LINE(13),showline);
 8001182:	f7ff fd5b 	bl	8000c3c <LCD_GetFont>
 8001186:	4603      	mov	r3, r0
 8001188:	88db      	ldrh	r3, [r3, #6]
 800118a:	461a      	mov	r2, r3
 800118c:	0052      	lsls	r2, r2, #1
 800118e:	441a      	add	r2, r3
 8001190:	0092      	lsls	r2, r2, #2
 8001192:	4413      	add	r3, r2
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b51      	ldr	r3, [pc, #324]	; (80012dc <main+0x560>)
 8001198:	4951      	ldr	r1, [pc, #324]	; (80012e0 <main+0x564>)
 800119a:	4439      	add	r1, r7
 800119c:	440b      	add	r3, r1
 800119e:	4619      	mov	r1, r3
 80011a0:	4610      	mov	r0, r2
 80011a2:	f7ff fd05 	bl	8000bb0 <ILI9341_DispStringLine_EN>
			  }
			  HAL_Delay(1000);
 80011a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011aa:	f001 ffd1 	bl	8003150 <HAL_Delay>
 80011ae:	e013      	b.n	80011d8 <main+0x45c>
		  }
		  else if(HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin)==0){
 80011b0:	2104      	movs	r1, #4
 80011b2:	4852      	ldr	r0, [pc, #328]	; (80012fc <main+0x580>)
 80011b4:	f006 f8fe 	bl	80073b4 <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10c      	bne.n	80011d8 <main+0x45c>
			if(total_people>0)
 80011be:	4b50      	ldr	r3, [pc, #320]	; (8001300 <main+0x584>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	dd04      	ble.n	80011d0 <main+0x454>
			  total_people--;
 80011c6:	4b4e      	ldr	r3, [pc, #312]	; (8001300 <main+0x584>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	4a4c      	ldr	r2, [pc, #304]	; (8001300 <main+0x584>)
 80011ce:	6013      	str	r3, [r2, #0]
			HAL_Delay(2000);
 80011d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011d4:	f001 ffbc 	bl	8003150 <HAL_Delay>
		  else
			  LCD_ImgShow_hot(hot_data);

#endif

	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){
 80011d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011dc:	4849      	ldr	r0, [pc, #292]	; (8001304 <main+0x588>)
 80011de:	f006 f8e9 	bl	80073b4 <HAL_GPIO_ReadPin>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d104      	bne.n	80011f2 <main+0x476>
		  //ov7670_startCap(OV7670_CAP_SINGLE_FRAME, (uint32_t)frame_buffer);
		  ov7670_startCap(OV7670_CAP_CONTINUOUS, (uint32_t)frame_buffer);
 80011e8:	4b47      	ldr	r3, [pc, #284]	; (8001308 <main+0x58c>)
 80011ea:	4619      	mov	r1, r3
 80011ec:	2000      	movs	r0, #0
 80011ee:	f001 fe47 	bl	8002e80 <ov7670_startCap>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t start[10]="START\n";
 80011f2:	4a46      	ldr	r2, [pc, #280]	; (800130c <main+0x590>)
 80011f4:	4b46      	ldr	r3, [pc, #280]	; (8001310 <main+0x594>)
 80011f6:	443b      	add	r3, r7
 80011f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011fc:	6018      	str	r0, [r3, #0]
 80011fe:	3304      	adds	r3, #4
 8001200:	8019      	strh	r1, [r3, #0]
 8001202:	3302      	adds	r3, #2
 8001204:	0c0a      	lsrs	r2, r1, #16
 8001206:	701a      	strb	r2, [r3, #0]
 8001208:	4b42      	ldr	r3, [pc, #264]	; (8001314 <main+0x598>)
 800120a:	443b      	add	r3, r7
 800120c:	2200      	movs	r2, #0
 800120e:	801a      	strh	r2, [r3, #0]
 8001210:	709a      	strb	r2, [r3, #2]
	  uint8_t end[10]="END\n";
 8001212:	4a41      	ldr	r2, [pc, #260]	; (8001318 <main+0x59c>)
 8001214:	4b41      	ldr	r3, [pc, #260]	; (800131c <main+0x5a0>)
 8001216:	443b      	add	r3, r7
 8001218:	e892 0003 	ldmia.w	r2, {r0, r1}
 800121c:	6018      	str	r0, [r3, #0]
 800121e:	3304      	adds	r3, #4
 8001220:	7019      	strb	r1, [r3, #0]
 8001222:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <main+0x5a4>)
 8001224:	443b      	add	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	711a      	strb	r2, [r3, #4]
	  //HAL_UART_Transmit(&huart4, start, 10, 100);
	  if(ifOneline){
 800122c:	4b3d      	ldr	r3, [pc, #244]	; (8001324 <main+0x5a8>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	f43f ae35 	beq.w	8000ea0 <main+0x124>
		  //HAL_UART_Transmit(&huart4, &USART_RX_BUF,strlen(USART_RX_BUF),1000);
			  strcpy(GPSData.GPS_Buffer,USART_RX_BUF);
 8001236:	493c      	ldr	r1, [pc, #240]	; (8001328 <main+0x5ac>)
 8001238:	483c      	ldr	r0, [pc, #240]	; (800132c <main+0x5b0>)
 800123a:	f00b ff92 	bl	800d162 <strcpy>
			  if(strstr(USART_RX_BUF,"GNRMC")!=NULL){
 800123e:	493c      	ldr	r1, [pc, #240]	; (8001330 <main+0x5b4>)
 8001240:	4839      	ldr	r0, [pc, #228]	; (8001328 <main+0x5ac>)
 8001242:	f00b ff96 	bl	800d172 <strstr>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 8122 	beq.w	8001492 <main+0x716>
				  //HAL_UART_Transmit(&huart4, end, 10,1000);
				  transfer(USART_RX_BUF);
 800124e:	4836      	ldr	r0, [pc, #216]	; (8001328 <main+0x5ac>)
 8001250:	f000 ff26 	bl	80020a0 <transfer>
				  if(GPSData.isUseful){
 8001254:	4b35      	ldr	r3, [pc, #212]	; (800132c <main+0x5b0>)
 8001256:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800125a:	2b00      	cmp	r3, #0
 800125c:	d011      	beq.n	8001282 <main+0x506>
					  HAL_GPIO_WritePin(Green_LED_GPIO_Port,Green_LED_Pin, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2101      	movs	r1, #1
 8001262:	4834      	ldr	r0, [pc, #208]	; (8001334 <main+0x5b8>)
 8001264:	f006 f8be 	bl	80073e4 <HAL_GPIO_WritePin>
					  if(HAL_GPIO_ReadPin(Yellow_LED_GPIO_Port, Yellow_LED_Pin)==0)
 8001268:	2102      	movs	r1, #2
 800126a:	4824      	ldr	r0, [pc, #144]	; (80012fc <main+0x580>)
 800126c:	f006 f8a2 	bl	80073b4 <HAL_GPIO_ReadPin>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d116      	bne.n	80012a4 <main+0x528>
						  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin,1);
 8001276:	2201      	movs	r2, #1
 8001278:	2102      	movs	r1, #2
 800127a:	4820      	ldr	r0, [pc, #128]	; (80012fc <main+0x580>)
 800127c:	f006 f8b2 	bl	80073e4 <HAL_GPIO_WritePin>
 8001280:	e010      	b.n	80012a4 <main+0x528>
				  }else{
					  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2102      	movs	r1, #2
 8001286:	481d      	ldr	r0, [pc, #116]	; (80012fc <main+0x580>)
 8001288:	f006 f8ac 	bl	80073e4 <HAL_GPIO_WritePin>
					  if(HAL_GPIO_ReadPin(Green_LED_GPIO_Port,Green_LED_Pin)==0)
 800128c:	2101      	movs	r1, #1
 800128e:	4829      	ldr	r0, [pc, #164]	; (8001334 <main+0x5b8>)
 8001290:	f006 f890 	bl	80073b4 <HAL_GPIO_ReadPin>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d104      	bne.n	80012a4 <main+0x528>
						  HAL_GPIO_WritePin(Green_LED_GPIO_Port,Green_LED_Pin,1);
 800129a:	2201      	movs	r2, #1
 800129c:	2101      	movs	r1, #1
 800129e:	4825      	ldr	r0, [pc, #148]	; (8001334 <main+0x5b8>)
 80012a0:	f006 f8a0 	bl	80073e4 <HAL_GPIO_WritePin>
				  }
				  if(num<0)
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <main+0x5bc>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	da02      	bge.n	80012b2 <main+0x536>
					  num=0;
 80012ac:	4b22      	ldr	r3, [pc, #136]	; (8001338 <main+0x5bc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
				  uint8_t message[messageLength],tem[3];
				  if(num<=9){
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <main+0x5bc>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b09      	cmp	r3, #9
 80012b8:	dc44      	bgt.n	8001344 <main+0x5c8>
					  tem[0]=(num+48);
 80012ba:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <main+0x5bc>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	3330      	adds	r3, #48	; 0x30
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	4a1d      	ldr	r2, [pc, #116]	; (800133c <main+0x5c0>)
 80012c6:	443a      	add	r2, r7
 80012c8:	7013      	strb	r3, [r2, #0]
					  tem[1]='\0';
 80012ca:	2300      	movs	r3, #0
 80012cc:	4a1c      	ldr	r2, [pc, #112]	; (8001340 <main+0x5c4>)
 80012ce:	443a      	add	r2, r7
 80012d0:	7013      	strb	r3, [r2, #0]
 80012d2:	e058      	b.n	8001386 <main+0x60a>
 80012d4:	000258e8 	.word	0x000258e8
 80012d8:	000258e0 	.word	0x000258e0
 80012dc:	fffda748 	.word	0xfffda748
 80012e0:	000258f0 	.word	0x000258f0
 80012e4:	0800e46c 	.word	0x0800e46c
 80012e8:	000258ac 	.word	0x000258ac
 80012ec:	fffda714 	.word	0xfffda714
 80012f0:	0800e4d0 	.word	0x0800e4d0
 80012f4:	24000468 	.word	0x24000468
 80012f8:	0800e504 	.word	0x0800e504
 80012fc:	58021000 	.word	0x58021000
 8001300:	2400023c 	.word	0x2400023c
 8001304:	58020800 	.word	0x58020800
 8001308:	24000bd8 	.word	0x24000bd8
 800130c:	0800e538 	.word	0x0800e538
 8001310:	000258d4 	.word	0x000258d4
 8001314:	000258db 	.word	0x000258db
 8001318:	0800e544 	.word	0x0800e544
 800131c:	000258c8 	.word	0x000258c8
 8001320:	000258cd 	.word	0x000258cd
 8001324:	24000242 	.word	0x24000242
 8001328:	240006dc 	.word	0x240006dc
 800132c:	24000630 	.word	0x24000630
 8001330:	0800e44c 	.word	0x0800e44c
 8001334:	58020400 	.word	0x58020400
 8001338:	24000244 	.word	0x24000244
 800133c:	000258a8 	.word	0x000258a8
 8001340:	000258a9 	.word	0x000258a9
				  }
				  else{
					  tem[0]=(num/10+48);
 8001344:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <main+0x72c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a58      	ldr	r2, [pc, #352]	; (80014ac <main+0x730>)
 800134a:	fb82 1203 	smull	r1, r2, r2, r3
 800134e:	1092      	asrs	r2, r2, #2
 8001350:	17db      	asrs	r3, r3, #31
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	b2db      	uxtb	r3, r3
 8001356:	3330      	adds	r3, #48	; 0x30
 8001358:	b2db      	uxtb	r3, r3
 800135a:	4a55      	ldr	r2, [pc, #340]	; (80014b0 <main+0x734>)
 800135c:	443a      	add	r2, r7
 800135e:	7013      	strb	r3, [r2, #0]
					  tem[1]=(num-num/10*10+48);
 8001360:	4b51      	ldr	r3, [pc, #324]	; (80014a8 <main+0x72c>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b51      	ldr	r3, [pc, #324]	; (80014ac <main+0x730>)
 8001366:	fb83 1302 	smull	r1, r3, r3, r2
 800136a:	1099      	asrs	r1, r3, #2
 800136c:	17d3      	asrs	r3, r2, #31
 800136e:	1ac9      	subs	r1, r1, r3
 8001370:	460b      	mov	r3, r1
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	1ad1      	subs	r1, r2, r3
 800137a:	b2cb      	uxtb	r3, r1
 800137c:	3330      	adds	r3, #48	; 0x30
 800137e:	b2db      	uxtb	r3, r3
 8001380:	4a4c      	ldr	r2, [pc, #304]	; (80014b4 <main+0x738>)
 8001382:	443a      	add	r2, r7
 8001384:	7013      	strb	r3, [r2, #0]
				  }
				  HAL_Delay(2);
 8001386:	2002      	movs	r0, #2
 8001388:	f001 fee2 	bl	8003150 <HAL_Delay>
				 // HAL_UART_Transmit(&huart4, GPSData.GPS_Buffer, sizeof(GPSData.GPS_Buffer), 100);
				  HAL_Delay(2);
 800138c:	2002      	movs	r0, #2
 800138e:	f001 fedf 	bl	8003150 <HAL_Delay>
				  memcpy(message,GPSData.address,sizeof(GPSData.address));
 8001392:	4b49      	ldr	r3, [pc, #292]	; (80014b8 <main+0x73c>)
 8001394:	4a49      	ldr	r2, [pc, #292]	; (80014bc <main+0x740>)
 8001396:	443a      	add	r2, r7
 8001398:	4413      	add	r3, r2
 800139a:	4a49      	ldr	r2, [pc, #292]	; (80014c0 <main+0x744>)
 800139c:	f102 0470 	add.w	r4, r2, #112	; 0x70
 80013a0:	461e      	mov	r6, r3
 80013a2:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80013a6:	4635      	mov	r5, r6
 80013a8:	4623      	mov	r3, r4
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	6859      	ldr	r1, [r3, #4]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b4:	3410      	adds	r4, #16
 80013b6:	3610      	adds	r6, #16
 80013b8:	4564      	cmp	r4, ip
 80013ba:	d1f4      	bne.n	80013a6 <main+0x62a>
 80013bc:	4633      	mov	r3, r6
 80013be:	4622      	mov	r2, r4
 80013c0:	6810      	ldr	r0, [r2, #0]
 80013c2:	6018      	str	r0, [r3, #0]
 80013c4:	8891      	ldrh	r1, [r2, #4]
 80013c6:	7992      	ldrb	r2, [r2, #6]
 80013c8:	8099      	strh	r1, [r3, #4]
 80013ca:	719a      	strb	r2, [r3, #6]
				  strcat(message,",");
 80013cc:	4b3a      	ldr	r3, [pc, #232]	; (80014b8 <main+0x73c>)
 80013ce:	4a3b      	ldr	r2, [pc, #236]	; (80014bc <main+0x740>)
 80013d0:	443a      	add	r2, r7
 80013d2:	4413      	add	r3, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7fe ff7f 	bl	80002d8 <strlen>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	4b36      	ldr	r3, [pc, #216]	; (80014b8 <main+0x73c>)
 80013e0:	4936      	ldr	r1, [pc, #216]	; (80014bc <main+0x740>)
 80013e2:	4439      	add	r1, r7
 80013e4:	440b      	add	r3, r1
 80013e6:	4413      	add	r3, r2
 80013e8:	4936      	ldr	r1, [pc, #216]	; (80014c4 <main+0x748>)
 80013ea:	461a      	mov	r2, r3
 80013ec:	460b      	mov	r3, r1
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	8013      	strh	r3, [r2, #0]
				  char people_num[3];
				  itoa(total_people,people_num,10);
 80013f2:	4b35      	ldr	r3, [pc, #212]	; (80014c8 <main+0x74c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4935      	ldr	r1, [pc, #212]	; (80014cc <main+0x750>)
 80013f8:	4439      	add	r1, r7
 80013fa:	220a      	movs	r2, #10
 80013fc:	4618      	mov	r0, r3
 80013fe:	f00b fa9b 	bl	800c938 <itoa>
				  strcat(message,people_num);
 8001402:	4a32      	ldr	r2, [pc, #200]	; (80014cc <main+0x750>)
 8001404:	443a      	add	r2, r7
 8001406:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <main+0x73c>)
 8001408:	492c      	ldr	r1, [pc, #176]	; (80014bc <main+0x740>)
 800140a:	4439      	add	r1, r7
 800140c:	440b      	add	r3, r1
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f00b fe97 	bl	800d144 <strcat>
				  strcat(message,",");
 8001416:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <main+0x73c>)
 8001418:	4a28      	ldr	r2, [pc, #160]	; (80014bc <main+0x740>)
 800141a:	443a      	add	r2, r7
 800141c:	4413      	add	r3, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f7fe ff5a 	bl	80002d8 <strlen>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <main+0x73c>)
 800142a:	4924      	ldr	r1, [pc, #144]	; (80014bc <main+0x740>)
 800142c:	4439      	add	r1, r7
 800142e:	440b      	add	r3, r1
 8001430:	4413      	add	r3, r2
 8001432:	4924      	ldr	r1, [pc, #144]	; (80014c4 <main+0x748>)
 8001434:	461a      	mov	r2, r3
 8001436:	460b      	mov	r3, r1
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	8013      	strh	r3, [r2, #0]
				  char gps_end[8]="$GPSEND";
 800143c:	4a24      	ldr	r2, [pc, #144]	; (80014d0 <main+0x754>)
 800143e:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <main+0x758>)
 8001440:	443b      	add	r3, r7
 8001442:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001446:	e883 0003 	stmia.w	r3, {r0, r1}
				  strcat(message,gps_end);
 800144a:	4a22      	ldr	r2, [pc, #136]	; (80014d4 <main+0x758>)
 800144c:	443a      	add	r2, r7
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <main+0x73c>)
 8001450:	491a      	ldr	r1, [pc, #104]	; (80014bc <main+0x740>)
 8001452:	4439      	add	r1, r7
 8001454:	440b      	add	r3, r1
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f00b fe73 	bl	800d144 <strcat>
				  HAL_Delay(1);
 800145e:	2001      	movs	r0, #1
 8001460:	f001 fe76 	bl	8003150 <HAL_Delay>
				  if(count_send_gps_time++==10){
 8001464:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <main+0x75c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	b2d1      	uxtb	r1, r2
 800146c:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <main+0x75c>)
 800146e:	7011      	strb	r1, [r2, #0]
 8001470:	2b0a      	cmp	r3, #10
 8001472:	d10b      	bne.n	800148c <main+0x710>
					  HAL_UART_Transmit(&huart4, message, sizeof(message), 100);
 8001474:	4910      	ldr	r1, [pc, #64]	; (80014b8 <main+0x73c>)
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <main+0x740>)
 8001478:	443b      	add	r3, r7
 800147a:	4419      	add	r1, r3
 800147c:	2364      	movs	r3, #100	; 0x64
 800147e:	223c      	movs	r2, #60	; 0x3c
 8001480:	4816      	ldr	r0, [pc, #88]	; (80014dc <main+0x760>)
 8001482:	f009 fba1 	bl	800abc8 <HAL_UART_Transmit>
					  count_send_gps_time=0;
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <main+0x75c>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
				  }
				  HAL_Delay(1);
 800148c:	2001      	movs	r0, #1
 800148e:	f001 fe5f 	bl	8003150 <HAL_Delay>
			  }
			  ifOneline=0;
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <main+0x764>)
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
			  memset(USART_RX_BUF,0,sizeof(USART_RX_BUF));
 8001498:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800149c:	2100      	movs	r1, #0
 800149e:	4811      	ldr	r0, [pc, #68]	; (80014e4 <main+0x768>)
 80014a0:	f00b fa67 	bl	800c972 <memset>
  {
 80014a4:	e4fc      	b.n	8000ea0 <main+0x124>
 80014a6:	bf00      	nop
 80014a8:	24000244 	.word	0x24000244
 80014ac:	66666667 	.word	0x66666667
 80014b0:	000258a8 	.word	0x000258a8
 80014b4:	000258a9 	.word	0x000258a9
 80014b8:	fffda7ac 	.word	0xfffda7ac
 80014bc:	000258f0 	.word	0x000258f0
 80014c0:	24000630 	.word	0x24000630
 80014c4:	0800e454 	.word	0x0800e454
 80014c8:	2400023c 	.word	0x2400023c
 80014cc:	000258a4 	.word	0x000258a4
 80014d0:	0800e550 	.word	0x0800e550
 80014d4:	0002589c 	.word	0x0002589c
 80014d8:	2400023b 	.word	0x2400023b
 80014dc:	24000ac4 	.word	0x24000ac4
 80014e0:	24000242 	.word	0x24000242
 80014e4:	240006dc 	.word	0x240006dc

080014e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b0cc      	sub	sp, #304	; 0x130
 80014ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014f2:	224c      	movs	r2, #76	; 0x4c
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f00b fa3b 	bl	800c972 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001500:	2220      	movs	r2, #32
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f00b fa34 	bl	800c972 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	4618      	mov	r0, r3
 8001510:	23bc      	movs	r3, #188	; 0xbc
 8001512:	461a      	mov	r2, r3
 8001514:	2100      	movs	r1, #0
 8001516:	f00b fa2c 	bl	800c972 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800151a:	2002      	movs	r0, #2
 800151c:	f006 fb80 	bl	8007c20 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	4b52      	ldr	r3, [pc, #328]	; (8001670 <SystemClock_Config+0x188>)
 8001528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152a:	4a51      	ldr	r2, [pc, #324]	; (8001670 <SystemClock_Config+0x188>)
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001532:	4b4f      	ldr	r3, [pc, #316]	; (8001670 <SystemClock_Config+0x188>)
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	f003 0201 	and.w	r2, r3, #1
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	4b4d      	ldr	r3, [pc, #308]	; (8001674 <SystemClock_Config+0x18c>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001546:	4a4b      	ldr	r2, [pc, #300]	; (8001674 <SystemClock_Config+0x18c>)
 8001548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800154c:	6193      	str	r3, [r2, #24]
 800154e:	4b49      	ldr	r3, [pc, #292]	; (8001674 <SystemClock_Config+0x18c>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800155e:	bf00      	nop
 8001560:	4b44      	ldr	r3, [pc, #272]	; (8001674 <SystemClock_Config+0x18c>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800156c:	d1f8      	bne.n	8001560 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800156e:	2301      	movs	r3, #1
 8001570:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001574:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001578:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157c:	2302      	movs	r3, #2
 800157e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001582:	2302      	movs	r3, #2
 8001584:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001588:	2301      	movs	r3, #1
 800158a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 70;
 800158e:	2346      	movs	r3, #70	; 0x46
 8001590:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001594:	2302      	movs	r3, #2
 8001596:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015a0:	2302      	movs	r3, #2
 80015a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80015a6:	230c      	movs	r3, #12
 80015a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015bc:	4618      	mov	r0, r3
 80015be:	f006 fb69 	bl	8007c94 <HAL_RCC_OscConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80015c8:	f000 fec3 	bl	8002352 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015cc:	233f      	movs	r3, #63	; 0x3f
 80015ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d2:	2303      	movs	r3, #3
 80015d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80015de:	2308      	movs	r3, #8
 80015e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80015e4:	2340      	movs	r3, #64	; 0x40
 80015e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015ea:	2340      	movs	r3, #64	; 0x40
 80015ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80015f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80015f8:	2340      	movs	r3, #64	; 0x40
 80015fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015fe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001602:	2101      	movs	r1, #1
 8001604:	4618      	mov	r0, r3
 8001606:	f006 ff55 	bl	80084b4 <HAL_RCC_ClockConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001610:	f000 fe9f 	bl	8002352 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8001614:	f107 0308 	add.w	r3, r7, #8
 8001618:	4a17      	ldr	r2, [pc, #92]	; (8001678 <SystemClock_Config+0x190>)
 800161a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800161c:	f107 0308 	add.w	r3, r7, #8
 8001620:	2200      	movs	r2, #0
 8001622:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001624:	f107 0308 	add.w	r3, r7, #8
 8001628:	2200      	movs	r2, #0
 800162a:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	2200      	movs	r2, #0
 8001632:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	2200      	movs	r2, #0
 800163a:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800163c:	f107 0308 	add.w	r3, r7, #8
 8001640:	2200      	movs	r2, #0
 8001642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001646:	f107 0308 	add.w	r3, r7, #8
 800164a:	4618      	mov	r0, r3
 800164c:	f007 fb20 	bl	8008c90 <HAL_RCCEx_PeriphCLKConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0x172>
  {
    Error_Handler();
 8001656:	f000 fe7c 	bl	8002352 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_8);
 800165a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800165e:	2100      	movs	r1, #0
 8001660:	2001      	movs	r0, #1
 8001662:	f007 f8dd 	bl	8008820 <HAL_RCC_MCOConfig>
}
 8001666:	bf00      	nop
 8001668:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	58000400 	.word	0x58000400
 8001674:	58024800 	.word	0x58024800
 8001678:	0100100b 	.word	0x0100100b

0800167c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <MX_DCMI_Init+0x60>)
 8001682:	4a17      	ldr	r2, [pc, #92]	; (80016e0 <MX_DCMI_Init+0x64>)
 8001684:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <MX_DCMI_Init+0x60>)
 8001688:	2200      	movs	r2, #0
 800168a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <MX_DCMI_Init+0x60>)
 800168e:	2220      	movs	r2, #32
 8001690:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <MX_DCMI_Init+0x60>)
 8001694:	2280      	movs	r2, #128	; 0x80
 8001696:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <MX_DCMI_Init+0x60>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_DCMI_Init+0x60>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <MX_DCMI_Init+0x60>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_DCMI_Init+0x60>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <MX_DCMI_Init+0x60>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_DCMI_Init+0x60>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <MX_DCMI_Init+0x60>)
 80016be:	2200      	movs	r2, #0
 80016c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_DCMI_Init+0x60>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80016c8:	4804      	ldr	r0, [pc, #16]	; (80016dc <MX_DCMI_Init+0x60>)
 80016ca:	f001 fef7 	bl	80034bc <HAL_DCMI_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80016d4:	f000 fe3d 	bl	8002352 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	24000548 	.word	0x24000548
 80016e0:	48020000 	.word	0x48020000

080016e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <MX_I2C1_Init+0x74>)
 80016ea:	4a1c      	ldr	r2, [pc, #112]	; (800175c <MX_I2C1_Init+0x78>)
 80016ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC010151E;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_I2C1_Init+0x74>)
 80016f0:	4a1b      	ldr	r2, [pc, #108]	; (8001760 <MX_I2C1_Init+0x7c>)
 80016f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MX_I2C1_Init+0x74>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_I2C1_Init+0x74>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <MX_I2C1_Init+0x74>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_I2C1_Init+0x74>)
 8001708:	2200      	movs	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <MX_I2C1_Init+0x74>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_I2C1_Init+0x74>)
 8001714:	2200      	movs	r2, #0
 8001716:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_I2C1_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800171e:	480e      	ldr	r0, [pc, #56]	; (8001758 <MX_I2C1_Init+0x74>)
 8001720:	f005 fe7a 	bl	8007418 <HAL_I2C_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800172a:	f000 fe12 	bl	8002352 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800172e:	2100      	movs	r1, #0
 8001730:	4809      	ldr	r0, [pc, #36]	; (8001758 <MX_I2C1_Init+0x74>)
 8001732:	f006 f9dd 	bl	8007af0 <HAL_I2CEx_ConfigAnalogFilter>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800173c:	f000 fe09 	bl	8002352 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001740:	2100      	movs	r1, #0
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_I2C1_Init+0x74>)
 8001744:	f006 fa1f 	bl	8007b86 <HAL_I2CEx_ConfigDigitalFilter>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800174e:	f000 fe00 	bl	8002352 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2400039c 	.word	0x2400039c
 800175c:	40005400 	.word	0x40005400
 8001760:	c010151e 	.word	0xc010151e

08001764 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001768:	4b27      	ldr	r3, [pc, #156]	; (8001808 <MX_SPI1_Init+0xa4>)
 800176a:	4a28      	ldr	r2, [pc, #160]	; (800180c <MX_SPI1_Init+0xa8>)
 800176c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <MX_SPI1_Init+0xa4>)
 8001770:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001774:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001776:	4b24      	ldr	r3, [pc, #144]	; (8001808 <MX_SPI1_Init+0xa4>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800177c:	4b22      	ldr	r3, [pc, #136]	; (8001808 <MX_SPI1_Init+0xa4>)
 800177e:	2207      	movs	r2, #7
 8001780:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <MX_SPI1_Init+0xa4>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001788:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <MX_SPI1_Init+0xa4>)
 800178a:	2200      	movs	r2, #0
 800178c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800178e:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <MX_SPI1_Init+0xa4>)
 8001790:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001794:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <MX_SPI1_Init+0xa4>)
 8001798:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800179c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_SPI1_Init+0xa4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <MX_SPI1_Init+0xa4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <MX_SPI1_Init+0xa4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <MX_SPI1_Init+0xa4>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_SPI1_Init+0xa4>)
 80017b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017bc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_SPI1_Init+0xa4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <MX_SPI1_Init+0xa4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_SPI1_Init+0xa4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <MX_SPI1_Init+0xa4>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_SPI1_Init+0xa4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <MX_SPI1_Init+0xa4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_SPI1_Init+0xa4>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <MX_SPI1_Init+0xa4>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_SPI1_Init+0xa4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <MX_SPI1_Init+0xa4>)
 80017f6:	f008 fd4b 	bl	800a290 <HAL_SPI_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001800:	f000 fda7 	bl	8002352 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	24000b50 	.word	0x24000b50
 800180c:	40013000 	.word	0x40013000

08001810 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <MX_TIM2_Init+0x94>)
 8001830:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001834:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <MX_TIM2_Init+0x94>)
 8001838:	2214      	movs	r2, #20
 800183a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <MX_TIM2_Init+0x94>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <MX_TIM2_Init+0x94>)
 8001844:	2201      	movs	r2, #1
 8001846:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_TIM2_Init+0x94>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <MX_TIM2_Init+0x94>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001854:	4813      	ldr	r0, [pc, #76]	; (80018a4 <MX_TIM2_Init+0x94>)
 8001856:	f008 fe7f 	bl	800a558 <HAL_TIM_Base_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001860:	f000 fd77 	bl	8002352 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001868:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	4619      	mov	r1, r3
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <MX_TIM2_Init+0x94>)
 8001872:	f008 fec9 	bl	800a608 <HAL_TIM_ConfigClockSource>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800187c:	f000 fd69 	bl	8002352 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_TIM2_Init+0x94>)
 800188e:	f009 f8c3 	bl	800aa18 <HAL_TIMEx_MasterConfigSynchronization>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001898:	f000 fd5b 	bl	8002352 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	3720      	adds	r7, #32
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	240263d8 	.word	0x240263d8

080018a8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <MX_UART4_Init+0x90>)
 80018ae:	4a23      	ldr	r2, [pc, #140]	; (800193c <MX_UART4_Init+0x94>)
 80018b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 460800;
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <MX_UART4_Init+0x90>)
 80018b4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80018b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <MX_UART4_Init+0x90>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80018c0:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <MX_UART4_Init+0x90>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <MX_UART4_Init+0x90>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <MX_UART4_Init+0x90>)
 80018ce:	220c      	movs	r2, #12
 80018d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d2:	4b19      	ldr	r3, [pc, #100]	; (8001938 <MX_UART4_Init+0x90>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <MX_UART4_Init+0x90>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <MX_UART4_Init+0x90>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_UART4_Init+0x90>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <MX_UART4_Init+0x90>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80018f0:	4811      	ldr	r0, [pc, #68]	; (8001938 <MX_UART4_Init+0x90>)
 80018f2:	f009 f919 	bl	800ab28 <HAL_UART_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80018fc:	f000 fd29 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001900:	2100      	movs	r1, #0
 8001902:	480d      	ldr	r0, [pc, #52]	; (8001938 <MX_UART4_Init+0x90>)
 8001904:	f00a fdd9 	bl	800c4ba <HAL_UARTEx_SetTxFifoThreshold>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800190e:	f000 fd20 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001912:	2100      	movs	r1, #0
 8001914:	4808      	ldr	r0, [pc, #32]	; (8001938 <MX_UART4_Init+0x90>)
 8001916:	f00a fe0e 	bl	800c536 <HAL_UARTEx_SetRxFifoThreshold>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001920:	f000 fd17 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001924:	4804      	ldr	r0, [pc, #16]	; (8001938 <MX_UART4_Init+0x90>)
 8001926:	f00a fd8f 	bl	800c448 <HAL_UARTEx_DisableFifoMode>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001930:	f000 fd0f 	bl	8002352 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	24000ac4 	.word	0x24000ac4
 800193c:	40004c00 	.word	0x40004c00

08001940 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001944:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <MX_UART5_Init+0x90>)
 8001946:	4a23      	ldr	r2, [pc, #140]	; (80019d4 <MX_UART5_Init+0x94>)
 8001948:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <MX_UART5_Init+0x90>)
 800194c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001950:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001952:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <MX_UART5_Init+0x90>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <MX_UART5_Init+0x90>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <MX_UART5_Init+0x90>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001964:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <MX_UART5_Init+0x90>)
 8001966:	220c      	movs	r2, #12
 8001968:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <MX_UART5_Init+0x90>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <MX_UART5_Init+0x90>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <MX_UART5_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <MX_UART5_Init+0x90>)
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <MX_UART5_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001988:	4811      	ldr	r0, [pc, #68]	; (80019d0 <MX_UART5_Init+0x90>)
 800198a:	f009 f8cd 	bl	800ab28 <HAL_UART_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001994:	f000 fcdd 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001998:	2100      	movs	r1, #0
 800199a:	480d      	ldr	r0, [pc, #52]	; (80019d0 <MX_UART5_Init+0x90>)
 800199c:	f00a fd8d 	bl	800c4ba <HAL_UARTEx_SetTxFifoThreshold>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80019a6:	f000 fcd4 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019aa:	2100      	movs	r1, #0
 80019ac:	4808      	ldr	r0, [pc, #32]	; (80019d0 <MX_UART5_Init+0x90>)
 80019ae:	f00a fdc2 	bl	800c536 <HAL_UARTEx_SetRxFifoThreshold>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80019b8:	f000 fccb 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80019bc:	4804      	ldr	r0, [pc, #16]	; (80019d0 <MX_UART5_Init+0x90>)
 80019be:	f00a fd43 	bl	800c448 <HAL_UARTEx_DisableFifoMode>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80019c8:	f000 fcc3 	bl	8002352 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	240004bc 	.word	0x240004bc
 80019d4:	40005000 	.word	0x40005000

080019d8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80019dc:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <MX_UART7_Init+0x90>)
 80019de:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <MX_UART7_Init+0x94>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 38400;
 80019e2:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <MX_UART7_Init+0x90>)
 80019e4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80019e8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <MX_UART7_Init+0x90>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <MX_UART7_Init+0x90>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <MX_UART7_Init+0x90>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <MX_UART7_Init+0x90>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <MX_UART7_Init+0x90>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <MX_UART7_Init+0x90>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <MX_UART7_Init+0x90>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a14:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <MX_UART7_Init+0x90>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <MX_UART7_Init+0x90>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001a20:	4811      	ldr	r0, [pc, #68]	; (8001a68 <MX_UART7_Init+0x90>)
 8001a22:	f009 f881 	bl	800ab28 <HAL_UART_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001a2c:	f000 fc91 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a30:	2100      	movs	r1, #0
 8001a32:	480d      	ldr	r0, [pc, #52]	; (8001a68 <MX_UART7_Init+0x90>)
 8001a34:	f00a fd41 	bl	800c4ba <HAL_UARTEx_SetTxFifoThreshold>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001a3e:	f000 fc88 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a42:	2100      	movs	r1, #0
 8001a44:	4808      	ldr	r0, [pc, #32]	; (8001a68 <MX_UART7_Init+0x90>)
 8001a46:	f00a fd76 	bl	800c536 <HAL_UARTEx_SetRxFifoThreshold>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001a50:	f000 fc7f 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <MX_UART7_Init+0x90>)
 8001a56:	f00a fcf7 	bl	800c448 <HAL_UARTEx_DisableFifoMode>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001a60:	f000 fc77 	bl	8002352 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	24000284 	.word	0x24000284
 8001a6c:	40007800 	.word	0x40007800

08001a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <MX_USART1_UART_Init+0x90>)
 8001a76:	4a23      	ldr	r2, [pc, #140]	; (8001b04 <MX_USART1_UART_Init+0x94>)
 8001a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a7a:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <MX_USART1_UART_Init+0x90>)
 8001a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a82:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <MX_USART1_UART_Init+0x90>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <MX_USART1_UART_Init+0x90>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <MX_USART1_UART_Init+0x90>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <MX_USART1_UART_Init+0x90>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <MX_USART1_UART_Init+0x90>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <MX_USART1_UART_Init+0x90>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aa6:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <MX_USART1_UART_Init+0x90>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <MX_USART1_UART_Init+0x90>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <MX_USART1_UART_Init+0x90>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ab8:	4811      	ldr	r0, [pc, #68]	; (8001b00 <MX_USART1_UART_Init+0x90>)
 8001aba:	f009 f835 	bl	800ab28 <HAL_UART_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ac4:	f000 fc45 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac8:	2100      	movs	r1, #0
 8001aca:	480d      	ldr	r0, [pc, #52]	; (8001b00 <MX_USART1_UART_Init+0x90>)
 8001acc:	f00a fcf5 	bl	800c4ba <HAL_UARTEx_SetTxFifoThreshold>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ad6:	f000 fc3c 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ada:	2100      	movs	r1, #0
 8001adc:	4808      	ldr	r0, [pc, #32]	; (8001b00 <MX_USART1_UART_Init+0x90>)
 8001ade:	f00a fd2a 	bl	800c536 <HAL_UARTEx_SetRxFifoThreshold>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ae8:	f000 fc33 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <MX_USART1_UART_Init+0x90>)
 8001aee:	f00a fcab 	bl	800c448 <HAL_UARTEx_DisableFifoMode>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001af8:	f000 fc2b 	bl	8002352 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	24000598 	.word	0x24000598
 8001b04:	40011000 	.word	0x40011000

08001b08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b0c:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <MX_USART2_UART_Init+0x90>)
 8001b0e:	4a23      	ldr	r2, [pc, #140]	; (8001b9c <MX_USART2_UART_Init+0x94>)
 8001b10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8001b12:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <MX_USART2_UART_Init+0x90>)
 8001b14:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001b18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1a:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <MX_USART2_UART_Init+0x90>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <MX_USART2_UART_Init+0x90>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b26:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <MX_USART2_UART_Init+0x90>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <MX_USART2_UART_Init+0x90>)
 8001b2e:	220c      	movs	r2, #12
 8001b30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <MX_USART2_UART_Init+0x90>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b38:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <MX_USART2_UART_Init+0x90>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <MX_USART2_UART_Init+0x90>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <MX_USART2_UART_Init+0x90>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <MX_USART2_UART_Init+0x90>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b50:	4811      	ldr	r0, [pc, #68]	; (8001b98 <MX_USART2_UART_Init+0x90>)
 8001b52:	f008 ffe9 	bl	800ab28 <HAL_UART_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b5c:	f000 fbf9 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b60:	2100      	movs	r1, #0
 8001b62:	480d      	ldr	r0, [pc, #52]	; (8001b98 <MX_USART2_UART_Init+0x90>)
 8001b64:	f00a fca9 	bl	800c4ba <HAL_UARTEx_SetTxFifoThreshold>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b6e:	f000 fbf0 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b72:	2100      	movs	r1, #0
 8001b74:	4808      	ldr	r0, [pc, #32]	; (8001b98 <MX_USART2_UART_Init+0x90>)
 8001b76:	f00a fcde 	bl	800c536 <HAL_UARTEx_SetRxFifoThreshold>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b80:	f000 fbe7 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b84:	4804      	ldr	r0, [pc, #16]	; (8001b98 <MX_USART2_UART_Init+0x90>)
 8001b86:	f00a fc5f 	bl	800c448 <HAL_UARTEx_DisableFifoMode>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b90:	f000 fbdf 	bl	8002352 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	24026424 	.word	0x24026424
 8001b9c:	40004400 	.word	0x40004400

08001ba0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ba4:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <MX_USART3_UART_Init+0x90>)
 8001ba6:	4a23      	ldr	r2, [pc, #140]	; (8001c34 <MX_USART3_UART_Init+0x94>)
 8001ba8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001baa:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <MX_USART3_UART_Init+0x90>)
 8001bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb2:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <MX_USART3_UART_Init+0x90>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <MX_USART3_UART_Init+0x90>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <MX_USART3_UART_Init+0x90>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <MX_USART3_UART_Init+0x90>)
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bca:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <MX_USART3_UART_Init+0x90>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd0:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <MX_USART3_UART_Init+0x90>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <MX_USART3_UART_Init+0x90>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <MX_USART3_UART_Init+0x90>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <MX_USART3_UART_Init+0x90>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001be8:	4811      	ldr	r0, [pc, #68]	; (8001c30 <MX_USART3_UART_Init+0x90>)
 8001bea:	f008 ff9d 	bl	800ab28 <HAL_UART_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001bf4:	f000 fbad 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	480d      	ldr	r0, [pc, #52]	; (8001c30 <MX_USART3_UART_Init+0x90>)
 8001bfc:	f00a fc5d 	bl	800c4ba <HAL_UARTEx_SetTxFifoThreshold>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001c06:	f000 fba4 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4808      	ldr	r0, [pc, #32]	; (8001c30 <MX_USART3_UART_Init+0x90>)
 8001c0e:	f00a fc92 	bl	800c536 <HAL_UARTEx_SetRxFifoThreshold>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001c18:	f000 fb9b 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c1c:	4804      	ldr	r0, [pc, #16]	; (8001c30 <MX_USART3_UART_Init+0x90>)
 8001c1e:	f00a fc13 	bl	800c448 <HAL_UARTEx_DisableFifoMode>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001c28:	f000 fb93 	bl	8002352 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	24000310 	.word	0x24000310
 8001c34:	40004800 	.word	0x40004800

08001c38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <MX_DMA_Init+0x3c>)
 8001c40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c44:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <MX_DMA_Init+0x3c>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_DMA_Init+0x3c>)
 8001c50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2100      	movs	r1, #0
 8001c60:	200c      	movs	r0, #12
 8001c62:	f001 fb7e 	bl	8003362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c66:	200c      	movs	r0, #12
 8001c68:	f001 fb95 	bl	8003396 <HAL_NVIC_EnableIRQ>

}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	58024400 	.word	0x58024400

08001c78 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
 8001c8c:	615a      	str	r2, [r3, #20]
 8001c8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001c90:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <MX_FMC_Init+0xbc>)
 8001c92:	4a29      	ldr	r2, [pc, #164]	; (8001d38 <MX_FMC_Init+0xc0>)
 8001c94:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001c96:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <MX_FMC_Init+0xbc>)
 8001c98:	4a28      	ldr	r2, [pc, #160]	; (8001d3c <MX_FMC_Init+0xc4>)
 8001c9a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001c9c:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <MX_FMC_Init+0xbc>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001ca2:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <MX_FMC_Init+0xbc>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <MX_FMC_Init+0xbc>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001cae:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <MX_FMC_Init+0xbc>)
 8001cb0:	2210      	movs	r2, #16
 8001cb2:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <MX_FMC_Init+0xbc>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001cba:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <MX_FMC_Init+0xbc>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <MX_FMC_Init+0xbc>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <MX_FMC_Init+0xbc>)
 8001cc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001cce:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <MX_FMC_Init+0xbc>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <MX_FMC_Init+0xbc>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <MX_FMC_Init+0xbc>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <MX_FMC_Init+0xbc>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001ce6:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <MX_FMC_Init+0xbc>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <MX_FMC_Init+0xbc>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <MX_FMC_Init+0xbc>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 9;
 8001cf8:	2309      	movs	r3, #9
 8001cfa:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001cfc:	230f      	movs	r3, #15
 8001cfe:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 12;
 8001d00:	230c      	movs	r3, #12
 8001d02:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001d04:	230f      	movs	r3, #15
 8001d06:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001d08:	2310      	movs	r3, #16
 8001d0a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001d0c:	2311      	movs	r3, #17
 8001d0e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	2200      	movs	r2, #0
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4806      	ldr	r0, [pc, #24]	; (8001d34 <MX_FMC_Init+0xbc>)
 8001d1c:	f008 fbcc 	bl	800a4b8 <HAL_SRAM_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_FMC_Init+0xb2>
  {
    Error_Handler( );
 8001d26:	f000 fb14 	bl	8002352 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001d2a:	bf00      	nop
 8001d2c:	3720      	adds	r7, #32
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	24000470 	.word	0x24000470
 8001d38:	52004000 	.word	0x52004000
 8001d3c:	52004104 	.word	0x52004104

08001d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08e      	sub	sp, #56	; 0x38
 8001d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d56:	4b86      	ldr	r3, [pc, #536]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5c:	4a84      	ldr	r2, [pc, #528]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001d5e:	f043 0310 	orr.w	r3, r3, #16
 8001d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d66:	4b82      	ldr	r3, [pc, #520]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	623b      	str	r3, [r7, #32]
 8001d72:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d74:	4b7e      	ldr	r3, [pc, #504]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7a:	4a7d      	ldr	r2, [pc, #500]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d84:	4b7a      	ldr	r3, [pc, #488]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d92:	4b77      	ldr	r3, [pc, #476]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d98:	4a75      	ldr	r2, [pc, #468]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001d9a:	f043 0320 	orr.w	r3, r3, #32
 8001d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da2:	4b73      	ldr	r3, [pc, #460]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da8:	f003 0320 	and.w	r3, r3, #32
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001db0:	4b6f      	ldr	r3, [pc, #444]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db6:	4a6e      	ldr	r2, [pc, #440]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc0:	4b6b      	ldr	r3, [pc, #428]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dce:	4b68      	ldr	r3, [pc, #416]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd4:	4a66      	ldr	r2, [pc, #408]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dde:	4b64      	ldr	r3, [pc, #400]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dec:	4b60      	ldr	r3, [pc, #384]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df2:	4a5f      	ldr	r2, [pc, #380]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dfc:	4b5c      	ldr	r3, [pc, #368]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e0a:	4b59      	ldr	r3, [pc, #356]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e10:	4a57      	ldr	r2, [pc, #348]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001e12:	f043 0308 	orr.w	r3, r3, #8
 8001e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e1a:	4b55      	ldr	r3, [pc, #340]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e28:	4b51      	ldr	r3, [pc, #324]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2e:	4a50      	ldr	r2, [pc, #320]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e38:	4b4d      	ldr	r3, [pc, #308]	; (8001f70 <MX_GPIO_Init+0x230>)
 8001e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BG_Pin|CAMERA_PWR_DWN_Pin, GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	f640 0104 	movw	r1, #2052	; 0x804
 8001e4c:	4849      	ldr	r0, [pc, #292]	; (8001f74 <MX_GPIO_Init+0x234>)
 8001e4e:	f005 fac9 	bl	80073e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_LED_Pin|Red_LED_Pin|myLCD_DC_Pin|WIFI_RST_Pin
 8001e52:	2200      	movs	r2, #0
 8001e54:	f24c 3101 	movw	r1, #49921	; 0xc301
 8001e58:	4847      	ldr	r0, [pc, #284]	; (8001f78 <MX_GPIO_Init+0x238>)
 8001e5a:	f005 fac3 	bl	80073e4 <HAL_GPIO_WritePin>
                          |WIFI_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e64:	4845      	ldr	r0, [pc, #276]	; (8001f7c <MX_GPIO_Init+0x23c>)
 8001e66:	f005 fabd 	bl	80073e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e70:	4840      	ldr	r0, [pc, #256]	; (8001f74 <MX_GPIO_Init+0x234>)
 8001e72:	f005 fab7 	bl	80073e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2102      	movs	r1, #2
 8001e7a:	4841      	ldr	r0, [pc, #260]	; (8001f80 <MX_GPIO_Init+0x240>)
 8001e7c:	f005 fab2 	bl	80073e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin;
 8001e80:	230c      	movs	r3, #12
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e90:	4619      	mov	r1, r3
 8001e92:	483b      	ldr	r0, [pc, #236]	; (8001f80 <MX_GPIO_Init+0x240>)
 8001e94:	f005 f8de 	bl	8007054 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4831      	ldr	r0, [pc, #196]	; (8001f74 <MX_GPIO_Init+0x234>)
 8001eae:	f005 f8d1 	bl	8007054 <HAL_GPIO_Init>

  /*Configure GPIO pins : BG_Pin CAMERA_PWR_DWN_Pin CAMERA_RESET_Pin */
  GPIO_InitStruct.Pin = BG_Pin|CAMERA_PWR_DWN_Pin|CAMERA_RESET_Pin;
 8001eb2:	f641 0304 	movw	r3, #6148	; 0x1804
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec8:	4619      	mov	r1, r3
 8001eca:	482a      	ldr	r0, [pc, #168]	; (8001f74 <MX_GPIO_Init+0x234>)
 8001ecc:	f005 f8c2 	bl	8007054 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin myLCD_DC_Pin WIFI_CS_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|myLCD_DC_Pin|WIFI_CS_Pin;
 8001ed0:	f24c 2301 	movw	r3, #49665	; 0xc201
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4823      	ldr	r0, [pc, #140]	; (8001f78 <MX_GPIO_Init+0x238>)
 8001eea:	f005 f8b3 	bl	8007054 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001eee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f04:	4619      	mov	r1, r3
 8001f06:	481d      	ldr	r0, [pc, #116]	; (8001f7c <MX_GPIO_Init+0x23c>)
 8001f08:	f005 f8a4 	bl	8007054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f26:	4619      	mov	r1, r3
 8001f28:	4812      	ldr	r0, [pc, #72]	; (8001f74 <MX_GPIO_Init+0x234>)
 8001f2a:	f005 f893 	bl	8007054 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8001f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8001f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f44:	4619      	mov	r1, r3
 8001f46:	480c      	ldr	r0, [pc, #48]	; (8001f78 <MX_GPIO_Init+0x238>)
 8001f48:	f005 f884 	bl	8007054 <HAL_GPIO_Init>

  /*Configure GPIO pin : Yellow_LED_Pin */
  GPIO_InitStruct.Pin = Yellow_LED_Pin;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f50:	2301      	movs	r3, #1
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Yellow_LED_GPIO_Port, &GPIO_InitStruct);
 8001f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f60:	4619      	mov	r1, r3
 8001f62:	4807      	ldr	r0, [pc, #28]	; (8001f80 <MX_GPIO_Init+0x240>)
 8001f64:	f005 f876 	bl	8007054 <HAL_GPIO_Init>

}
 8001f68:	bf00      	nop
 8001f6a:	3738      	adds	r7, #56	; 0x38
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	58024400 	.word	0x58024400
 8001f74:	58020800 	.word	0x58020800
 8001f78:	58020400 	.word	0x58020400
 8001f7c:	58020c00 	.word	0x58020c00
 8001f80:	58021000 	.word	0x58021000

08001f84 <grey_transmit>:

/* USER CODE BEGIN 4 */
void grey_transmit(uint8_t *data){
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	for(int i=1;i<320*240*2;i++){
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	e013      	b.n	8001fba <grey_transmit+0x36>
			int16_t gray = (uint16_t) data[i++];
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	60fa      	str	r2, [r7, #12]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	817b      	strh	r3, [r7, #10]
			HAL_UART_Transmit(&huart4, &gray, 1, 1000);
 8001fa4:	f107 010a 	add.w	r1, r7, #10
 8001fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fac:	2201      	movs	r2, #1
 8001fae:	4807      	ldr	r0, [pc, #28]	; (8001fcc <grey_transmit+0x48>)
 8001fb0:	f008 fe0a 	bl	800abc8 <HAL_UART_Transmit>
	for(int i=1;i<320*240*2;i++){
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
 8001fc0:	dbe7      	blt.n	8001f92 <grey_transmit+0xe>

	}
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	24000ac4 	.word	0x24000ac4

08001fd0 <onFrameCallback>:
static void onFrameCallback(){
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
	new_capture = 1;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <onFrameCallback+0x14>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	2400023a 	.word	0x2400023a

08001fe8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	if(huart==&huart1){
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a21      	ldr	r2, [pc, #132]	; (8002078 <HAL_UART_RxCpltCallback+0x90>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d10c      	bne.n	8002012 <HAL_UART_RxCpltCallback+0x2a>
		 //HAL_UART_Transmit(&huart4, hot_buffer,7, 1000);
		strcpy(T,hot_buffer);
 8001ff8:	4920      	ldr	r1, [pc, #128]	; (800207c <HAL_UART_RxCpltCallback+0x94>)
 8001ffa:	4821      	ldr	r0, [pc, #132]	; (8002080 <HAL_UART_RxCpltCallback+0x98>)
 8001ffc:	f00b f8b1 	bl	800d162 <strcpy>
		T[8]='\0';
 8002000:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <HAL_UART_RxCpltCallback+0x98>)
 8002002:	2200      	movs	r2, #0
 8002004:	721a      	strb	r2, [r3, #8]
		HAL_UART_Receive_IT(huart, hot_buffer, 7);	//用此种发送方式在回调函数中，当发送的数据没有10位时，会让返回的数据不正�???????
 8002006:	2207      	movs	r2, #7
 8002008:	491c      	ldr	r1, [pc, #112]	; (800207c <HAL_UART_RxCpltCallback+0x94>)
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f008 fe72 	bl	800acf4 <HAL_UART_Receive_IT>
	}else if(huart==&huart2){
		//HAL_UART_Transmit(&huart4, wifi_rec, 1, 100);
		HAL_UART_Receive_IT(huart, wifi_rec, 1);
	}
//	HAL_UART_Transmit(&huart1, OT_UartBuffer, 10, 1000);
}
 8002010:	e02e      	b.n	8002070 <HAL_UART_RxCpltCallback+0x88>
	}else if(huart==&huart7){
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a1b      	ldr	r2, [pc, #108]	; (8002084 <HAL_UART_RxCpltCallback+0x9c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d121      	bne.n	800205e <HAL_UART_RxCpltCallback+0x76>
		if(rdata[0]=='$')
 800201a:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_UART_RxCpltCallback+0xa0>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b24      	cmp	r3, #36	; 0x24
 8002020:	d102      	bne.n	8002028 <HAL_UART_RxCpltCallback+0x40>
			point=0;
 8002022:	4b1a      	ldr	r3, [pc, #104]	; (800208c <HAL_UART_RxCpltCallback+0xa4>)
 8002024:	2200      	movs	r2, #0
 8002026:	801a      	strh	r2, [r3, #0]
		USART_RX_BUF[point++]=rdata[0];
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <HAL_UART_RxCpltCallback+0xa4>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	b291      	uxth	r1, r2
 8002030:	4a16      	ldr	r2, [pc, #88]	; (800208c <HAL_UART_RxCpltCallback+0xa4>)
 8002032:	8011      	strh	r1, [r2, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	4b14      	ldr	r3, [pc, #80]	; (8002088 <HAL_UART_RxCpltCallback+0xa0>)
 8002038:	7819      	ldrb	r1, [r3, #0]
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_UART_RxCpltCallback+0xa8>)
 800203c:	5499      	strb	r1, [r3, r2]
		if(rdata[0]=='\n'){
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_UART_RxCpltCallback+0xa0>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b0a      	cmp	r3, #10
 8002044:	d105      	bne.n	8002052 <HAL_UART_RxCpltCallback+0x6a>
			ifOneline=1;
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <HAL_UART_RxCpltCallback+0xac>)
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
			point=0;
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_UART_RxCpltCallback+0xa4>)
 800204e:	2200      	movs	r2, #0
 8002050:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(huart, rdata, 1);	//用此种发送方式在回调函数中，当发送的数据没有10位时，会让返回的数据不正�???????
 8002052:	2201      	movs	r2, #1
 8002054:	490c      	ldr	r1, [pc, #48]	; (8002088 <HAL_UART_RxCpltCallback+0xa0>)
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f008 fe4c 	bl	800acf4 <HAL_UART_Receive_IT>
}
 800205c:	e008      	b.n	8002070 <HAL_UART_RxCpltCallback+0x88>
	}else if(huart==&huart2){
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <HAL_UART_RxCpltCallback+0xb0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d104      	bne.n	8002070 <HAL_UART_RxCpltCallback+0x88>
		HAL_UART_Receive_IT(huart, wifi_rec, 1);
 8002066:	2201      	movs	r2, #1
 8002068:	490c      	ldr	r1, [pc, #48]	; (800209c <HAL_UART_RxCpltCallback+0xb4>)
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f008 fe42 	bl	800acf4 <HAL_UART_Receive_IT>
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	24000598 	.word	0x24000598
 800207c:	24000460 	.word	0x24000460
 8002080:	24000468 	.word	0x24000468
 8002084:	24000284 	.word	0x24000284
 8002088:	24000280 	.word	0x24000280
 800208c:	24000240 	.word	0x24000240
 8002090:	240006dc 	.word	0x240006dc
 8002094:	24000242 	.word	0x24000242
 8002098:	24026424 	.word	0x24026424
 800209c:	240006d8 	.word	0x240006d8

080020a0 <transfer>:
	memset(GPSData.longitude,0,longitude_Length);
	GPSData.isGetData=false;
	GPSData.isUseful=false;
}
void transfer(uint8_t *string)
{
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b0d3      	sub	sp, #332	; 0x14c
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	6018      	str	r0, [r3, #0]
	if(strstr(USART_RX_BUF,"GNRMC")==NULL)
 80020aa:	498a      	ldr	r1, [pc, #552]	; (80022d4 <transfer+0x234>)
 80020ac:	488a      	ldr	r0, [pc, #552]	; (80022d8 <transfer+0x238>)
 80020ae:	f00b f860 	bl	800d172 <strstr>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8108 	beq.w	80022ca <transfer+0x22a>
		return;
	char str1[100],str2[100],str3[100];
	int i,count,j,t;
	count=0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for(i=0;string[i]!='\0';i++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80020c6:	e0ab      	b.n	8002220 <transfer+0x180>
	{
		if(string[i]==',')
 80020c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80020cc:	1d3a      	adds	r2, r7, #4
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	4413      	add	r3, r2
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b2c      	cmp	r3, #44	; 0x2c
 80020d6:	f040 809e 	bne.w	8002216 <transfer+0x176>
		{
			count++;
 80020da:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80020de:	3301      	adds	r3, #1
 80020e0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
			if(count==2)
 80020e4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d12e      	bne.n	800214a <transfer+0xaa>
			{
				t=0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				for(j=i+1;string[j]!=',';j++)
 80020f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80020f6:	3301      	adds	r3, #1
 80020f8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80020fc:	e016      	b.n	800212c <transfer+0x8c>
				{
					str1[t]=string[j];
 80020fe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002102:	1d3a      	adds	r2, r7, #4
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	4413      	add	r3, r2
 8002108:	7819      	ldrb	r1, [r3, #0]
 800210a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800210e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002112:	4413      	add	r3, r2
 8002114:	460a      	mov	r2, r1
 8002116:	701a      	strb	r2, [r3, #0]
					t++;
 8002118:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800211c:	3301      	adds	r3, #1
 800211e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				for(j=i+1;string[j]!=',';j++)
 8002122:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002126:	3301      	adds	r3, #1
 8002128:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800212c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002130:	1d3a      	adds	r2, r7, #4
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	4413      	add	r3, r2
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b2c      	cmp	r3, #44	; 0x2c
 800213a:	d1e0      	bne.n	80020fe <transfer+0x5e>
				}
				str1[t]='\0';
 800213c:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8002140:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002144:	4413      	add	r3, r2
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
			}
			if(count==3)
 800214a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800214e:	2b03      	cmp	r3, #3
 8002150:	d12e      	bne.n	80021b0 <transfer+0x110>
			{
				t=0;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				for(j=i+1;string[j]!=',';j++)
 8002158:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800215c:	3301      	adds	r3, #1
 800215e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002162:	e016      	b.n	8002192 <transfer+0xf2>
				{
					str2[t]=string[j];
 8002164:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002168:	1d3a      	adds	r2, r7, #4
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	4413      	add	r3, r2
 800216e:	7819      	ldrb	r1, [r3, #0]
 8002170:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002174:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002178:	4413      	add	r3, r2
 800217a:	460a      	mov	r2, r1
 800217c:	701a      	strb	r2, [r3, #0]
					t++;
 800217e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002182:	3301      	adds	r3, #1
 8002184:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				for(j=i+1;string[j]!=',';j++)
 8002188:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800218c:	3301      	adds	r3, #1
 800218e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002192:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002196:	1d3a      	adds	r2, r7, #4
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	4413      	add	r3, r2
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b2c      	cmp	r3, #44	; 0x2c
 80021a0:	d1e0      	bne.n	8002164 <transfer+0xc4>
				}
				str2[t]='\0';
 80021a2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80021a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80021aa:	4413      	add	r3, r2
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
			}
			if(count==5)
 80021b0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d12e      	bne.n	8002216 <transfer+0x176>
			{
				t=0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				for(j=i+1;string[j]!=',';j++)
 80021be:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80021c2:	3301      	adds	r3, #1
 80021c4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80021c8:	e016      	b.n	80021f8 <transfer+0x158>
				{
					str3[t]=string[j];
 80021ca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80021ce:	1d3a      	adds	r2, r7, #4
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	7819      	ldrb	r1, [r3, #0]
 80021d6:	f107 020c 	add.w	r2, r7, #12
 80021da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80021de:	4413      	add	r3, r2
 80021e0:	460a      	mov	r2, r1
 80021e2:	701a      	strb	r2, [r3, #0]
					t++;
 80021e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80021e8:	3301      	adds	r3, #1
 80021ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				for(j=i+1;string[j]!=',';j++)
 80021ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80021f2:	3301      	adds	r3, #1
 80021f4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80021f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80021fc:	1d3a      	adds	r2, r7, #4
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	4413      	add	r3, r2
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b2c      	cmp	r3, #44	; 0x2c
 8002206:	d1e0      	bne.n	80021ca <transfer+0x12a>
				}
				str3[t]='\0';
 8002208:	f107 020c 	add.w	r2, r7, #12
 800220c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002210:	4413      	add	r3, r2
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
	for(i=0;string[i]!='\0';i++)
 8002216:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800221a:	3301      	adds	r3, #1
 800221c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002220:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002224:	1d3a      	adds	r2, r7, #4
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	4413      	add	r3, r2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	f47f af4b 	bne.w	80020c8 <transfer+0x28>
			}
		}
	}
	if(str1[0]=='A'){
 8002232:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8002236:	2b41      	cmp	r3, #65	; 0x41
 8002238:	d11c      	bne.n	8002274 <transfer+0x1d4>
		GPSData.isUseful=1;
 800223a:	4b28      	ldr	r3, [pc, #160]	; (80022dc <transfer+0x23c>)
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		strcpy(GPSData.latitude,str2);
 8002242:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002246:	4619      	mov	r1, r3
 8002248:	4825      	ldr	r0, [pc, #148]	; (80022e0 <transfer+0x240>)
 800224a:	f00a ff8a 	bl	800d162 <strcpy>
		strcpy(GPSData.longitude,str3);
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	4619      	mov	r1, r3
 8002254:	4823      	ldr	r0, [pc, #140]	; (80022e4 <transfer+0x244>)
 8002256:	f00a ff84 	bl	800d162 <strcpy>
		strcpy(latitude,str2);
 800225a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800225e:	4619      	mov	r1, r3
 8002260:	4821      	ldr	r0, [pc, #132]	; (80022e8 <transfer+0x248>)
 8002262:	f00a ff7e 	bl	800d162 <strcpy>
		strcpy(longitude,str3);
 8002266:	f107 030c 	add.w	r3, r7, #12
 800226a:	4619      	mov	r1, r3
 800226c:	481f      	ldr	r0, [pc, #124]	; (80022ec <transfer+0x24c>)
 800226e:	f00a ff78 	bl	800d162 <strcpy>
 8002272:	e00b      	b.n	800228c <transfer+0x1ec>
	}else{
		GPSData.isUseful=0;
 8002274:	4b19      	ldr	r3, [pc, #100]	; (80022dc <transfer+0x23c>)
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		strcpy(GPSData.latitude,latitude);
 800227c:	491a      	ldr	r1, [pc, #104]	; (80022e8 <transfer+0x248>)
 800227e:	4818      	ldr	r0, [pc, #96]	; (80022e0 <transfer+0x240>)
 8002280:	f00a ff6f 	bl	800d162 <strcpy>
		strcpy(GPSData.longitude,longitude);
 8002284:	4919      	ldr	r1, [pc, #100]	; (80022ec <transfer+0x24c>)
 8002286:	4817      	ldr	r0, [pc, #92]	; (80022e4 <transfer+0x244>)
 8002288:	f00a ff6b 	bl	800d162 <strcpy>
	};
	memcpy(GPSData.address,GPSData.latitude,latitude_Length);
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <transfer+0x23c>)
 800228e:	4a13      	ldr	r2, [pc, #76]	; (80022dc <transfer+0x23c>)
 8002290:	3370      	adds	r3, #112	; 0x70
 8002292:	3252      	adds	r2, #82	; 0x52
 8002294:	6814      	ldr	r4, [r2, #0]
 8002296:	6850      	ldr	r0, [r2, #4]
 8002298:	6891      	ldr	r1, [r2, #8]
 800229a:	601c      	str	r4, [r3, #0]
 800229c:	6058      	str	r0, [r3, #4]
 800229e:	6099      	str	r1, [r3, #8]
 80022a0:	8991      	ldrh	r1, [r2, #12]
 80022a2:	7b92      	ldrb	r2, [r2, #14]
 80022a4:	8199      	strh	r1, [r3, #12]
 80022a6:	739a      	strb	r2, [r3, #14]
	strcat(GPSData.address,",");
 80022a8:	4811      	ldr	r0, [pc, #68]	; (80022f0 <transfer+0x250>)
 80022aa:	f7fe f815 	bl	80002d8 <strlen>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <transfer+0x250>)
 80022b4:	4413      	add	r3, r2
 80022b6:	490f      	ldr	r1, [pc, #60]	; (80022f4 <transfer+0x254>)
 80022b8:	461a      	mov	r2, r3
 80022ba:	460b      	mov	r3, r1
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	8013      	strh	r3, [r2, #0]
	strcat(GPSData.address,GPSData.longitude);
 80022c0:	4908      	ldr	r1, [pc, #32]	; (80022e4 <transfer+0x244>)
 80022c2:	480b      	ldr	r0, [pc, #44]	; (80022f0 <transfer+0x250>)
 80022c4:	f00a ff3e 	bl	800d144 <strcat>
 80022c8:	e000      	b.n	80022cc <transfer+0x22c>
		return;
 80022ca:	bf00      	nop
	//strcat(GPSData.address,"\n");
}
 80022cc:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd90      	pop	{r4, r7, pc}
 80022d4:	0800e44c 	.word	0x0800e44c
 80022d8:	240006dc 	.word	0x240006dc
 80022dc:	24000630 	.word	0x24000630
 80022e0:	24000682 	.word	0x24000682
 80022e4:	24000691 	.word	0x24000691
 80022e8:	24000018 	.word	0x24000018
 80022ec:	24000028 	.word	0x24000028
 80022f0:	240006a0 	.word	0x240006a0
 80022f4:	0800e454 	.word	0x0800e454

080022f8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80022fe:	463b      	mov	r3, r7
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800230a:	f001 f85f 	bl	80033cc <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800230e:	2301      	movs	r3, #1
 8002310:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002312:	2300      	movs	r3, #0
 8002314:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x60000000;
 8002316:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800231a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 800231c:	231b      	movs	r3, #27
 800231e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002320:	2300      	movs	r3, #0
 8002322:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002324:	2300      	movs	r3, #0
 8002326:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002328:	2303      	movs	r3, #3
 800232a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800233c:	463b      	mov	r3, r7
 800233e:	4618      	mov	r0, r3
 8002340:	f001 f878 	bl	8003434 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002344:	2004      	movs	r0, #4
 8002346:	f001 f857 	bl	80033f8 <HAL_MPU_Enable>

}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_MspInit+0x30>)
 8002368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800236c:	4a08      	ldr	r2, [pc, #32]	; (8002390 <HAL_MspInit+0x30>)
 800236e:	f043 0302 	orr.w	r3, r3, #2
 8002372:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_MspInit+0x30>)
 8002378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	58024400 	.word	0x58024400

08002394 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08e      	sub	sp, #56	; 0x38
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a76      	ldr	r2, [pc, #472]	; (800258c <HAL_DCMI_MspInit+0x1f8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	f040 80e5 	bne.w	8002582 <HAL_DCMI_MspInit+0x1ee>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80023b8:	4b75      	ldr	r3, [pc, #468]	; (8002590 <HAL_DCMI_MspInit+0x1fc>)
 80023ba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80023be:	4a74      	ldr	r2, [pc, #464]	; (8002590 <HAL_DCMI_MspInit+0x1fc>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80023c8:	4b71      	ldr	r3, [pc, #452]	; (8002590 <HAL_DCMI_MspInit+0x1fc>)
 80023ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	623b      	str	r3, [r7, #32]
 80023d4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023d6:	4b6e      	ldr	r3, [pc, #440]	; (8002590 <HAL_DCMI_MspInit+0x1fc>)
 80023d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023dc:	4a6c      	ldr	r2, [pc, #432]	; (8002590 <HAL_DCMI_MspInit+0x1fc>)
 80023de:	f043 0310 	orr.w	r3, r3, #16
 80023e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e6:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <HAL_DCMI_MspInit+0x1fc>)
 80023e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f4:	4b66      	ldr	r3, [pc, #408]	; (8002590 <HAL_DCMI_MspInit+0x1fc>)
 80023f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fa:	4a65      	ldr	r2, [pc, #404]	; (8002590 <HAL_DCMI_MspInit+0x1fc>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002404:	4b62      	ldr	r3, [pc, #392]	; (8002590 <HAL_DCMI_MspInit+0x1fc>)
 8002406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	61bb      	str	r3, [r7, #24]
 8002410:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002412:	4b5f      	ldr	r3, [pc, #380]	; (8002590 <HAL_DCMI_MspInit+0x1fc>)
 8002414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002418:	4a5d      	ldr	r2, [pc, #372]	; (8002590 <HAL_DCMI_MspInit+0x1fc>)
 800241a:	f043 0304 	orr.w	r3, r3, #4
 800241e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002422:	4b5b      	ldr	r3, [pc, #364]	; (8002590 <HAL_DCMI_MspInit+0x1fc>)
 8002424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002430:	4b57      	ldr	r3, [pc, #348]	; (8002590 <HAL_DCMI_MspInit+0x1fc>)
 8002432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002436:	4a56      	ldr	r2, [pc, #344]	; (8002590 <HAL_DCMI_MspInit+0x1fc>)
 8002438:	f043 0308 	orr.w	r3, r3, #8
 800243c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002440:	4b53      	ldr	r3, [pc, #332]	; (8002590 <HAL_DCMI_MspInit+0x1fc>)
 8002442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800244e:	4b50      	ldr	r3, [pc, #320]	; (8002590 <HAL_DCMI_MspInit+0x1fc>)
 8002450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002454:	4a4e      	ldr	r2, [pc, #312]	; (8002590 <HAL_DCMI_MspInit+0x1fc>)
 8002456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800245a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800245e:	4b4c      	ldr	r3, [pc, #304]	; (8002590 <HAL_DCMI_MspInit+0x1fc>)
 8002460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    PG11     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800246c:	2370      	movs	r3, #112	; 0x70
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800247c:	230d      	movs	r3, #13
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002484:	4619      	mov	r1, r3
 8002486:	4843      	ldr	r0, [pc, #268]	; (8002594 <HAL_DCMI_MspInit+0x200>)
 8002488:	f004 fde4 	bl	8007054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800248c:	2350      	movs	r3, #80	; 0x50
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800249c:	230d      	movs	r3, #13
 800249e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a4:	4619      	mov	r1, r3
 80024a6:	483c      	ldr	r0, [pc, #240]	; (8002598 <HAL_DCMI_MspInit+0x204>)
 80024a8:	f004 fdd4 	bl	8007054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80024ac:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ba:	2300      	movs	r3, #0
 80024bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80024be:	230d      	movs	r3, #13
 80024c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c6:	4619      	mov	r1, r3
 80024c8:	4834      	ldr	r0, [pc, #208]	; (800259c <HAL_DCMI_MspInit+0x208>)
 80024ca:	f004 fdc3 	bl	8007054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024ce:	2308      	movs	r3, #8
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	2300      	movs	r3, #0
 80024dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80024de:	230d      	movs	r3, #13
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e6:	4619      	mov	r1, r3
 80024e8:	482d      	ldr	r0, [pc, #180]	; (80025a0 <HAL_DCMI_MspInit+0x20c>)
 80024ea:	f004 fdb3 	bl	8007054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80024ee:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002500:	230d      	movs	r3, #13
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002508:	4619      	mov	r1, r3
 800250a:	4826      	ldr	r0, [pc, #152]	; (80025a4 <HAL_DCMI_MspInit+0x210>)
 800250c:	f004 fda2 	bl	8007054 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream1;
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <HAL_DCMI_MspInit+0x214>)
 8002512:	4a26      	ldr	r2, [pc, #152]	; (80025ac <HAL_DCMI_MspInit+0x218>)
 8002514:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8002516:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <HAL_DCMI_MspInit+0x214>)
 8002518:	224b      	movs	r2, #75	; 0x4b
 800251a:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800251c:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <HAL_DCMI_MspInit+0x214>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002522:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <HAL_DCMI_MspInit+0x214>)
 8002524:	2200      	movs	r2, #0
 8002526:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002528:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <HAL_DCMI_MspInit+0x214>)
 800252a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800252e:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_DCMI_MspInit+0x214>)
 8002532:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002536:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <HAL_DCMI_MspInit+0x214>)
 800253a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800253e:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_DCMI_MspInit+0x214>)
 8002542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002546:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002548:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <HAL_DCMI_MspInit+0x214>)
 800254a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800254e:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002550:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <HAL_DCMI_MspInit+0x214>)
 8002552:	2200      	movs	r2, #0
 8002554:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002556:	4814      	ldr	r0, [pc, #80]	; (80025a8 <HAL_DCMI_MspInit+0x214>)
 8002558:	f001 fa92 	bl	8003a80 <HAL_DMA_Init>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_DCMI_MspInit+0x1d2>
    {
      Error_Handler();
 8002562:	f7ff fef6 	bl	8002352 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a0f      	ldr	r2, [pc, #60]	; (80025a8 <HAL_DCMI_MspInit+0x214>)
 800256a:	649a      	str	r2, [r3, #72]	; 0x48
 800256c:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <HAL_DCMI_MspInit+0x214>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8002572:	2200      	movs	r2, #0
 8002574:	2100      	movs	r1, #0
 8002576:	204e      	movs	r0, #78	; 0x4e
 8002578:	f000 fef3 	bl	8003362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800257c:	204e      	movs	r0, #78	; 0x4e
 800257e:	f000 ff0a 	bl	8003396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002582:	bf00      	nop
 8002584:	3738      	adds	r7, #56	; 0x38
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	48020000 	.word	0x48020000
 8002590:	58024400 	.word	0x58024400
 8002594:	58021000 	.word	0x58021000
 8002598:	58020000 	.word	0x58020000
 800259c:	58020800 	.word	0x58020800
 80025a0:	58020c00 	.word	0x58020c00
 80025a4:	58021800 	.word	0x58021800
 80025a8:	240003e8 	.word	0x240003e8
 80025ac:	40020028 	.word	0x40020028

080025b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1a      	ldr	r2, [pc, #104]	; (8002638 <HAL_I2C_MspInit+0x88>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d12d      	bne.n	800262e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d2:	4b1a      	ldr	r3, [pc, #104]	; (800263c <HAL_I2C_MspInit+0x8c>)
 80025d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d8:	4a18      	ldr	r2, [pc, #96]	; (800263c <HAL_I2C_MspInit+0x8c>)
 80025da:	f043 0302 	orr.w	r3, r3, #2
 80025de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025e2:	4b16      	ldr	r3, [pc, #88]	; (800263c <HAL_I2C_MspInit+0x8c>)
 80025e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025f0:	23c0      	movs	r3, #192	; 0xc0
 80025f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025f4:	2312      	movs	r3, #18
 80025f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025f8:	2301      	movs	r3, #1
 80025fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fc:	2300      	movs	r3, #0
 80025fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002600:	2304      	movs	r3, #4
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	4619      	mov	r1, r3
 800260a:	480d      	ldr	r0, [pc, #52]	; (8002640 <HAL_I2C_MspInit+0x90>)
 800260c:	f004 fd22 	bl	8007054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002610:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_I2C_MspInit+0x8c>)
 8002612:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002616:	4a09      	ldr	r2, [pc, #36]	; (800263c <HAL_I2C_MspInit+0x8c>)
 8002618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800261c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_I2C_MspInit+0x8c>)
 8002622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800262e:	bf00      	nop
 8002630:	3728      	adds	r7, #40	; 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40005400 	.word	0x40005400
 800263c:	58024400 	.word	0x58024400
 8002640:	58020400 	.word	0x58020400

08002644 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a1a      	ldr	r2, [pc, #104]	; (80026cc <HAL_SPI_MspInit+0x88>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d12d      	bne.n	80026c2 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_SPI_MspInit+0x8c>)
 8002668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800266c:	4a18      	ldr	r2, [pc, #96]	; (80026d0 <HAL_SPI_MspInit+0x8c>)
 800266e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002672:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <HAL_SPI_MspInit+0x8c>)
 8002678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800267c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_SPI_MspInit+0x8c>)
 8002686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268a:	4a11      	ldr	r2, [pc, #68]	; (80026d0 <HAL_SPI_MspInit+0x8c>)
 800268c:	f043 0302 	orr.w	r3, r3, #2
 8002690:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <HAL_SPI_MspInit+0x8c>)
 8002696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80026a2:	2338      	movs	r3, #56	; 0x38
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026b2:	2305      	movs	r3, #5
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	4805      	ldr	r0, [pc, #20]	; (80026d4 <HAL_SPI_MspInit+0x90>)
 80026be:	f004 fcc9 	bl	8007054 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026c2:	bf00      	nop
 80026c4:	3728      	adds	r7, #40	; 0x28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40013000 	.word	0x40013000
 80026d0:	58024400 	.word	0x58024400
 80026d4:	58020400 	.word	0x58020400

080026d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e8:	d10e      	bne.n	8002708 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_TIM_Base_MspInit+0x3c>)
 80026ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026f0:	4a08      	ldr	r2, [pc, #32]	; (8002714 <HAL_TIM_Base_MspInit+0x3c>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_TIM_Base_MspInit+0x3c>)
 80026fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	58024400 	.word	0x58024400

08002718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b094      	sub	sp, #80	; 0x50
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4aad      	ldr	r2, [pc, #692]	; (80029ec <HAL_UART_MspInit+0x2d4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d136      	bne.n	80027a8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800273a:	4bad      	ldr	r3, [pc, #692]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 800273c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002740:	4aab      	ldr	r2, [pc, #684]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 8002742:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002746:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800274a:	4ba9      	ldr	r3, [pc, #676]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 800274c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002750:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002754:	63bb      	str	r3, [r7, #56]	; 0x38
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002758:	4ba5      	ldr	r3, [pc, #660]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 800275a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800275e:	4aa4      	ldr	r2, [pc, #656]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002768:	4ba1      	ldr	r3, [pc, #644]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 800276a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	637b      	str	r3, [r7, #52]	; 0x34
 8002774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002776:	2303      	movs	r3, #3
 8002778:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002782:	2303      	movs	r3, #3
 8002784:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002786:	2308      	movs	r3, #8
 8002788:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800278e:	4619      	mov	r1, r3
 8002790:	4898      	ldr	r0, [pc, #608]	; (80029f4 <HAL_UART_MspInit+0x2dc>)
 8002792:	f004 fc5f 	bl	8007054 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002796:	2200      	movs	r2, #0
 8002798:	2100      	movs	r1, #0
 800279a:	2034      	movs	r0, #52	; 0x34
 800279c:	f000 fde1 	bl	8003362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80027a0:	2034      	movs	r0, #52	; 0x34
 80027a2:	f000 fdf8 	bl	8003396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027a6:	e11d      	b.n	80029e4 <HAL_UART_MspInit+0x2cc>
  else if(huart->Instance==UART5)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a92      	ldr	r2, [pc, #584]	; (80029f8 <HAL_UART_MspInit+0x2e0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d12f      	bne.n	8002812 <HAL_UART_MspInit+0xfa>
    __HAL_RCC_UART5_CLK_ENABLE();
 80027b2:	4b8f      	ldr	r3, [pc, #572]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 80027b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027b8:	4a8d      	ldr	r2, [pc, #564]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 80027ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027c2:	4b8b      	ldr	r3, [pc, #556]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 80027c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027cc:	633b      	str	r3, [r7, #48]	; 0x30
 80027ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d0:	4b87      	ldr	r3, [pc, #540]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 80027d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d6:	4a86      	ldr	r2, [pc, #536]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 80027d8:	f043 0302 	orr.w	r3, r3, #2
 80027dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027e0:	4b83      	ldr	r3, [pc, #524]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 80027e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80027ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80027f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	2300      	movs	r3, #0
 80027fe:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002800:	230e      	movs	r3, #14
 8002802:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002804:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002808:	4619      	mov	r1, r3
 800280a:	487c      	ldr	r0, [pc, #496]	; (80029fc <HAL_UART_MspInit+0x2e4>)
 800280c:	f004 fc22 	bl	8007054 <HAL_GPIO_Init>
}
 8002810:	e0e8      	b.n	80029e4 <HAL_UART_MspInit+0x2cc>
  else if(huart->Instance==UART7)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7a      	ldr	r2, [pc, #488]	; (8002a00 <HAL_UART_MspInit+0x2e8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d136      	bne.n	800288a <HAL_UART_MspInit+0x172>
    __HAL_RCC_UART7_CLK_ENABLE();
 800281c:	4b74      	ldr	r3, [pc, #464]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 800281e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002822:	4a73      	ldr	r2, [pc, #460]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 8002824:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002828:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800282c:	4b70      	ldr	r3, [pc, #448]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 800282e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002832:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
 8002838:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800283a:	4b6d      	ldr	r3, [pc, #436]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 800283c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002840:	4a6b      	ldr	r2, [pc, #428]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 8002842:	f043 0320 	orr.w	r3, r3, #32
 8002846:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800284a:	4b69      	ldr	r3, [pc, #420]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 800284c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002858:	23c0      	movs	r3, #192	; 0xc0
 800285a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2302      	movs	r3, #2
 800285e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002864:	2300      	movs	r3, #0
 8002866:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002868:	2307      	movs	r3, #7
 800286a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800286c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002870:	4619      	mov	r1, r3
 8002872:	4864      	ldr	r0, [pc, #400]	; (8002a04 <HAL_UART_MspInit+0x2ec>)
 8002874:	f004 fbee 	bl	8007054 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002878:	2200      	movs	r2, #0
 800287a:	2100      	movs	r1, #0
 800287c:	2052      	movs	r0, #82	; 0x52
 800287e:	f000 fd70 	bl	8003362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002882:	2052      	movs	r0, #82	; 0x52
 8002884:	f000 fd87 	bl	8003396 <HAL_NVIC_EnableIRQ>
}
 8002888:	e0ac      	b.n	80029e4 <HAL_UART_MspInit+0x2cc>
  else if(huart->Instance==USART1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a5e      	ldr	r2, [pc, #376]	; (8002a08 <HAL_UART_MspInit+0x2f0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d137      	bne.n	8002904 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002894:	4b56      	ldr	r3, [pc, #344]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 8002896:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800289a:	4a55      	ldr	r2, [pc, #340]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 800289c:	f043 0310 	orr.w	r3, r3, #16
 80028a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028a4:	4b52      	ldr	r3, [pc, #328]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 80028a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	623b      	str	r3, [r7, #32]
 80028b0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	4b4f      	ldr	r3, [pc, #316]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 80028b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b8:	4a4d      	ldr	r2, [pc, #308]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028c2:	4b4b      	ldr	r3, [pc, #300]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 80028c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = HOT_CAMERA_TX_Pin|HOT_CAMERA_RX_Pin;
 80028d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d6:	2302      	movs	r3, #2
 80028d8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028de:	2300      	movs	r3, #0
 80028e0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028e2:	2307      	movs	r3, #7
 80028e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028ea:	4619      	mov	r1, r3
 80028ec:	4841      	ldr	r0, [pc, #260]	; (80029f4 <HAL_UART_MspInit+0x2dc>)
 80028ee:	f004 fbb1 	bl	8007054 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2100      	movs	r1, #0
 80028f6:	2025      	movs	r0, #37	; 0x25
 80028f8:	f000 fd33 	bl	8003362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028fc:	2025      	movs	r0, #37	; 0x25
 80028fe:	f000 fd4a 	bl	8003396 <HAL_NVIC_EnableIRQ>
}
 8002902:	e06f      	b.n	80029e4 <HAL_UART_MspInit+0x2cc>
  else if(huart->Instance==USART2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a40      	ldr	r2, [pc, #256]	; (8002a0c <HAL_UART_MspInit+0x2f4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d136      	bne.n	800297c <HAL_UART_MspInit+0x264>
    __HAL_RCC_USART2_CLK_ENABLE();
 800290e:	4b38      	ldr	r3, [pc, #224]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 8002910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002914:	4a36      	ldr	r2, [pc, #216]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 8002916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800291e:	4b34      	ldr	r3, [pc, #208]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 8002920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292c:	4b30      	ldr	r3, [pc, #192]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 800292e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002932:	4a2f      	ldr	r2, [pc, #188]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800293c:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 800293e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800294a:	230c      	movs	r3, #12
 800294c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	2300      	movs	r3, #0
 8002958:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800295a:	2307      	movs	r3, #7
 800295c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002962:	4619      	mov	r1, r3
 8002964:	4823      	ldr	r0, [pc, #140]	; (80029f4 <HAL_UART_MspInit+0x2dc>)
 8002966:	f004 fb75 	bl	8007054 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	2026      	movs	r0, #38	; 0x26
 8002970:	f000 fcf7 	bl	8003362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002974:	2026      	movs	r0, #38	; 0x26
 8002976:	f000 fd0e 	bl	8003396 <HAL_NVIC_EnableIRQ>
}
 800297a:	e033      	b.n	80029e4 <HAL_UART_MspInit+0x2cc>
  else if(huart->Instance==USART3)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a23      	ldr	r2, [pc, #140]	; (8002a10 <HAL_UART_MspInit+0x2f8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d12e      	bne.n	80029e4 <HAL_UART_MspInit+0x2cc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002986:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 8002988:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800298c:	4a18      	ldr	r2, [pc, #96]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 800298e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002992:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002996:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 8002998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800299c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 80029a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029aa:	4a11      	ldr	r2, [pc, #68]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 80029ac:	f043 0302 	orr.w	r3, r3, #2
 80029b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <HAL_UART_MspInit+0x2d8>)
 80029b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c8:	2302      	movs	r3, #2
 80029ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d0:	2300      	movs	r3, #0
 80029d2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029d4:	2307      	movs	r3, #7
 80029d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029dc:	4619      	mov	r1, r3
 80029de:	4807      	ldr	r0, [pc, #28]	; (80029fc <HAL_UART_MspInit+0x2e4>)
 80029e0:	f004 fb38 	bl	8007054 <HAL_GPIO_Init>
}
 80029e4:	bf00      	nop
 80029e6:	3750      	adds	r7, #80	; 0x50
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40004c00 	.word	0x40004c00
 80029f0:	58024400 	.word	0x58024400
 80029f4:	58020000 	.word	0x58020000
 80029f8:	40005000 	.word	0x40005000
 80029fc:	58020400 	.word	0x58020400
 8002a00:	40007800 	.word	0x40007800
 8002a04:	58021400 	.word	0x58021400
 8002a08:	40011000 	.word	0x40011000
 8002a0c:	40004400 	.word	0x40004400
 8002a10:	40004800 	.word	0x40004800

08002a14 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002a28:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <HAL_FMC_MspInit+0x8c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d132      	bne.n	8002a96 <HAL_FMC_MspInit+0x82>
    return;
  }
  FMC_Initialized = 1;
 8002a30:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <HAL_FMC_MspInit+0x8c>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002a36:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <HAL_FMC_MspInit+0x90>)
 8002a38:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002a3c:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <HAL_FMC_MspInit+0x90>)
 8002a3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a42:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <HAL_FMC_MspInit+0x90>)
 8002a48:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a50:	603b      	str	r3, [r7, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002a54:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002a58:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a62:	2303      	movs	r3, #3
 8002a64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a66:	230c      	movs	r3, #12
 8002a68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	480e      	ldr	r0, [pc, #56]	; (8002aa8 <HAL_FMC_MspInit+0x94>)
 8002a70:	f004 faf0 	bl	8007054 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8002a74:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8002a78:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a82:	2303      	movs	r3, #3
 8002a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a86:	230c      	movs	r3, #12
 8002a88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4807      	ldr	r0, [pc, #28]	; (8002aac <HAL_FMC_MspInit+0x98>)
 8002a90:	f004 fae0 	bl	8007054 <HAL_GPIO_Init>
 8002a94:	e000      	b.n	8002a98 <HAL_FMC_MspInit+0x84>
    return;
 8002a96:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	24000248 	.word	0x24000248
 8002aa4:	58024400 	.word	0x58024400
 8002aa8:	58021000 	.word	0x58021000
 8002aac:	58020c00 	.word	0x58020c00

08002ab0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002ab8:	f7ff ffac 	bl	8002a14 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ad6:	e7fe      	b.n	8002ad6 <HardFault_Handler+0x4>

08002ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002adc:	e7fe      	b.n	8002adc <MemManage_Handler+0x4>

08002ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ae2:	e7fe      	b.n	8002ae2 <BusFault_Handler+0x4>

08002ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae8:	e7fe      	b.n	8002ae8 <UsageFault_Handler+0x4>

08002aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b18:	f000 fafa 	bl	8003110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002b24:	4802      	ldr	r0, [pc, #8]	; (8002b30 <DMA1_Stream1_IRQHandler+0x10>)
 8002b26:	f002 fad3 	bl	80050d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	240003e8 	.word	0x240003e8

08002b34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b38:	4804      	ldr	r0, [pc, #16]	; (8002b4c <USART1_IRQHandler+0x18>)
 8002b3a:	f008 f9b3 	bl	800aea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, hot_buffer, 7);
 8002b3e:	2207      	movs	r2, #7
 8002b40:	4903      	ldr	r1, [pc, #12]	; (8002b50 <USART1_IRQHandler+0x1c>)
 8002b42:	4802      	ldr	r0, [pc, #8]	; (8002b4c <USART1_IRQHandler+0x18>)
 8002b44:	f008 f8d6 	bl	800acf4 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8002b48:	bf00      	nop
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	24000598 	.word	0x24000598
 8002b50:	24000460 	.word	0x24000460

08002b54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b58:	4804      	ldr	r0, [pc, #16]	; (8002b6c <USART2_IRQHandler+0x18>)
 8002b5a:	f008 f9a3 	bl	800aea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, wifi_rec, 1);
 8002b5e:	2201      	movs	r2, #1
 8002b60:	4903      	ldr	r1, [pc, #12]	; (8002b70 <USART2_IRQHandler+0x1c>)
 8002b62:	4802      	ldr	r0, [pc, #8]	; (8002b6c <USART2_IRQHandler+0x18>)
 8002b64:	f008 f8c6 	bl	800acf4 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	24026424 	.word	0x24026424
 8002b70:	240006d8 	.word	0x240006d8

08002b74 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002b78:	4802      	ldr	r0, [pc, #8]	; (8002b84 <UART4_IRQHandler+0x10>)
 8002b7a:	f008 f993 	bl	800aea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  /* USER CODE END UART4_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	24000ac4 	.word	0x24000ac4

08002b88 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002b8c:	4802      	ldr	r0, [pc, #8]	; (8002b98 <DCMI_IRQHandler+0x10>)
 8002b8e:	f000 fe31 	bl	80037f4 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	24000548 	.word	0x24000548

08002b9c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002ba0:	4804      	ldr	r0, [pc, #16]	; (8002bb4 <UART7_IRQHandler+0x18>)
 8002ba2:	f008 f97f 	bl	800aea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */
  HAL_UART_Receive_IT(&huart7, rdata, 1);
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	4903      	ldr	r1, [pc, #12]	; (8002bb8 <UART7_IRQHandler+0x1c>)
 8002baa:	4802      	ldr	r0, [pc, #8]	; (8002bb4 <UART7_IRQHandler+0x18>)
 8002bac:	f008 f8a2 	bl	800acf4 <HAL_UART_Receive_IT>
  /* USER CODE END UART7_IRQn 1 */
}
 8002bb0:	bf00      	nop
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	24000284 	.word	0x24000284
 8002bb8:	24000280 	.word	0x24000280

08002bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bc4:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <_sbrk+0x5c>)
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <_sbrk+0x60>)
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <_sbrk+0x64>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d102      	bne.n	8002bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd8:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <_sbrk+0x64>)
 8002bda:	4a12      	ldr	r2, [pc, #72]	; (8002c24 <_sbrk+0x68>)
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bde:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <_sbrk+0x64>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d207      	bcs.n	8002bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bec:	f009 fe62 	bl	800c8b4 <__errno>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	230c      	movs	r3, #12
 8002bf4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfa:	e009      	b.n	8002c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bfc:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <_sbrk+0x64>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c02:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <_sbrk+0x64>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4413      	add	r3, r2
 8002c0a:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <_sbrk+0x64>)
 8002c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	24080000 	.word	0x24080000
 8002c1c:	00000400 	.word	0x00000400
 8002c20:	2400024c 	.word	0x2400024c
 8002c24:	240264b8 	.word	0x240264b8

08002c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c2c:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <SystemInit+0xec>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	4a38      	ldr	r2, [pc, #224]	; (8002d14 <SystemInit+0xec>)
 8002c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c3c:	4b36      	ldr	r3, [pc, #216]	; (8002d18 <SystemInit+0xf0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	2b06      	cmp	r3, #6
 8002c46:	d807      	bhi.n	8002c58 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c48:	4b33      	ldr	r3, [pc, #204]	; (8002d18 <SystemInit+0xf0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f023 030f 	bic.w	r3, r3, #15
 8002c50:	4a31      	ldr	r2, [pc, #196]	; (8002d18 <SystemInit+0xf0>)
 8002c52:	f043 0307 	orr.w	r3, r3, #7
 8002c56:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002c58:	4b30      	ldr	r3, [pc, #192]	; (8002d1c <SystemInit+0xf4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a2f      	ldr	r2, [pc, #188]	; (8002d1c <SystemInit+0xf4>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c64:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <SystemInit+0xf4>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002c6a:	4b2c      	ldr	r3, [pc, #176]	; (8002d1c <SystemInit+0xf4>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	492b      	ldr	r1, [pc, #172]	; (8002d1c <SystemInit+0xf4>)
 8002c70:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <SystemInit+0xf8>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c76:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <SystemInit+0xf0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	2b07      	cmp	r3, #7
 8002c80:	d907      	bls.n	8002c92 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c82:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <SystemInit+0xf0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 030f 	bic.w	r3, r3, #15
 8002c8a:	4a23      	ldr	r2, [pc, #140]	; (8002d18 <SystemInit+0xf0>)
 8002c8c:	f043 0307 	orr.w	r3, r3, #7
 8002c90:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <SystemInit+0xf4>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002c98:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <SystemInit+0xf4>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002c9e:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <SystemInit+0xf4>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <SystemInit+0xf4>)
 8002ca6:	4a1f      	ldr	r2, [pc, #124]	; (8002d24 <SystemInit+0xfc>)
 8002ca8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002caa:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <SystemInit+0xf4>)
 8002cac:	4a1e      	ldr	r2, [pc, #120]	; (8002d28 <SystemInit+0x100>)
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <SystemInit+0xf4>)
 8002cb2:	4a1e      	ldr	r2, [pc, #120]	; (8002d2c <SystemInit+0x104>)
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002cb6:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <SystemInit+0xf4>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002cbc:	4b17      	ldr	r3, [pc, #92]	; (8002d1c <SystemInit+0xf4>)
 8002cbe:	4a1b      	ldr	r2, [pc, #108]	; (8002d2c <SystemInit+0x104>)
 8002cc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002cc2:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <SystemInit+0xf4>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002cc8:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <SystemInit+0xf4>)
 8002cca:	4a18      	ldr	r2, [pc, #96]	; (8002d2c <SystemInit+0x104>)
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002cce:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <SystemInit+0xf4>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002cd4:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <SystemInit+0xf4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a10      	ldr	r2, [pc, #64]	; (8002d1c <SystemInit+0xf4>)
 8002cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ce0:	4b0e      	ldr	r3, [pc, #56]	; (8002d1c <SystemInit+0xf4>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <SystemInit+0x108>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <SystemInit+0x10c>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf2:	d202      	bcs.n	8002cfa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002cf4:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <SystemInit+0x110>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002cfa:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <SystemInit+0x114>)
 8002cfc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002d00:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d02:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <SystemInit+0xec>)
 8002d04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d08:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002d0a:	bf00      	nop
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000ed00 	.word	0xe000ed00
 8002d18:	52002000 	.word	0x52002000
 8002d1c:	58024400 	.word	0x58024400
 8002d20:	eaf6ed7f 	.word	0xeaf6ed7f
 8002d24:	02020200 	.word	0x02020200
 8002d28:	01ff0000 	.word	0x01ff0000
 8002d2c:	01010280 	.word	0x01010280
 8002d30:	5c001000 	.word	0x5c001000
 8002d34:	ffff0000 	.word	0xffff0000
 8002d38:	51008108 	.word	0x51008108
 8002d3c:	52004000 	.word	0x52004000

08002d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d78 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d44:	f7ff ff70 	bl	8002c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d4a:	e003      	b.n	8002d54 <LoopCopyDataInit>

08002d4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002d4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d52:	3104      	adds	r1, #4

08002d54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d54:	480a      	ldr	r0, [pc, #40]	; (8002d80 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002d58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d5c:	d3f6      	bcc.n	8002d4c <CopyDataInit>
  ldr  r2, =_sbss
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002d60:	e002      	b.n	8002d68 <LoopFillZerobss>

08002d62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d64:	f842 3b04 	str.w	r3, [r2], #4

08002d68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8002d6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d6c:	d3f9      	bcc.n	8002d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d6e:	f009 fda7 	bl	800c8c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d72:	f7fe f803 	bl	8000d7c <main>
  bx  lr    
 8002d76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d78:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002d7c:	0800ee40 	.word	0x0800ee40
  ldr  r0, =_sdata
 8002d80:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002d84:	2400021c 	.word	0x2400021c
  ldr  r2, =_sbss
 8002d88:	2400021c 	.word	0x2400021c
  ldr  r3, = _ebss
 8002d8c:	240264b8 	.word	0x240264b8

08002d90 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d90:	e7fe      	b.n	8002d90 <ADC3_IRQHandler>
	...

08002d94 <ov7670_init>:
/*** Internal Function Declarations ***/
//static HAL_StatusTypeDef ov7670_write(uint8_t regAddr, uint8_t data);
//static HAL_StatusTypeDef ov7670_read(uint8_t regAddr, uint8_t *data);

/*** External Function Defines ***/
HAL_StatusTypeDef ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c){
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 8002da0:	4a14      	ldr	r2, [pc, #80]	; (8002df4 <ov7670_init+0x60>)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 8002da6:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <ov7670_init+0x64>)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 8002dac:	4a13      	ldr	r2, [pc, #76]	; (8002dfc <ov7670_init+0x68>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0;
 8002db2:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <ov7670_init+0x6c>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8002db8:	2200      	movs	r2, #0
 8002dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dbe:	4811      	ldr	r0, [pc, #68]	; (8002e04 <ov7670_init+0x70>)
 8002dc0:	f004 fb10 	bl	80073e4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8002dc4:	2064      	movs	r0, #100	; 0x64
 8002dc6:	f000 f9c3 	bl	8003150 <HAL_Delay>
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dd0:	480c      	ldr	r0, [pc, #48]	; (8002e04 <ov7670_init+0x70>)
 8002dd2:	f004 fb07 	bl	80073e4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8002dd6:	2064      	movs	r0, #100	; 0x64
 8002dd8:	f000 f9ba 	bl	8003150 <HAL_Delay>

  ov7670_write(0x12, 0x80);  // RESET
 8002ddc:	2180      	movs	r1, #128	; 0x80
 8002dde:	2012      	movs	r0, #18
 8002de0:	f000 f904 	bl	8002fec <ov7670_write>
  HAL_Delay(30);
 8002de4:	201e      	movs	r0, #30
 8002de6:	f000 f9b3 	bl	8003150 <HAL_Delay>

  //uint8_t buffer[4];
  //ov7670_read(0x0b, buffer);

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	24000250 	.word	0x24000250
 8002df8:	24000254 	.word	0x24000254
 8002dfc:	24000258 	.word	0x24000258
 8002e00:	2400025c 	.word	0x2400025c
 8002e04:	58020800 	.word	0x58020800

08002e08 <ov7670_config>:

HAL_StatusTypeDef ov7670_config(uint8_t mode){
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	71fb      	strb	r3, [r7, #7]
  ov7670_stopCap();
 8002e12:	f000 f873 	bl	8002efc <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // RESET
 8002e16:	2180      	movs	r1, #128	; 0x80
 8002e18:	2012      	movs	r0, #18
 8002e1a:	f000 f8e7 	bl	8002fec <ov7670_write>
  HAL_Delay(30);
 8002e1e:	201e      	movs	r0, #30
 8002e20:	f000 f996 	bl	8003150 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_EOT; i++) {
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	e011      	b.n	8002e4e <ov7670_config+0x46>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 8002e2a:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <ov7670_config+0x74>)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8002e32:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <ov7670_config+0x74>)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	785b      	ldrb	r3, [r3, #1]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f000 f8d5 	bl	8002fec <ov7670_write>
    HAL_Delay(1);
 8002e42:	2001      	movs	r0, #1
 8002e44:	f000 f984 	bl	8003150 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_EOT; i++) {
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	4a0b      	ldr	r2, [pc, #44]	; (8002e7c <ov7670_config+0x74>)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002e56:	2bff      	cmp	r3, #255	; 0xff
 8002e58:	d1e7      	bne.n	8002e2a <ov7670_config+0x22>
  }
  if(mode == OV7670_MODE_QVGA_YUV){
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d107      	bne.n	8002e70 <ov7670_config+0x68>
	  ov7670_write(0x12, 0x10); // QVGA, YUV
 8002e60:	2110      	movs	r1, #16
 8002e62:	2012      	movs	r0, #18
 8002e64:	f000 f8c2 	bl	8002fec <ov7670_write>
	  ov7670_write(0x40, 0xc0); // 00-FF, No RGB
 8002e68:	21c0      	movs	r1, #192	; 0xc0
 8002e6a:	2040      	movs	r0, #64	; 0x40
 8002e6c:	f000 f8be 	bl	8002fec <ov7670_write>

	  //imgMode = OV7670_MODE_QVGA_YUV;
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	0800eb68 	.word	0x0800eb68

08002e80 <ov7670_startCap>:

// Capture modes are OV7670_CAP_SINGLE_FRAME or OV7670_CAP_CONTINUOUS
// Image modes are OV7670_MODE_QVGA_RGB565 or OV7670_MODE_QVGA_YUV
HAL_StatusTypeDef ov7670_startCap(uint32_t capMode, uint32_t destAddress){
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]

	ov7670_stopCap();
 8002e8a:	f000 f837 	bl	8002efc <ov7670_stopCap>
	if (capMode == OV7670_CAP_CONTINUOUS) {
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d110      	bne.n	8002eb6 <ov7670_startCap+0x36>
		/* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
		s_destAddressForContiuousMode = destAddress;
 8002e94:	4a15      	ldr	r2, [pc, #84]	; (8002eec <ov7670_startCap+0x6c>)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6013      	str	r3, [r2, #0]
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/imgMode);
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <ov7670_startCap+0x70>)
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <ov7670_startCap+0x74>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002ea8:	fb93 f3f2 	sdiv	r3, r3, r2
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	2100      	movs	r1, #0
 8002eb0:	f000 fb7e 	bl	80035b0 <HAL_DCMI_Start_DMA>
 8002eb4:	e015      	b.n	8002ee2 <ov7670_startCap+0x62>
	} else if (capMode == OV7670_CAP_SINGLE_FRAME) {
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d112      	bne.n	8002ee2 <ov7670_startCap+0x62>
		s_destAddressForContiuousMode = 0;
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <ov7670_startCap+0x6c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
		capture = 1;
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <ov7670_startCap+0x78>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/imgMode);
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <ov7670_startCap+0x70>)
 8002eca:	6818      	ldr	r0, [r3, #0]
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <ov7670_startCap+0x74>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002ed6:	fb93 f3f2 	sdiv	r3, r3, r2
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	2102      	movs	r1, #2
 8002ede:	f000 fb67 	bl	80035b0 <HAL_DCMI_Start_DMA>
	}

	return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	2400025c 	.word	0x2400025c
 8002ef0:	24000250 	.word	0x24000250
 8002ef4:	24000040 	.word	0x24000040
 8002ef8:	24000274 	.word	0x24000274

08002efc <ov7670_stopCap>:

HAL_StatusTypeDef ov7670_stopCap(){
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 8002f00:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <ov7670_stopCap+0x14>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fc15 	bl	8003734 <HAL_DCMI_Stop>
//  HAL_Delay(30);
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	24000250 	.word	0x24000250

08002f14 <ov7670_registerCallback>:

void ov7670_registerCallback(void (*cbHsync)(uint32_t h), void (*cbVsync)(uint32_t v), void (*cbFrame)()){
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  s_cbHsync = cbHsync;
 8002f20:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <ov7670_registerCallback+0x2c>)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6013      	str	r3, [r2, #0]
  s_cbVsync = cbVsync;
 8002f26:	4a07      	ldr	r2, [pc, #28]	; (8002f44 <ov7670_registerCallback+0x30>)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	6013      	str	r3, [r2, #0]
  s_cbFrame = cbFrame;
 8002f2c:	4a06      	ldr	r2, [pc, #24]	; (8002f48 <ov7670_registerCallback+0x34>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6013      	str	r3, [r2, #0]
}
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	24000260 	.word	0x24000260
 8002f44:	24000264 	.word	0x24000264
 8002f48:	24000268 	.word	0x24000268

08002f4c <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi){
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
//  printf("FRAME %d\n", HAL_GetTick());
  if(s_cbFrame)s_cbFrame();
 8002f54:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <HAL_DCMI_FrameEventCallback+0x50>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_DCMI_FrameEventCallback+0x16>
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <HAL_DCMI_FrameEventCallback+0x50>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4798      	blx	r3
  if(s_destAddressForContiuousMode != 0) {
 8002f62:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <HAL_DCMI_FrameEventCallback+0x54>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00b      	beq.n	8002f82 <HAL_DCMI_FrameEventCallback+0x36>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3328      	adds	r3, #40	; 0x28
 8002f74:	4619      	mov	r1, r3
 8002f76:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <HAL_DCMI_FrameEventCallback+0x54>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8002f7e:	f001 f8db 	bl	8004138 <HAL_DMA_Start_IT>
  }
  s_currentV++;
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <HAL_DCMI_FrameEventCallback+0x58>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3301      	adds	r3, #1
 8002f88:	4a06      	ldr	r2, [pc, #24]	; (8002fa4 <HAL_DCMI_FrameEventCallback+0x58>)
 8002f8a:	6013      	str	r3, [r2, #0]
  s_currentH = 0;
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_DCMI_FrameEventCallback+0x5c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	24000268 	.word	0x24000268
 8002fa0:	2400025c 	.word	0x2400025c
 8002fa4:	24000270 	.word	0x24000270
 8002fa8:	2400026c 	.word	0x2400026c

08002fac <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi){
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
	if(capture) if(s_cbVsync)s_cbVsync(s_currentV);
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <HAL_DCMI_VsyncEventCallback+0x34>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d009      	beq.n	8002fd0 <HAL_DCMI_VsyncEventCallback+0x24>
 8002fbc:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <HAL_DCMI_VsyncEventCallback+0x38>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_DCMI_VsyncEventCallback+0x24>
 8002fc4:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <HAL_DCMI_VsyncEventCallback+0x38>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a07      	ldr	r2, [pc, #28]	; (8002fe8 <HAL_DCMI_VsyncEventCallback+0x3c>)
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4798      	blx	r3
	capture = 0;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_DCMI_VsyncEventCallback+0x34>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
//  printf("VSYNC %d\n", HAL_GetTick());
//  HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	24000274 	.word	0x24000274
 8002fe4:	24000264 	.word	0x24000264
 8002fe8:	24000270 	.word	0x24000270

08002fec <ov7670_write>:
//  if(s_cbHsync)s_cbHsync(s_currentH);
//  s_currentH++;
//}

/*** Internal Function Defines ***/
HAL_StatusTypeDef ov7670_write(uint8_t regAddr, uint8_t data){
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af04      	add	r7, sp, #16
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	460a      	mov	r2, r1
 8002ff6:	71fb      	strb	r3, [r7, #7]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <ov7670_write+0x3c>)
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	b29a      	uxth	r2, r3
 8003004:	2364      	movs	r3, #100	; 0x64
 8003006:	9302      	str	r3, [sp, #8]
 8003008:	2301      	movs	r3, #1
 800300a:	9301      	str	r3, [sp, #4]
 800300c:	1dbb      	adds	r3, r7, #6
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	2301      	movs	r3, #1
 8003012:	2142      	movs	r1, #66	; 0x42
 8003014:	f004 fa90 	bl	8007538 <HAL_I2C_Mem_Write>
 8003018:	4603      	mov	r3, r0
 800301a:	73fb      	strb	r3, [r7, #15]
	//ret = HAL_I2C_Master_Transmit(sp_hi2c, SLAVE_ADDR, data, 1, 100);
  } while (ret != HAL_OK && 0);
  return ret;
 800301c:	7bfb      	ldrb	r3, [r7, #15]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	24000258 	.word	0x24000258

0800302c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003032:	2003      	movs	r0, #3
 8003034:	f000 f98a 	bl	800334c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003038:	f005 fc5c 	bl	80088f4 <HAL_RCC_GetSysClockFreq>
 800303c:	4601      	mov	r1, r0
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <HAL_Init+0x68>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	4a13      	ldr	r2, [pc, #76]	; (8003098 <HAL_Init+0x6c>)
 800304a:	5cd3      	ldrb	r3, [r2, r3]
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	fa21 f303 	lsr.w	r3, r1, r3
 8003054:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003056:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_Init+0x68>)
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	4a0e      	ldr	r2, [pc, #56]	; (8003098 <HAL_Init+0x6c>)
 8003060:	5cd3      	ldrb	r3, [r2, r3]
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
 800306c:	4a0b      	ldr	r2, [pc, #44]	; (800309c <HAL_Init+0x70>)
 800306e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003070:	4a0b      	ldr	r2, [pc, #44]	; (80030a0 <HAL_Init+0x74>)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003076:	2000      	movs	r0, #0
 8003078:	f000 f814 	bl	80030a4 <HAL_InitTick>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e002      	b.n	800308c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003086:	f7ff f96b 	bl	8002360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	58024400 	.word	0x58024400
 8003098:	0800eb58 	.word	0x0800eb58
 800309c:	2400003c 	.word	0x2400003c
 80030a0:	24000038 	.word	0x24000038

080030a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80030ac:	4b15      	ldr	r3, [pc, #84]	; (8003104 <HAL_InitTick+0x60>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e021      	b.n	80030fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80030b8:	4b13      	ldr	r3, [pc, #76]	; (8003108 <HAL_InitTick+0x64>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b11      	ldr	r3, [pc, #68]	; (8003104 <HAL_InitTick+0x60>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4619      	mov	r1, r3
 80030c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f96f 	bl	80033b2 <HAL_SYSTICK_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e00e      	b.n	80030fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b0f      	cmp	r3, #15
 80030e2:	d80a      	bhi.n	80030fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030e4:	2200      	movs	r2, #0
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ec:	f000 f939 	bl	8003362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030f0:	4a06      	ldr	r2, [pc, #24]	; (800310c <HAL_InitTick+0x68>)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	24000048 	.word	0x24000048
 8003108:	24000038 	.word	0x24000038
 800310c:	24000044 	.word	0x24000044

08003110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_IncTick+0x20>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_IncTick+0x24>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4413      	add	r3, r2
 8003120:	4a04      	ldr	r2, [pc, #16]	; (8003134 <HAL_IncTick+0x24>)
 8003122:	6013      	str	r3, [r2, #0]
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	24000048 	.word	0x24000048
 8003134:	240264b0 	.word	0x240264b0

08003138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return uwTick;
 800313c:	4b03      	ldr	r3, [pc, #12]	; (800314c <HAL_GetTick+0x14>)
 800313e:	681b      	ldr	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	240264b0 	.word	0x240264b0

08003150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7ff ffee 	bl	8003138 <HAL_GetTick>
 800315c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d005      	beq.n	8003176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_Delay+0x40>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003176:	bf00      	nop
 8003178:	f7ff ffde 	bl	8003138 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	429a      	cmp	r2, r3
 8003186:	d8f7      	bhi.n	8003178 <HAL_Delay+0x28>
  {
  }
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	24000048 	.word	0x24000048

08003194 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <HAL_GetREVID+0x14>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	0c1b      	lsrs	r3, r3, #16
}
 800319e:	4618      	mov	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	5c001000 	.word	0x5c001000

080031ac <__NVIC_SetPriorityGrouping>:
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <__NVIC_SetPriorityGrouping+0x40>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c8:	4013      	ands	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <__NVIC_SetPriorityGrouping+0x44>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031da:	4a04      	ldr	r2, [pc, #16]	; (80031ec <__NVIC_SetPriorityGrouping+0x40>)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	60d3      	str	r3, [r2, #12]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000ed00 	.word	0xe000ed00
 80031f0:	05fa0000 	.word	0x05fa0000

080031f4 <__NVIC_GetPriorityGrouping>:
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <__NVIC_GetPriorityGrouping+0x18>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	f003 0307 	and.w	r3, r3, #7
}
 8003202:	4618      	mov	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <__NVIC_EnableIRQ>:
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800321a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800321e:	2b00      	cmp	r3, #0
 8003220:	db0b      	blt.n	800323a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	f003 021f 	and.w	r2, r3, #31
 8003228:	4907      	ldr	r1, [pc, #28]	; (8003248 <__NVIC_EnableIRQ+0x38>)
 800322a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2001      	movs	r0, #1
 8003232:	fa00 f202 	lsl.w	r2, r0, r2
 8003236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	e000e100 	.word	0xe000e100

0800324c <__NVIC_SetPriority>:
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	6039      	str	r1, [r7, #0]
 8003256:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003258:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800325c:	2b00      	cmp	r3, #0
 800325e:	db0a      	blt.n	8003276 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	490c      	ldr	r1, [pc, #48]	; (8003298 <__NVIC_SetPriority+0x4c>)
 8003266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800326a:	0112      	lsls	r2, r2, #4
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	440b      	add	r3, r1
 8003270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003274:	e00a      	b.n	800328c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4908      	ldr	r1, [pc, #32]	; (800329c <__NVIC_SetPriority+0x50>)
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	3b04      	subs	r3, #4
 8003284:	0112      	lsls	r2, r2, #4
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	440b      	add	r3, r1
 800328a:	761a      	strb	r2, [r3, #24]
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000e100 	.word	0xe000e100
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <NVIC_EncodePriority>:
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	; 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f1c3 0307 	rsb	r3, r3, #7
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	bf28      	it	cs
 80032be:	2304      	movcs	r3, #4
 80032c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3304      	adds	r3, #4
 80032c6:	2b06      	cmp	r3, #6
 80032c8:	d902      	bls.n	80032d0 <NVIC_EncodePriority+0x30>
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3b03      	subs	r3, #3
 80032ce:	e000      	b.n	80032d2 <NVIC_EncodePriority+0x32>
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d4:	f04f 32ff 	mov.w	r2, #4294967295
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43da      	mvns	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	401a      	ands	r2, r3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e8:	f04f 31ff 	mov.w	r1, #4294967295
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	fa01 f303 	lsl.w	r3, r1, r3
 80032f2:	43d9      	mvns	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f8:	4313      	orrs	r3, r2
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3724      	adds	r7, #36	; 0x24
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3b01      	subs	r3, #1
 8003314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003318:	d301      	bcc.n	800331e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800331a:	2301      	movs	r3, #1
 800331c:	e00f      	b.n	800333e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800331e:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <SysTick_Config+0x40>)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3b01      	subs	r3, #1
 8003324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003326:	210f      	movs	r1, #15
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	f7ff ff8e 	bl	800324c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003330:	4b05      	ldr	r3, [pc, #20]	; (8003348 <SysTick_Config+0x40>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003336:	4b04      	ldr	r3, [pc, #16]	; (8003348 <SysTick_Config+0x40>)
 8003338:	2207      	movs	r2, #7
 800333a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	e000e010 	.word	0xe000e010

0800334c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff29 	bl	80031ac <__NVIC_SetPriorityGrouping>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b086      	sub	sp, #24
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003370:	f7ff ff40 	bl	80031f4 <__NVIC_GetPriorityGrouping>
 8003374:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	6978      	ldr	r0, [r7, #20]
 800337c:	f7ff ff90 	bl	80032a0 <NVIC_EncodePriority>
 8003380:	4602      	mov	r2, r0
 8003382:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff5f 	bl	800324c <__NVIC_SetPriority>
}
 800338e:	bf00      	nop
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	4603      	mov	r3, r0
 800339e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff33 	bl	8003210 <__NVIC_EnableIRQ>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff ffa4 	bl	8003308 <SysTick_Config>
 80033c0:	4603      	mov	r3, r0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80033d0:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <HAL_MPU_Disable+0x24>)
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	4a05      	ldr	r2, [pc, #20]	; (80033f0 <HAL_MPU_Disable+0x24>)
 80033da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033de:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <HAL_MPU_Disable+0x28>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	605a      	str	r2, [r3, #4]
}
 80033e6:	bf00      	nop
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000ed00 	.word	0xe000ed00
 80033f4:	e000ed90 	.word	0xe000ed90

080033f8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003400:	4a0a      	ldr	r2, [pc, #40]	; (800342c <HAL_MPU_Enable+0x34>)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800340a:	4b09      	ldr	r3, [pc, #36]	; (8003430 <HAL_MPU_Enable+0x38>)
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	4a08      	ldr	r2, [pc, #32]	; (8003430 <HAL_MPU_Enable+0x38>)
 8003410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003414:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003416:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800341a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	e000ed90 	.word	0xe000ed90
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	785a      	ldrb	r2, [r3, #1]
 8003440:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <HAL_MPU_ConfigRegion+0x84>)
 8003442:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d029      	beq.n	80034a0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800344c:	4a1a      	ldr	r2, [pc, #104]	; (80034b8 <HAL_MPU_ConfigRegion+0x84>)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	7b1b      	ldrb	r3, [r3, #12]
 8003458:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	7adb      	ldrb	r3, [r3, #11]
 800345e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003460:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	7a9b      	ldrb	r3, [r3, #10]
 8003466:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003468:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	7b5b      	ldrb	r3, [r3, #13]
 800346e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003470:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	7b9b      	ldrb	r3, [r3, #14]
 8003476:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003478:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	7bdb      	ldrb	r3, [r3, #15]
 800347e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003480:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	7a5b      	ldrb	r3, [r3, #9]
 8003486:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003488:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	7a1b      	ldrb	r3, [r3, #8]
 800348e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003490:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	7812      	ldrb	r2, [r2, #0]
 8003496:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003498:	4a07      	ldr	r2, [pc, #28]	; (80034b8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800349a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800349c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800349e:	e005      	b.n	80034ac <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_MPU_ConfigRegion+0x84>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80034a6:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_MPU_ConfigRegion+0x84>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	611a      	str	r2, [r3, #16]
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	e000ed90 	.word	0xe000ed90

080034bc <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e069      	b.n	80035a2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fe ff5a 	bl	8002394 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6819      	ldr	r1, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b2a      	ldr	r3, [pc, #168]	; (80035ac <HAL_DCMI_Init+0xf0>)
 8003502:	400b      	ands	r3, r1
 8003504:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6819      	ldr	r1, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800351a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003526:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003532:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800353e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800354a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b10      	cmp	r3, #16
 800355a:	d112      	bne.n	8003582 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	7f1b      	ldrb	r3, [r3, #28]
 8003560:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	7f5b      	ldrb	r3, [r3, #29]
 8003566:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003568:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	7f9b      	ldrb	r3, [r3, #30]
 800356e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003570:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7fdb      	ldrb	r3, [r3, #31]
 8003578:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800357e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003580:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 021e 	orr.w	r2, r2, #30
 8003590:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	ffe0f007 	.word	0xffe0f007

080035b0 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_DCMI_Start_DMA+0x1c>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e0ab      	b.n	8003724 <HAL_DCMI_Start_DMA+0x174>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035ea:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0202 	bic.w	r2, r2, #2
 80035fa:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6819      	ldr	r1, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	430a      	orrs	r2, r1
 800360a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003610:	4a46      	ldr	r2, [pc, #280]	; (800372c <HAL_DCMI_Start_DMA+0x17c>)
 8003612:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003618:	4a45      	ldr	r2, [pc, #276]	; (8003730 <HAL_DCMI_Start_DMA+0x180>)
 800361a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003620:	2200      	movs	r2, #0
 8003622:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003642:	d219      	bcs.n	8003678 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3328      	adds	r3, #40	; 0x28
 800364e:	4619      	mov	r1, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	f000 fd70 	bl	8004138 <HAL_DMA_Start_IT>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d055      	beq.n	800370a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2240      	movs	r2, #64	; 0x40
 8003662:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e055      	b.n	8003724 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367c:	4a2b      	ldr	r2, [pc, #172]	; (800372c <HAL_DCMI_Start_DMA+0x17c>)
 800367e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8003692:	e009      	b.n	80036a8 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003698:	085a      	lsrs	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	005a      	lsls	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b0:	d2f0      	bcs.n	8003694 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	1e9a      	subs	r2, r3, #2
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3328      	adds	r3, #40	; 0x28
 80036da:	4619      	mov	r1, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	f003 f805 	bl	80066f4 <HAL_DMAEx_MultiBufferStart_IT>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00c      	beq.n	800370a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2240      	movs	r2, #64	; 0x40
 80036f4:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e00c      	b.n	8003724 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 0201 	orr.w	r2, r2, #1
 8003718:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	08003921 	.word	0x08003921
 8003730:	08003a47 	.word	0x08003a47

08003734 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800373c:	4b2b      	ldr	r3, [pc, #172]	; (80037ec <HAL_DCMI_Stop+0xb8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a2b      	ldr	r2, [pc, #172]	; (80037f0 <HAL_DCMI_Stop+0xbc>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	0a5b      	lsrs	r3, r3, #9
 8003748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800374c:	fb02 f303 	mul.w	r3, r2, r3
 8003750:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_DCMI_Stop+0x30>
 8003760:	2302      	movs	r3, #2
 8003762:	e03f      	b.n	80037e4 <HAL_DCMI_Stop+0xb0>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3b01      	subs	r3, #1
 8003788:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d108      	bne.n	80037a2 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	72fb      	strb	r3, [r7, #11]
      break;
 80037a0:	e006      	b.n	80037b0 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e9      	bne.n	8003784 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037be:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 ff21 	bl	800460c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 80037e2:	7afb      	ldrb	r3, [r7, #11]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	24000038 	.word	0x24000038
 80037f0:	10624dd3 	.word	0x10624dd3

080037f4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d016      	beq.n	800383c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2204      	movs	r2, #4
 8003814:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381a:	f043 0202 	orr.w	r2, r3, #2
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2204      	movs	r2, #4
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800382e:	4a31      	ldr	r2, [pc, #196]	; (80038f4 <HAL_DCMI_IRQHandler+0x100>)
 8003830:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003836:	4618      	mov	r0, r3
 8003838:	f001 fa06 	bl	8004c48 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d016      	beq.n	8003874 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2202      	movs	r2, #2
 800384c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	f043 0201 	orr.w	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2204      	movs	r2, #4
 800385e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003866:	4a23      	ldr	r2, [pc, #140]	; (80038f4 <HAL_DCMI_IRQHandler+0x100>)
 8003868:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386e:	4618      	mov	r0, r3
 8003870:	f001 f9ea 	bl	8004c48 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b00      	cmp	r3, #0
 800387c:	d006      	beq.n	800388c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2210      	movs	r2, #16
 8003884:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f840 	bl	800390c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d006      	beq.n	80038a4 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2208      	movs	r2, #8
 800389c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff fb84 	bl	8002fac <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d01d      	beq.n	80038ea <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d107      	bne.n	80038cc <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 021e 	bic.w	r2, r2, #30
 80038ca:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2201      	movs	r2, #1
 80038e2:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff fb31 	bl	8002f4c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80038ea:	bf00      	nop
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	08003a47 	.word	0x08003a47

080038f8 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	2b00      	cmp	r3, #0
 8003934:	d043      	beq.n	80039be <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003942:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d118      	bne.n	8003982 <DCMI_DMAXferCplt+0x62>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d015      	beq.n	8003982 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	00da      	lsls	r2, r3, #3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4413      	add	r3, r2
 800396e:	2200      	movs	r2, #0
 8003970:	4619      	mov	r1, r3
 8003972:	f003 fa1d 	bl	8006db0 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	1e5a      	subs	r2, r3, #1
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	639a      	str	r2, [r3, #56]	; 0x38
 8003980:	e044      	b.n	8003a0c <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d13c      	bne.n	8003a0c <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	00da      	lsls	r2, r3, #3
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	4413      	add	r3, r2
 80039aa:	2201      	movs	r2, #1
 80039ac:	4619      	mov	r1, r3
 80039ae:	f003 f9ff 	bl	8006db0 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	1e5a      	subs	r2, r3, #1
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	639a      	str	r2, [r3, #56]	; 0x38
 80039bc:	e026      	b.n	8003a0c <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d006      	beq.n	80039dc <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80039d8:	60da      	str	r2, [r3, #12]
 80039da:	e017      	b.n	8003a0c <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10f      	bne.n	8003a0c <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f0:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	0099      	lsls	r1, r3, #2
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	440a      	add	r2, r1
 8003a02:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d112      	bne.n	8003a3e <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d103      	bne.n	8003a3e <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d009      	beq.n	8003a72 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f7ff ff40 	bl	80038f8 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003a88:	f7ff fb56 	bl	8003138 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e316      	b.n	80040c6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a66      	ldr	r2, [pc, #408]	; (8003c38 <HAL_DMA_Init+0x1b8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d04a      	beq.n	8003b38 <HAL_DMA_Init+0xb8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a65      	ldr	r2, [pc, #404]	; (8003c3c <HAL_DMA_Init+0x1bc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d045      	beq.n	8003b38 <HAL_DMA_Init+0xb8>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a63      	ldr	r2, [pc, #396]	; (8003c40 <HAL_DMA_Init+0x1c0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d040      	beq.n	8003b38 <HAL_DMA_Init+0xb8>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a62      	ldr	r2, [pc, #392]	; (8003c44 <HAL_DMA_Init+0x1c4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d03b      	beq.n	8003b38 <HAL_DMA_Init+0xb8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a60      	ldr	r2, [pc, #384]	; (8003c48 <HAL_DMA_Init+0x1c8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d036      	beq.n	8003b38 <HAL_DMA_Init+0xb8>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a5f      	ldr	r2, [pc, #380]	; (8003c4c <HAL_DMA_Init+0x1cc>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d031      	beq.n	8003b38 <HAL_DMA_Init+0xb8>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a5d      	ldr	r2, [pc, #372]	; (8003c50 <HAL_DMA_Init+0x1d0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d02c      	beq.n	8003b38 <HAL_DMA_Init+0xb8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a5c      	ldr	r2, [pc, #368]	; (8003c54 <HAL_DMA_Init+0x1d4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d027      	beq.n	8003b38 <HAL_DMA_Init+0xb8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a5a      	ldr	r2, [pc, #360]	; (8003c58 <HAL_DMA_Init+0x1d8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d022      	beq.n	8003b38 <HAL_DMA_Init+0xb8>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a59      	ldr	r2, [pc, #356]	; (8003c5c <HAL_DMA_Init+0x1dc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d01d      	beq.n	8003b38 <HAL_DMA_Init+0xb8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a57      	ldr	r2, [pc, #348]	; (8003c60 <HAL_DMA_Init+0x1e0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d018      	beq.n	8003b38 <HAL_DMA_Init+0xb8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a56      	ldr	r2, [pc, #344]	; (8003c64 <HAL_DMA_Init+0x1e4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d013      	beq.n	8003b38 <HAL_DMA_Init+0xb8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a54      	ldr	r2, [pc, #336]	; (8003c68 <HAL_DMA_Init+0x1e8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00e      	beq.n	8003b38 <HAL_DMA_Init+0xb8>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a53      	ldr	r2, [pc, #332]	; (8003c6c <HAL_DMA_Init+0x1ec>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d009      	beq.n	8003b38 <HAL_DMA_Init+0xb8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a51      	ldr	r2, [pc, #324]	; (8003c70 <HAL_DMA_Init+0x1f0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <HAL_DMA_Init+0xb8>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a50      	ldr	r2, [pc, #320]	; (8003c74 <HAL_DMA_Init+0x1f4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d101      	bne.n	8003b3c <HAL_DMA_Init+0xbc>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <HAL_DMA_Init+0xbe>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 813b 	beq.w	8003dba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a37      	ldr	r2, [pc, #220]	; (8003c38 <HAL_DMA_Init+0x1b8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d04a      	beq.n	8003bf4 <HAL_DMA_Init+0x174>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a36      	ldr	r2, [pc, #216]	; (8003c3c <HAL_DMA_Init+0x1bc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d045      	beq.n	8003bf4 <HAL_DMA_Init+0x174>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a34      	ldr	r2, [pc, #208]	; (8003c40 <HAL_DMA_Init+0x1c0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d040      	beq.n	8003bf4 <HAL_DMA_Init+0x174>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a33      	ldr	r2, [pc, #204]	; (8003c44 <HAL_DMA_Init+0x1c4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d03b      	beq.n	8003bf4 <HAL_DMA_Init+0x174>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a31      	ldr	r2, [pc, #196]	; (8003c48 <HAL_DMA_Init+0x1c8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d036      	beq.n	8003bf4 <HAL_DMA_Init+0x174>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a30      	ldr	r2, [pc, #192]	; (8003c4c <HAL_DMA_Init+0x1cc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d031      	beq.n	8003bf4 <HAL_DMA_Init+0x174>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a2e      	ldr	r2, [pc, #184]	; (8003c50 <HAL_DMA_Init+0x1d0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d02c      	beq.n	8003bf4 <HAL_DMA_Init+0x174>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a2d      	ldr	r2, [pc, #180]	; (8003c54 <HAL_DMA_Init+0x1d4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d027      	beq.n	8003bf4 <HAL_DMA_Init+0x174>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a2b      	ldr	r2, [pc, #172]	; (8003c58 <HAL_DMA_Init+0x1d8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d022      	beq.n	8003bf4 <HAL_DMA_Init+0x174>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a2a      	ldr	r2, [pc, #168]	; (8003c5c <HAL_DMA_Init+0x1dc>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d01d      	beq.n	8003bf4 <HAL_DMA_Init+0x174>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a28      	ldr	r2, [pc, #160]	; (8003c60 <HAL_DMA_Init+0x1e0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d018      	beq.n	8003bf4 <HAL_DMA_Init+0x174>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a27      	ldr	r2, [pc, #156]	; (8003c64 <HAL_DMA_Init+0x1e4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d013      	beq.n	8003bf4 <HAL_DMA_Init+0x174>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a25      	ldr	r2, [pc, #148]	; (8003c68 <HAL_DMA_Init+0x1e8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00e      	beq.n	8003bf4 <HAL_DMA_Init+0x174>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a24      	ldr	r2, [pc, #144]	; (8003c6c <HAL_DMA_Init+0x1ec>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d009      	beq.n	8003bf4 <HAL_DMA_Init+0x174>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a22      	ldr	r2, [pc, #136]	; (8003c70 <HAL_DMA_Init+0x1f0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d004      	beq.n	8003bf4 <HAL_DMA_Init+0x174>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a21      	ldr	r2, [pc, #132]	; (8003c74 <HAL_DMA_Init+0x1f4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d108      	bne.n	8003c06 <HAL_DMA_Init+0x186>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0201 	bic.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	e007      	b.n	8003c16 <HAL_DMA_Init+0x196>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0201 	bic.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c16:	e02f      	b.n	8003c78 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c18:	f7ff fa8e 	bl	8003138 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b05      	cmp	r3, #5
 8003c24:	d928      	bls.n	8003c78 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2203      	movs	r2, #3
 8003c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e246      	b.n	80040c6 <HAL_DMA_Init+0x646>
 8003c38:	40020010 	.word	0x40020010
 8003c3c:	40020028 	.word	0x40020028
 8003c40:	40020040 	.word	0x40020040
 8003c44:	40020058 	.word	0x40020058
 8003c48:	40020070 	.word	0x40020070
 8003c4c:	40020088 	.word	0x40020088
 8003c50:	400200a0 	.word	0x400200a0
 8003c54:	400200b8 	.word	0x400200b8
 8003c58:	40020410 	.word	0x40020410
 8003c5c:	40020428 	.word	0x40020428
 8003c60:	40020440 	.word	0x40020440
 8003c64:	40020458 	.word	0x40020458
 8003c68:	40020470 	.word	0x40020470
 8003c6c:	40020488 	.word	0x40020488
 8003c70:	400204a0 	.word	0x400204a0
 8003c74:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1c8      	bne.n	8003c18 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4b83      	ldr	r3, [pc, #524]	; (8003ea0 <HAL_DMA_Init+0x420>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003c9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003caa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d107      	bne.n	8003cdc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003cdc:	4b71      	ldr	r3, [pc, #452]	; (8003ea4 <HAL_DMA_Init+0x424>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b71      	ldr	r3, [pc, #452]	; (8003ea8 <HAL_DMA_Init+0x428>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce8:	d328      	bcc.n	8003d3c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b28      	cmp	r3, #40	; 0x28
 8003cf0:	d903      	bls.n	8003cfa <HAL_DMA_Init+0x27a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b2e      	cmp	r3, #46	; 0x2e
 8003cf8:	d917      	bls.n	8003d2a <HAL_DMA_Init+0x2aa>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b3e      	cmp	r3, #62	; 0x3e
 8003d00:	d903      	bls.n	8003d0a <HAL_DMA_Init+0x28a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b42      	cmp	r3, #66	; 0x42
 8003d08:	d90f      	bls.n	8003d2a <HAL_DMA_Init+0x2aa>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b46      	cmp	r3, #70	; 0x46
 8003d10:	d903      	bls.n	8003d1a <HAL_DMA_Init+0x29a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b48      	cmp	r3, #72	; 0x48
 8003d18:	d907      	bls.n	8003d2a <HAL_DMA_Init+0x2aa>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b4e      	cmp	r3, #78	; 0x4e
 8003d20:	d905      	bls.n	8003d2e <HAL_DMA_Init+0x2ae>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b52      	cmp	r3, #82	; 0x52
 8003d28:	d801      	bhi.n	8003d2e <HAL_DMA_Init+0x2ae>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <HAL_DMA_Init+0x2b0>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d3a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 0307 	bic.w	r3, r3, #7
 8003d52:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d117      	bne.n	8003d96 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00e      	beq.n	8003d96 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f002 fb31 	bl	80063e0 <DMA_CheckFifoParam>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2240      	movs	r2, #64	; 0x40
 8003d88:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e197      	b.n	80040c6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f002 fa6c 	bl	800627c <DMA_CalcBaseAndBitshift>
 8003da4:	4603      	mov	r3, r0
 8003da6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	223f      	movs	r2, #63	; 0x3f
 8003db2:	409a      	lsls	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	e0cd      	b.n	8003f56 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a3b      	ldr	r2, [pc, #236]	; (8003eac <HAL_DMA_Init+0x42c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d022      	beq.n	8003e0a <HAL_DMA_Init+0x38a>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a39      	ldr	r2, [pc, #228]	; (8003eb0 <HAL_DMA_Init+0x430>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d01d      	beq.n	8003e0a <HAL_DMA_Init+0x38a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a38      	ldr	r2, [pc, #224]	; (8003eb4 <HAL_DMA_Init+0x434>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d018      	beq.n	8003e0a <HAL_DMA_Init+0x38a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a36      	ldr	r2, [pc, #216]	; (8003eb8 <HAL_DMA_Init+0x438>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d013      	beq.n	8003e0a <HAL_DMA_Init+0x38a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a35      	ldr	r2, [pc, #212]	; (8003ebc <HAL_DMA_Init+0x43c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00e      	beq.n	8003e0a <HAL_DMA_Init+0x38a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a33      	ldr	r2, [pc, #204]	; (8003ec0 <HAL_DMA_Init+0x440>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d009      	beq.n	8003e0a <HAL_DMA_Init+0x38a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a32      	ldr	r2, [pc, #200]	; (8003ec4 <HAL_DMA_Init+0x444>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d004      	beq.n	8003e0a <HAL_DMA_Init+0x38a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a30      	ldr	r2, [pc, #192]	; (8003ec8 <HAL_DMA_Init+0x448>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d101      	bne.n	8003e0e <HAL_DMA_Init+0x38e>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <HAL_DMA_Init+0x390>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 8097 	beq.w	8003f44 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a24      	ldr	r2, [pc, #144]	; (8003eac <HAL_DMA_Init+0x42c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d021      	beq.n	8003e64 <HAL_DMA_Init+0x3e4>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a22      	ldr	r2, [pc, #136]	; (8003eb0 <HAL_DMA_Init+0x430>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d01c      	beq.n	8003e64 <HAL_DMA_Init+0x3e4>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a21      	ldr	r2, [pc, #132]	; (8003eb4 <HAL_DMA_Init+0x434>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d017      	beq.n	8003e64 <HAL_DMA_Init+0x3e4>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1f      	ldr	r2, [pc, #124]	; (8003eb8 <HAL_DMA_Init+0x438>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d012      	beq.n	8003e64 <HAL_DMA_Init+0x3e4>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a1e      	ldr	r2, [pc, #120]	; (8003ebc <HAL_DMA_Init+0x43c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00d      	beq.n	8003e64 <HAL_DMA_Init+0x3e4>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1c      	ldr	r2, [pc, #112]	; (8003ec0 <HAL_DMA_Init+0x440>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d008      	beq.n	8003e64 <HAL_DMA_Init+0x3e4>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a1b      	ldr	r2, [pc, #108]	; (8003ec4 <HAL_DMA_Init+0x444>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d003      	beq.n	8003e64 <HAL_DMA_Init+0x3e4>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a19      	ldr	r2, [pc, #100]	; (8003ec8 <HAL_DMA_Init+0x448>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2202      	movs	r2, #2
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_DMA_Init+0x44c>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b40      	cmp	r3, #64	; 0x40
 8003e8c:	d020      	beq.n	8003ed0 <HAL_DMA_Init+0x450>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b80      	cmp	r3, #128	; 0x80
 8003e94:	d102      	bne.n	8003e9c <HAL_DMA_Init+0x41c>
 8003e96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e9a:	e01a      	b.n	8003ed2 <HAL_DMA_Init+0x452>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e018      	b.n	8003ed2 <HAL_DMA_Init+0x452>
 8003ea0:	fe10803f 	.word	0xfe10803f
 8003ea4:	5c001000 	.word	0x5c001000
 8003ea8:	ffff0000 	.word	0xffff0000
 8003eac:	58025408 	.word	0x58025408
 8003eb0:	5802541c 	.word	0x5802541c
 8003eb4:	58025430 	.word	0x58025430
 8003eb8:	58025444 	.word	0x58025444
 8003ebc:	58025458 	.word	0x58025458
 8003ec0:	5802546c 	.word	0x5802546c
 8003ec4:	58025480 	.word	0x58025480
 8003ec8:	58025494 	.word	0x58025494
 8003ecc:	fffe000f 	.word	0xfffe000f
 8003ed0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68d2      	ldr	r2, [r2, #12]
 8003ed6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ed8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003ee0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ee8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ef0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ef8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f00:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	4b6e      	ldr	r3, [pc, #440]	; (80040d0 <HAL_DMA_Init+0x650>)
 8003f18:	4413      	add	r3, r2
 8003f1a:	4a6e      	ldr	r2, [pc, #440]	; (80040d4 <HAL_DMA_Init+0x654>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	091b      	lsrs	r3, r3, #4
 8003f22:	009a      	lsls	r2, r3, #2
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f002 f9a7 	bl	800627c <DMA_CalcBaseAndBitshift>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f36:	f003 031f 	and.w	r3, r3, #31
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	e008      	b.n	8003f56 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2240      	movs	r2, #64	; 0x40
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0b7      	b.n	80040c6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a5f      	ldr	r2, [pc, #380]	; (80040d8 <HAL_DMA_Init+0x658>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d072      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a5d      	ldr	r2, [pc, #372]	; (80040dc <HAL_DMA_Init+0x65c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d06d      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a5c      	ldr	r2, [pc, #368]	; (80040e0 <HAL_DMA_Init+0x660>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d068      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a5a      	ldr	r2, [pc, #360]	; (80040e4 <HAL_DMA_Init+0x664>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d063      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a59      	ldr	r2, [pc, #356]	; (80040e8 <HAL_DMA_Init+0x668>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d05e      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a57      	ldr	r2, [pc, #348]	; (80040ec <HAL_DMA_Init+0x66c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d059      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a56      	ldr	r2, [pc, #344]	; (80040f0 <HAL_DMA_Init+0x670>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d054      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a54      	ldr	r2, [pc, #336]	; (80040f4 <HAL_DMA_Init+0x674>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d04f      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a53      	ldr	r2, [pc, #332]	; (80040f8 <HAL_DMA_Init+0x678>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d04a      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a51      	ldr	r2, [pc, #324]	; (80040fc <HAL_DMA_Init+0x67c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d045      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a50      	ldr	r2, [pc, #320]	; (8004100 <HAL_DMA_Init+0x680>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d040      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a4e      	ldr	r2, [pc, #312]	; (8004104 <HAL_DMA_Init+0x684>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d03b      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a4d      	ldr	r2, [pc, #308]	; (8004108 <HAL_DMA_Init+0x688>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d036      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a4b      	ldr	r2, [pc, #300]	; (800410c <HAL_DMA_Init+0x68c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d031      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a4a      	ldr	r2, [pc, #296]	; (8004110 <HAL_DMA_Init+0x690>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d02c      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a48      	ldr	r2, [pc, #288]	; (8004114 <HAL_DMA_Init+0x694>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d027      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a47      	ldr	r2, [pc, #284]	; (8004118 <HAL_DMA_Init+0x698>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d022      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a45      	ldr	r2, [pc, #276]	; (800411c <HAL_DMA_Init+0x69c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01d      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a44      	ldr	r2, [pc, #272]	; (8004120 <HAL_DMA_Init+0x6a0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d018      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a42      	ldr	r2, [pc, #264]	; (8004124 <HAL_DMA_Init+0x6a4>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a41      	ldr	r2, [pc, #260]	; (8004128 <HAL_DMA_Init+0x6a8>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00e      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a3f      	ldr	r2, [pc, #252]	; (800412c <HAL_DMA_Init+0x6ac>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a3e      	ldr	r2, [pc, #248]	; (8004130 <HAL_DMA_Init+0x6b0>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_DMA_Init+0x5c6>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a3c      	ldr	r2, [pc, #240]	; (8004134 <HAL_DMA_Init+0x6b4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d101      	bne.n	800404a <HAL_DMA_Init+0x5ca>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_DMA_Init+0x5cc>
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d032      	beq.n	80040b6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f002 fa41 	bl	80064d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b80      	cmp	r3, #128	; 0x80
 800405c:	d102      	bne.n	8004064 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004078:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d010      	beq.n	80040a4 <HAL_DMA_Init+0x624>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b08      	cmp	r3, #8
 8004088:	d80c      	bhi.n	80040a4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f002 fabe 	bl	800660c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040a0:	605a      	str	r2, [r3, #4]
 80040a2:	e008      	b.n	80040b6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	a7fdabf8 	.word	0xa7fdabf8
 80040d4:	cccccccd 	.word	0xcccccccd
 80040d8:	40020010 	.word	0x40020010
 80040dc:	40020028 	.word	0x40020028
 80040e0:	40020040 	.word	0x40020040
 80040e4:	40020058 	.word	0x40020058
 80040e8:	40020070 	.word	0x40020070
 80040ec:	40020088 	.word	0x40020088
 80040f0:	400200a0 	.word	0x400200a0
 80040f4:	400200b8 	.word	0x400200b8
 80040f8:	40020410 	.word	0x40020410
 80040fc:	40020428 	.word	0x40020428
 8004100:	40020440 	.word	0x40020440
 8004104:	40020458 	.word	0x40020458
 8004108:	40020470 	.word	0x40020470
 800410c:	40020488 	.word	0x40020488
 8004110:	400204a0 	.word	0x400204a0
 8004114:	400204b8 	.word	0x400204b8
 8004118:	58025408 	.word	0x58025408
 800411c:	5802541c 	.word	0x5802541c
 8004120:	58025430 	.word	0x58025430
 8004124:	58025444 	.word	0x58025444
 8004128:	58025458 	.word	0x58025458
 800412c:	5802546c 	.word	0x5802546c
 8004130:	58025480 	.word	0x58025480
 8004134:	58025494 	.word	0x58025494

08004138 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e226      	b.n	80045a2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_DMA_Start_IT+0x2a>
 800415e:	2302      	movs	r3, #2
 8004160:	e21f      	b.n	80045a2 <HAL_DMA_Start_IT+0x46a>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b01      	cmp	r3, #1
 8004174:	f040 820a 	bne.w	800458c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a68      	ldr	r2, [pc, #416]	; (800432c <HAL_DMA_Start_IT+0x1f4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d04a      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a66      	ldr	r2, [pc, #408]	; (8004330 <HAL_DMA_Start_IT+0x1f8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d045      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a65      	ldr	r2, [pc, #404]	; (8004334 <HAL_DMA_Start_IT+0x1fc>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d040      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a63      	ldr	r2, [pc, #396]	; (8004338 <HAL_DMA_Start_IT+0x200>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d03b      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a62      	ldr	r2, [pc, #392]	; (800433c <HAL_DMA_Start_IT+0x204>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d036      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a60      	ldr	r2, [pc, #384]	; (8004340 <HAL_DMA_Start_IT+0x208>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d031      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a5f      	ldr	r2, [pc, #380]	; (8004344 <HAL_DMA_Start_IT+0x20c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d02c      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a5d      	ldr	r2, [pc, #372]	; (8004348 <HAL_DMA_Start_IT+0x210>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d027      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a5c      	ldr	r2, [pc, #368]	; (800434c <HAL_DMA_Start_IT+0x214>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d022      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a5a      	ldr	r2, [pc, #360]	; (8004350 <HAL_DMA_Start_IT+0x218>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01d      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a59      	ldr	r2, [pc, #356]	; (8004354 <HAL_DMA_Start_IT+0x21c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d018      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a57      	ldr	r2, [pc, #348]	; (8004358 <HAL_DMA_Start_IT+0x220>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a56      	ldr	r2, [pc, #344]	; (800435c <HAL_DMA_Start_IT+0x224>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00e      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a54      	ldr	r2, [pc, #336]	; (8004360 <HAL_DMA_Start_IT+0x228>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a53      	ldr	r2, [pc, #332]	; (8004364 <HAL_DMA_Start_IT+0x22c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a51      	ldr	r2, [pc, #324]	; (8004368 <HAL_DMA_Start_IT+0x230>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d108      	bne.n	8004238 <HAL_DMA_Start_IT+0x100>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0201 	bic.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	e007      	b.n	8004248 <HAL_DMA_Start_IT+0x110>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0201 	bic.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	68b9      	ldr	r1, [r7, #8]
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f001 fe68 	bl	8005f24 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a34      	ldr	r2, [pc, #208]	; (800432c <HAL_DMA_Start_IT+0x1f4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d04a      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a33      	ldr	r2, [pc, #204]	; (8004330 <HAL_DMA_Start_IT+0x1f8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d045      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a31      	ldr	r2, [pc, #196]	; (8004334 <HAL_DMA_Start_IT+0x1fc>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d040      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a30      	ldr	r2, [pc, #192]	; (8004338 <HAL_DMA_Start_IT+0x200>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d03b      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2e      	ldr	r2, [pc, #184]	; (800433c <HAL_DMA_Start_IT+0x204>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d036      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a2d      	ldr	r2, [pc, #180]	; (8004340 <HAL_DMA_Start_IT+0x208>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d031      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a2b      	ldr	r2, [pc, #172]	; (8004344 <HAL_DMA_Start_IT+0x20c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d02c      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a2a      	ldr	r2, [pc, #168]	; (8004348 <HAL_DMA_Start_IT+0x210>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d027      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a28      	ldr	r2, [pc, #160]	; (800434c <HAL_DMA_Start_IT+0x214>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d022      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a27      	ldr	r2, [pc, #156]	; (8004350 <HAL_DMA_Start_IT+0x218>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d01d      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a25      	ldr	r2, [pc, #148]	; (8004354 <HAL_DMA_Start_IT+0x21c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d018      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a24      	ldr	r2, [pc, #144]	; (8004358 <HAL_DMA_Start_IT+0x220>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d013      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a22      	ldr	r2, [pc, #136]	; (800435c <HAL_DMA_Start_IT+0x224>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00e      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a21      	ldr	r2, [pc, #132]	; (8004360 <HAL_DMA_Start_IT+0x228>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d009      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1f      	ldr	r2, [pc, #124]	; (8004364 <HAL_DMA_Start_IT+0x22c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d004      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1e      	ldr	r2, [pc, #120]	; (8004368 <HAL_DMA_Start_IT+0x230>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d101      	bne.n	80042f8 <HAL_DMA_Start_IT+0x1c0>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <HAL_DMA_Start_IT+0x1c2>
 80042f8:	2300      	movs	r3, #0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d036      	beq.n	800436c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 021e 	bic.w	r2, r3, #30
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0216 	orr.w	r2, r2, #22
 8004310:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d03e      	beq.n	8004398 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0208 	orr.w	r2, r2, #8
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	e035      	b.n	8004398 <HAL_DMA_Start_IT+0x260>
 800432c:	40020010 	.word	0x40020010
 8004330:	40020028 	.word	0x40020028
 8004334:	40020040 	.word	0x40020040
 8004338:	40020058 	.word	0x40020058
 800433c:	40020070 	.word	0x40020070
 8004340:	40020088 	.word	0x40020088
 8004344:	400200a0 	.word	0x400200a0
 8004348:	400200b8 	.word	0x400200b8
 800434c:	40020410 	.word	0x40020410
 8004350:	40020428 	.word	0x40020428
 8004354:	40020440 	.word	0x40020440
 8004358:	40020458 	.word	0x40020458
 800435c:	40020470 	.word	0x40020470
 8004360:	40020488 	.word	0x40020488
 8004364:	400204a0 	.word	0x400204a0
 8004368:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 020e 	bic.w	r2, r3, #14
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 020a 	orr.w	r2, r2, #10
 800437e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0204 	orr.w	r2, r2, #4
 8004396:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a83      	ldr	r2, [pc, #524]	; (80045ac <HAL_DMA_Start_IT+0x474>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d072      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a82      	ldr	r2, [pc, #520]	; (80045b0 <HAL_DMA_Start_IT+0x478>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d06d      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a80      	ldr	r2, [pc, #512]	; (80045b4 <HAL_DMA_Start_IT+0x47c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d068      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a7f      	ldr	r2, [pc, #508]	; (80045b8 <HAL_DMA_Start_IT+0x480>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d063      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a7d      	ldr	r2, [pc, #500]	; (80045bc <HAL_DMA_Start_IT+0x484>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d05e      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a7c      	ldr	r2, [pc, #496]	; (80045c0 <HAL_DMA_Start_IT+0x488>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d059      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a7a      	ldr	r2, [pc, #488]	; (80045c4 <HAL_DMA_Start_IT+0x48c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d054      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a79      	ldr	r2, [pc, #484]	; (80045c8 <HAL_DMA_Start_IT+0x490>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d04f      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a77      	ldr	r2, [pc, #476]	; (80045cc <HAL_DMA_Start_IT+0x494>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d04a      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a76      	ldr	r2, [pc, #472]	; (80045d0 <HAL_DMA_Start_IT+0x498>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d045      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a74      	ldr	r2, [pc, #464]	; (80045d4 <HAL_DMA_Start_IT+0x49c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d040      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a73      	ldr	r2, [pc, #460]	; (80045d8 <HAL_DMA_Start_IT+0x4a0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d03b      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a71      	ldr	r2, [pc, #452]	; (80045dc <HAL_DMA_Start_IT+0x4a4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d036      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a70      	ldr	r2, [pc, #448]	; (80045e0 <HAL_DMA_Start_IT+0x4a8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d031      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a6e      	ldr	r2, [pc, #440]	; (80045e4 <HAL_DMA_Start_IT+0x4ac>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d02c      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a6d      	ldr	r2, [pc, #436]	; (80045e8 <HAL_DMA_Start_IT+0x4b0>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d027      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a6b      	ldr	r2, [pc, #428]	; (80045ec <HAL_DMA_Start_IT+0x4b4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d022      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a6a      	ldr	r2, [pc, #424]	; (80045f0 <HAL_DMA_Start_IT+0x4b8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d01d      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a68      	ldr	r2, [pc, #416]	; (80045f4 <HAL_DMA_Start_IT+0x4bc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d018      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a67      	ldr	r2, [pc, #412]	; (80045f8 <HAL_DMA_Start_IT+0x4c0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d013      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a65      	ldr	r2, [pc, #404]	; (80045fc <HAL_DMA_Start_IT+0x4c4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00e      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a64      	ldr	r2, [pc, #400]	; (8004600 <HAL_DMA_Start_IT+0x4c8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d009      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a62      	ldr	r2, [pc, #392]	; (8004604 <HAL_DMA_Start_IT+0x4cc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a61      	ldr	r2, [pc, #388]	; (8004608 <HAL_DMA_Start_IT+0x4d0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d101      	bne.n	800448c <HAL_DMA_Start_IT+0x354>
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <HAL_DMA_Start_IT+0x356>
 800448c:	2300      	movs	r3, #0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d01a      	beq.n	80044c8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d007      	beq.n	80044b0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d007      	beq.n	80044c8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a37      	ldr	r2, [pc, #220]	; (80045ac <HAL_DMA_Start_IT+0x474>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d04a      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a36      	ldr	r2, [pc, #216]	; (80045b0 <HAL_DMA_Start_IT+0x478>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d045      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a34      	ldr	r2, [pc, #208]	; (80045b4 <HAL_DMA_Start_IT+0x47c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d040      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a33      	ldr	r2, [pc, #204]	; (80045b8 <HAL_DMA_Start_IT+0x480>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d03b      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a31      	ldr	r2, [pc, #196]	; (80045bc <HAL_DMA_Start_IT+0x484>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d036      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a30      	ldr	r2, [pc, #192]	; (80045c0 <HAL_DMA_Start_IT+0x488>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d031      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a2e      	ldr	r2, [pc, #184]	; (80045c4 <HAL_DMA_Start_IT+0x48c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d02c      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a2d      	ldr	r2, [pc, #180]	; (80045c8 <HAL_DMA_Start_IT+0x490>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d027      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a2b      	ldr	r2, [pc, #172]	; (80045cc <HAL_DMA_Start_IT+0x494>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d022      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2a      	ldr	r2, [pc, #168]	; (80045d0 <HAL_DMA_Start_IT+0x498>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d01d      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a28      	ldr	r2, [pc, #160]	; (80045d4 <HAL_DMA_Start_IT+0x49c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d018      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a27      	ldr	r2, [pc, #156]	; (80045d8 <HAL_DMA_Start_IT+0x4a0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d013      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a25      	ldr	r2, [pc, #148]	; (80045dc <HAL_DMA_Start_IT+0x4a4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00e      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a24      	ldr	r2, [pc, #144]	; (80045e0 <HAL_DMA_Start_IT+0x4a8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d009      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a22      	ldr	r2, [pc, #136]	; (80045e4 <HAL_DMA_Start_IT+0x4ac>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d004      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a21      	ldr	r2, [pc, #132]	; (80045e8 <HAL_DMA_Start_IT+0x4b0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d108      	bne.n	800457a <HAL_DMA_Start_IT+0x442>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	e012      	b.n	80045a0 <HAL_DMA_Start_IT+0x468>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0201 	orr.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	e009      	b.n	80045a0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800459a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40020010 	.word	0x40020010
 80045b0:	40020028 	.word	0x40020028
 80045b4:	40020040 	.word	0x40020040
 80045b8:	40020058 	.word	0x40020058
 80045bc:	40020070 	.word	0x40020070
 80045c0:	40020088 	.word	0x40020088
 80045c4:	400200a0 	.word	0x400200a0
 80045c8:	400200b8 	.word	0x400200b8
 80045cc:	40020410 	.word	0x40020410
 80045d0:	40020428 	.word	0x40020428
 80045d4:	40020440 	.word	0x40020440
 80045d8:	40020458 	.word	0x40020458
 80045dc:	40020470 	.word	0x40020470
 80045e0:	40020488 	.word	0x40020488
 80045e4:	400204a0 	.word	0x400204a0
 80045e8:	400204b8 	.word	0x400204b8
 80045ec:	58025408 	.word	0x58025408
 80045f0:	5802541c 	.word	0x5802541c
 80045f4:	58025430 	.word	0x58025430
 80045f8:	58025444 	.word	0x58025444
 80045fc:	58025458 	.word	0x58025458
 8004600:	5802546c 	.word	0x5802546c
 8004604:	58025480 	.word	0x58025480
 8004608:	58025494 	.word	0x58025494

0800460c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004614:	f7fe fd90 	bl	8003138 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e2dc      	b.n	8004bde <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d008      	beq.n	8004642 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2280      	movs	r2, #128	; 0x80
 8004634:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e2cd      	b.n	8004bde <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a76      	ldr	r2, [pc, #472]	; (8004820 <HAL_DMA_Abort+0x214>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d04a      	beq.n	80046e2 <HAL_DMA_Abort+0xd6>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a74      	ldr	r2, [pc, #464]	; (8004824 <HAL_DMA_Abort+0x218>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d045      	beq.n	80046e2 <HAL_DMA_Abort+0xd6>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a73      	ldr	r2, [pc, #460]	; (8004828 <HAL_DMA_Abort+0x21c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d040      	beq.n	80046e2 <HAL_DMA_Abort+0xd6>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a71      	ldr	r2, [pc, #452]	; (800482c <HAL_DMA_Abort+0x220>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d03b      	beq.n	80046e2 <HAL_DMA_Abort+0xd6>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a70      	ldr	r2, [pc, #448]	; (8004830 <HAL_DMA_Abort+0x224>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d036      	beq.n	80046e2 <HAL_DMA_Abort+0xd6>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a6e      	ldr	r2, [pc, #440]	; (8004834 <HAL_DMA_Abort+0x228>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d031      	beq.n	80046e2 <HAL_DMA_Abort+0xd6>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a6d      	ldr	r2, [pc, #436]	; (8004838 <HAL_DMA_Abort+0x22c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d02c      	beq.n	80046e2 <HAL_DMA_Abort+0xd6>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a6b      	ldr	r2, [pc, #428]	; (800483c <HAL_DMA_Abort+0x230>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d027      	beq.n	80046e2 <HAL_DMA_Abort+0xd6>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a6a      	ldr	r2, [pc, #424]	; (8004840 <HAL_DMA_Abort+0x234>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d022      	beq.n	80046e2 <HAL_DMA_Abort+0xd6>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a68      	ldr	r2, [pc, #416]	; (8004844 <HAL_DMA_Abort+0x238>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01d      	beq.n	80046e2 <HAL_DMA_Abort+0xd6>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a67      	ldr	r2, [pc, #412]	; (8004848 <HAL_DMA_Abort+0x23c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d018      	beq.n	80046e2 <HAL_DMA_Abort+0xd6>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a65      	ldr	r2, [pc, #404]	; (800484c <HAL_DMA_Abort+0x240>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d013      	beq.n	80046e2 <HAL_DMA_Abort+0xd6>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a64      	ldr	r2, [pc, #400]	; (8004850 <HAL_DMA_Abort+0x244>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00e      	beq.n	80046e2 <HAL_DMA_Abort+0xd6>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a62      	ldr	r2, [pc, #392]	; (8004854 <HAL_DMA_Abort+0x248>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d009      	beq.n	80046e2 <HAL_DMA_Abort+0xd6>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a61      	ldr	r2, [pc, #388]	; (8004858 <HAL_DMA_Abort+0x24c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d004      	beq.n	80046e2 <HAL_DMA_Abort+0xd6>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a5f      	ldr	r2, [pc, #380]	; (800485c <HAL_DMA_Abort+0x250>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d101      	bne.n	80046e6 <HAL_DMA_Abort+0xda>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <HAL_DMA_Abort+0xdc>
 80046e6:	2300      	movs	r3, #0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d013      	beq.n	8004714 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 021e 	bic.w	r2, r2, #30
 80046fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695a      	ldr	r2, [r3, #20]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800470a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	e00a      	b.n	800472a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 020e 	bic.w	r2, r2, #14
 8004722:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a3c      	ldr	r2, [pc, #240]	; (8004820 <HAL_DMA_Abort+0x214>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d072      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a3a      	ldr	r2, [pc, #232]	; (8004824 <HAL_DMA_Abort+0x218>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d06d      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a39      	ldr	r2, [pc, #228]	; (8004828 <HAL_DMA_Abort+0x21c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d068      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a37      	ldr	r2, [pc, #220]	; (800482c <HAL_DMA_Abort+0x220>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d063      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a36      	ldr	r2, [pc, #216]	; (8004830 <HAL_DMA_Abort+0x224>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d05e      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a34      	ldr	r2, [pc, #208]	; (8004834 <HAL_DMA_Abort+0x228>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d059      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a33      	ldr	r2, [pc, #204]	; (8004838 <HAL_DMA_Abort+0x22c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d054      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a31      	ldr	r2, [pc, #196]	; (800483c <HAL_DMA_Abort+0x230>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d04f      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a30      	ldr	r2, [pc, #192]	; (8004840 <HAL_DMA_Abort+0x234>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d04a      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a2e      	ldr	r2, [pc, #184]	; (8004844 <HAL_DMA_Abort+0x238>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d045      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a2d      	ldr	r2, [pc, #180]	; (8004848 <HAL_DMA_Abort+0x23c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d040      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a2b      	ldr	r2, [pc, #172]	; (800484c <HAL_DMA_Abort+0x240>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d03b      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a2a      	ldr	r2, [pc, #168]	; (8004850 <HAL_DMA_Abort+0x244>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d036      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a28      	ldr	r2, [pc, #160]	; (8004854 <HAL_DMA_Abort+0x248>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d031      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a27      	ldr	r2, [pc, #156]	; (8004858 <HAL_DMA_Abort+0x24c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d02c      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a25      	ldr	r2, [pc, #148]	; (800485c <HAL_DMA_Abort+0x250>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d027      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a24      	ldr	r2, [pc, #144]	; (8004860 <HAL_DMA_Abort+0x254>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d022      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a22      	ldr	r2, [pc, #136]	; (8004864 <HAL_DMA_Abort+0x258>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01d      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a21      	ldr	r2, [pc, #132]	; (8004868 <HAL_DMA_Abort+0x25c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d018      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1f      	ldr	r2, [pc, #124]	; (800486c <HAL_DMA_Abort+0x260>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d013      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a1e      	ldr	r2, [pc, #120]	; (8004870 <HAL_DMA_Abort+0x264>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00e      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1c      	ldr	r2, [pc, #112]	; (8004874 <HAL_DMA_Abort+0x268>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d009      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1b      	ldr	r2, [pc, #108]	; (8004878 <HAL_DMA_Abort+0x26c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d004      	beq.n	800481a <HAL_DMA_Abort+0x20e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a19      	ldr	r2, [pc, #100]	; (800487c <HAL_DMA_Abort+0x270>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d132      	bne.n	8004880 <HAL_DMA_Abort+0x274>
 800481a:	2301      	movs	r3, #1
 800481c:	e031      	b.n	8004882 <HAL_DMA_Abort+0x276>
 800481e:	bf00      	nop
 8004820:	40020010 	.word	0x40020010
 8004824:	40020028 	.word	0x40020028
 8004828:	40020040 	.word	0x40020040
 800482c:	40020058 	.word	0x40020058
 8004830:	40020070 	.word	0x40020070
 8004834:	40020088 	.word	0x40020088
 8004838:	400200a0 	.word	0x400200a0
 800483c:	400200b8 	.word	0x400200b8
 8004840:	40020410 	.word	0x40020410
 8004844:	40020428 	.word	0x40020428
 8004848:	40020440 	.word	0x40020440
 800484c:	40020458 	.word	0x40020458
 8004850:	40020470 	.word	0x40020470
 8004854:	40020488 	.word	0x40020488
 8004858:	400204a0 	.word	0x400204a0
 800485c:	400204b8 	.word	0x400204b8
 8004860:	58025408 	.word	0x58025408
 8004864:	5802541c 	.word	0x5802541c
 8004868:	58025430 	.word	0x58025430
 800486c:	58025444 	.word	0x58025444
 8004870:	58025458 	.word	0x58025458
 8004874:	5802546c 	.word	0x5802546c
 8004878:	58025480 	.word	0x58025480
 800487c:	58025494 	.word	0x58025494
 8004880:	2300      	movs	r3, #0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d007      	beq.n	8004896 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004894:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a6d      	ldr	r2, [pc, #436]	; (8004a50 <HAL_DMA_Abort+0x444>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d04a      	beq.n	8004936 <HAL_DMA_Abort+0x32a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a6b      	ldr	r2, [pc, #428]	; (8004a54 <HAL_DMA_Abort+0x448>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d045      	beq.n	8004936 <HAL_DMA_Abort+0x32a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a6a      	ldr	r2, [pc, #424]	; (8004a58 <HAL_DMA_Abort+0x44c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d040      	beq.n	8004936 <HAL_DMA_Abort+0x32a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a68      	ldr	r2, [pc, #416]	; (8004a5c <HAL_DMA_Abort+0x450>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d03b      	beq.n	8004936 <HAL_DMA_Abort+0x32a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a67      	ldr	r2, [pc, #412]	; (8004a60 <HAL_DMA_Abort+0x454>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d036      	beq.n	8004936 <HAL_DMA_Abort+0x32a>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a65      	ldr	r2, [pc, #404]	; (8004a64 <HAL_DMA_Abort+0x458>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d031      	beq.n	8004936 <HAL_DMA_Abort+0x32a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a64      	ldr	r2, [pc, #400]	; (8004a68 <HAL_DMA_Abort+0x45c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d02c      	beq.n	8004936 <HAL_DMA_Abort+0x32a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a62      	ldr	r2, [pc, #392]	; (8004a6c <HAL_DMA_Abort+0x460>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d027      	beq.n	8004936 <HAL_DMA_Abort+0x32a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a61      	ldr	r2, [pc, #388]	; (8004a70 <HAL_DMA_Abort+0x464>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d022      	beq.n	8004936 <HAL_DMA_Abort+0x32a>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a5f      	ldr	r2, [pc, #380]	; (8004a74 <HAL_DMA_Abort+0x468>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01d      	beq.n	8004936 <HAL_DMA_Abort+0x32a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a5e      	ldr	r2, [pc, #376]	; (8004a78 <HAL_DMA_Abort+0x46c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d018      	beq.n	8004936 <HAL_DMA_Abort+0x32a>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a5c      	ldr	r2, [pc, #368]	; (8004a7c <HAL_DMA_Abort+0x470>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <HAL_DMA_Abort+0x32a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a5b      	ldr	r2, [pc, #364]	; (8004a80 <HAL_DMA_Abort+0x474>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00e      	beq.n	8004936 <HAL_DMA_Abort+0x32a>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a59      	ldr	r2, [pc, #356]	; (8004a84 <HAL_DMA_Abort+0x478>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d009      	beq.n	8004936 <HAL_DMA_Abort+0x32a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a58      	ldr	r2, [pc, #352]	; (8004a88 <HAL_DMA_Abort+0x47c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d004      	beq.n	8004936 <HAL_DMA_Abort+0x32a>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a56      	ldr	r2, [pc, #344]	; (8004a8c <HAL_DMA_Abort+0x480>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d108      	bne.n	8004948 <HAL_DMA_Abort+0x33c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0201 	bic.w	r2, r2, #1
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	e007      	b.n	8004958 <HAL_DMA_Abort+0x34c>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0201 	bic.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004958:	e013      	b.n	8004982 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800495a:	f7fe fbed 	bl	8003138 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b05      	cmp	r3, #5
 8004966:	d90c      	bls.n	8004982 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2203      	movs	r2, #3
 800497a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e12d      	b.n	8004bde <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e5      	bne.n	800495a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a2f      	ldr	r2, [pc, #188]	; (8004a50 <HAL_DMA_Abort+0x444>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d04a      	beq.n	8004a2e <HAL_DMA_Abort+0x422>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a2d      	ldr	r2, [pc, #180]	; (8004a54 <HAL_DMA_Abort+0x448>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d045      	beq.n	8004a2e <HAL_DMA_Abort+0x422>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a2c      	ldr	r2, [pc, #176]	; (8004a58 <HAL_DMA_Abort+0x44c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d040      	beq.n	8004a2e <HAL_DMA_Abort+0x422>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a2a      	ldr	r2, [pc, #168]	; (8004a5c <HAL_DMA_Abort+0x450>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d03b      	beq.n	8004a2e <HAL_DMA_Abort+0x422>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a29      	ldr	r2, [pc, #164]	; (8004a60 <HAL_DMA_Abort+0x454>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d036      	beq.n	8004a2e <HAL_DMA_Abort+0x422>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a27      	ldr	r2, [pc, #156]	; (8004a64 <HAL_DMA_Abort+0x458>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d031      	beq.n	8004a2e <HAL_DMA_Abort+0x422>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a26      	ldr	r2, [pc, #152]	; (8004a68 <HAL_DMA_Abort+0x45c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d02c      	beq.n	8004a2e <HAL_DMA_Abort+0x422>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a24      	ldr	r2, [pc, #144]	; (8004a6c <HAL_DMA_Abort+0x460>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d027      	beq.n	8004a2e <HAL_DMA_Abort+0x422>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a23      	ldr	r2, [pc, #140]	; (8004a70 <HAL_DMA_Abort+0x464>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d022      	beq.n	8004a2e <HAL_DMA_Abort+0x422>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a21      	ldr	r2, [pc, #132]	; (8004a74 <HAL_DMA_Abort+0x468>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d01d      	beq.n	8004a2e <HAL_DMA_Abort+0x422>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a20      	ldr	r2, [pc, #128]	; (8004a78 <HAL_DMA_Abort+0x46c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d018      	beq.n	8004a2e <HAL_DMA_Abort+0x422>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1e      	ldr	r2, [pc, #120]	; (8004a7c <HAL_DMA_Abort+0x470>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d013      	beq.n	8004a2e <HAL_DMA_Abort+0x422>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a1d      	ldr	r2, [pc, #116]	; (8004a80 <HAL_DMA_Abort+0x474>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00e      	beq.n	8004a2e <HAL_DMA_Abort+0x422>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a1b      	ldr	r2, [pc, #108]	; (8004a84 <HAL_DMA_Abort+0x478>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d009      	beq.n	8004a2e <HAL_DMA_Abort+0x422>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a1a      	ldr	r2, [pc, #104]	; (8004a88 <HAL_DMA_Abort+0x47c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d004      	beq.n	8004a2e <HAL_DMA_Abort+0x422>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a18      	ldr	r2, [pc, #96]	; (8004a8c <HAL_DMA_Abort+0x480>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d101      	bne.n	8004a32 <HAL_DMA_Abort+0x426>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <HAL_DMA_Abort+0x428>
 8004a32:	2300      	movs	r3, #0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d02b      	beq.n	8004a90 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a42:	f003 031f 	and.w	r3, r3, #31
 8004a46:	223f      	movs	r2, #63	; 0x3f
 8004a48:	409a      	lsls	r2, r3
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	609a      	str	r2, [r3, #8]
 8004a4e:	e02a      	b.n	8004aa6 <HAL_DMA_Abort+0x49a>
 8004a50:	40020010 	.word	0x40020010
 8004a54:	40020028 	.word	0x40020028
 8004a58:	40020040 	.word	0x40020040
 8004a5c:	40020058 	.word	0x40020058
 8004a60:	40020070 	.word	0x40020070
 8004a64:	40020088 	.word	0x40020088
 8004a68:	400200a0 	.word	0x400200a0
 8004a6c:	400200b8 	.word	0x400200b8
 8004a70:	40020410 	.word	0x40020410
 8004a74:	40020428 	.word	0x40020428
 8004a78:	40020440 	.word	0x40020440
 8004a7c:	40020458 	.word	0x40020458
 8004a80:	40020470 	.word	0x40020470
 8004a84:	40020488 	.word	0x40020488
 8004a88:	400204a0 	.word	0x400204a0
 8004a8c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9a:	f003 031f 	and.w	r3, r3, #31
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	409a      	lsls	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a4f      	ldr	r2, [pc, #316]	; (8004be8 <HAL_DMA_Abort+0x5dc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d072      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a4d      	ldr	r2, [pc, #308]	; (8004bec <HAL_DMA_Abort+0x5e0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d06d      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a4c      	ldr	r2, [pc, #304]	; (8004bf0 <HAL_DMA_Abort+0x5e4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d068      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a4a      	ldr	r2, [pc, #296]	; (8004bf4 <HAL_DMA_Abort+0x5e8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d063      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a49      	ldr	r2, [pc, #292]	; (8004bf8 <HAL_DMA_Abort+0x5ec>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d05e      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a47      	ldr	r2, [pc, #284]	; (8004bfc <HAL_DMA_Abort+0x5f0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d059      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a46      	ldr	r2, [pc, #280]	; (8004c00 <HAL_DMA_Abort+0x5f4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d054      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a44      	ldr	r2, [pc, #272]	; (8004c04 <HAL_DMA_Abort+0x5f8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d04f      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a43      	ldr	r2, [pc, #268]	; (8004c08 <HAL_DMA_Abort+0x5fc>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d04a      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a41      	ldr	r2, [pc, #260]	; (8004c0c <HAL_DMA_Abort+0x600>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d045      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a40      	ldr	r2, [pc, #256]	; (8004c10 <HAL_DMA_Abort+0x604>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d040      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a3e      	ldr	r2, [pc, #248]	; (8004c14 <HAL_DMA_Abort+0x608>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d03b      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a3d      	ldr	r2, [pc, #244]	; (8004c18 <HAL_DMA_Abort+0x60c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d036      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a3b      	ldr	r2, [pc, #236]	; (8004c1c <HAL_DMA_Abort+0x610>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d031      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a3a      	ldr	r2, [pc, #232]	; (8004c20 <HAL_DMA_Abort+0x614>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d02c      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a38      	ldr	r2, [pc, #224]	; (8004c24 <HAL_DMA_Abort+0x618>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d027      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a37      	ldr	r2, [pc, #220]	; (8004c28 <HAL_DMA_Abort+0x61c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d022      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a35      	ldr	r2, [pc, #212]	; (8004c2c <HAL_DMA_Abort+0x620>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d01d      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a34      	ldr	r2, [pc, #208]	; (8004c30 <HAL_DMA_Abort+0x624>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d018      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a32      	ldr	r2, [pc, #200]	; (8004c34 <HAL_DMA_Abort+0x628>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d013      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a31      	ldr	r2, [pc, #196]	; (8004c38 <HAL_DMA_Abort+0x62c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00e      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a2f      	ldr	r2, [pc, #188]	; (8004c3c <HAL_DMA_Abort+0x630>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d009      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2e      	ldr	r2, [pc, #184]	; (8004c40 <HAL_DMA_Abort+0x634>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d004      	beq.n	8004b96 <HAL_DMA_Abort+0x58a>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a2c      	ldr	r2, [pc, #176]	; (8004c44 <HAL_DMA_Abort+0x638>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d101      	bne.n	8004b9a <HAL_DMA_Abort+0x58e>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <HAL_DMA_Abort+0x590>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d015      	beq.n	8004bcc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ba8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00c      	beq.n	8004bcc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bc0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004bca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	40020010 	.word	0x40020010
 8004bec:	40020028 	.word	0x40020028
 8004bf0:	40020040 	.word	0x40020040
 8004bf4:	40020058 	.word	0x40020058
 8004bf8:	40020070 	.word	0x40020070
 8004bfc:	40020088 	.word	0x40020088
 8004c00:	400200a0 	.word	0x400200a0
 8004c04:	400200b8 	.word	0x400200b8
 8004c08:	40020410 	.word	0x40020410
 8004c0c:	40020428 	.word	0x40020428
 8004c10:	40020440 	.word	0x40020440
 8004c14:	40020458 	.word	0x40020458
 8004c18:	40020470 	.word	0x40020470
 8004c1c:	40020488 	.word	0x40020488
 8004c20:	400204a0 	.word	0x400204a0
 8004c24:	400204b8 	.word	0x400204b8
 8004c28:	58025408 	.word	0x58025408
 8004c2c:	5802541c 	.word	0x5802541c
 8004c30:	58025430 	.word	0x58025430
 8004c34:	58025444 	.word	0x58025444
 8004c38:	58025458 	.word	0x58025458
 8004c3c:	5802546c 	.word	0x5802546c
 8004c40:	58025480 	.word	0x58025480
 8004c44:	58025494 	.word	0x58025494

08004c48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e205      	b.n	8005066 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d004      	beq.n	8004c70 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2280      	movs	r2, #128	; 0x80
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e1fa      	b.n	8005066 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a8c      	ldr	r2, [pc, #560]	; (8004ea8 <HAL_DMA_Abort_IT+0x260>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d04a      	beq.n	8004d10 <HAL_DMA_Abort_IT+0xc8>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a8b      	ldr	r2, [pc, #556]	; (8004eac <HAL_DMA_Abort_IT+0x264>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d045      	beq.n	8004d10 <HAL_DMA_Abort_IT+0xc8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a89      	ldr	r2, [pc, #548]	; (8004eb0 <HAL_DMA_Abort_IT+0x268>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d040      	beq.n	8004d10 <HAL_DMA_Abort_IT+0xc8>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a88      	ldr	r2, [pc, #544]	; (8004eb4 <HAL_DMA_Abort_IT+0x26c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d03b      	beq.n	8004d10 <HAL_DMA_Abort_IT+0xc8>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a86      	ldr	r2, [pc, #536]	; (8004eb8 <HAL_DMA_Abort_IT+0x270>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d036      	beq.n	8004d10 <HAL_DMA_Abort_IT+0xc8>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a85      	ldr	r2, [pc, #532]	; (8004ebc <HAL_DMA_Abort_IT+0x274>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d031      	beq.n	8004d10 <HAL_DMA_Abort_IT+0xc8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a83      	ldr	r2, [pc, #524]	; (8004ec0 <HAL_DMA_Abort_IT+0x278>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d02c      	beq.n	8004d10 <HAL_DMA_Abort_IT+0xc8>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a82      	ldr	r2, [pc, #520]	; (8004ec4 <HAL_DMA_Abort_IT+0x27c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d027      	beq.n	8004d10 <HAL_DMA_Abort_IT+0xc8>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a80      	ldr	r2, [pc, #512]	; (8004ec8 <HAL_DMA_Abort_IT+0x280>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d022      	beq.n	8004d10 <HAL_DMA_Abort_IT+0xc8>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a7f      	ldr	r2, [pc, #508]	; (8004ecc <HAL_DMA_Abort_IT+0x284>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d01d      	beq.n	8004d10 <HAL_DMA_Abort_IT+0xc8>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a7d      	ldr	r2, [pc, #500]	; (8004ed0 <HAL_DMA_Abort_IT+0x288>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d018      	beq.n	8004d10 <HAL_DMA_Abort_IT+0xc8>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a7c      	ldr	r2, [pc, #496]	; (8004ed4 <HAL_DMA_Abort_IT+0x28c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d013      	beq.n	8004d10 <HAL_DMA_Abort_IT+0xc8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a7a      	ldr	r2, [pc, #488]	; (8004ed8 <HAL_DMA_Abort_IT+0x290>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00e      	beq.n	8004d10 <HAL_DMA_Abort_IT+0xc8>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a79      	ldr	r2, [pc, #484]	; (8004edc <HAL_DMA_Abort_IT+0x294>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d009      	beq.n	8004d10 <HAL_DMA_Abort_IT+0xc8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a77      	ldr	r2, [pc, #476]	; (8004ee0 <HAL_DMA_Abort_IT+0x298>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d004      	beq.n	8004d10 <HAL_DMA_Abort_IT+0xc8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a76      	ldr	r2, [pc, #472]	; (8004ee4 <HAL_DMA_Abort_IT+0x29c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d101      	bne.n	8004d14 <HAL_DMA_Abort_IT+0xcc>
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <HAL_DMA_Abort_IT+0xce>
 8004d14:	2300      	movs	r3, #0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d065      	beq.n	8004de6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a60      	ldr	r2, [pc, #384]	; (8004ea8 <HAL_DMA_Abort_IT+0x260>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d04a      	beq.n	8004dc2 <HAL_DMA_Abort_IT+0x17a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a5e      	ldr	r2, [pc, #376]	; (8004eac <HAL_DMA_Abort_IT+0x264>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d045      	beq.n	8004dc2 <HAL_DMA_Abort_IT+0x17a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a5d      	ldr	r2, [pc, #372]	; (8004eb0 <HAL_DMA_Abort_IT+0x268>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d040      	beq.n	8004dc2 <HAL_DMA_Abort_IT+0x17a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a5b      	ldr	r2, [pc, #364]	; (8004eb4 <HAL_DMA_Abort_IT+0x26c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d03b      	beq.n	8004dc2 <HAL_DMA_Abort_IT+0x17a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a5a      	ldr	r2, [pc, #360]	; (8004eb8 <HAL_DMA_Abort_IT+0x270>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d036      	beq.n	8004dc2 <HAL_DMA_Abort_IT+0x17a>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a58      	ldr	r2, [pc, #352]	; (8004ebc <HAL_DMA_Abort_IT+0x274>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d031      	beq.n	8004dc2 <HAL_DMA_Abort_IT+0x17a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a57      	ldr	r2, [pc, #348]	; (8004ec0 <HAL_DMA_Abort_IT+0x278>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d02c      	beq.n	8004dc2 <HAL_DMA_Abort_IT+0x17a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a55      	ldr	r2, [pc, #340]	; (8004ec4 <HAL_DMA_Abort_IT+0x27c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d027      	beq.n	8004dc2 <HAL_DMA_Abort_IT+0x17a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a54      	ldr	r2, [pc, #336]	; (8004ec8 <HAL_DMA_Abort_IT+0x280>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d022      	beq.n	8004dc2 <HAL_DMA_Abort_IT+0x17a>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a52      	ldr	r2, [pc, #328]	; (8004ecc <HAL_DMA_Abort_IT+0x284>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d01d      	beq.n	8004dc2 <HAL_DMA_Abort_IT+0x17a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a51      	ldr	r2, [pc, #324]	; (8004ed0 <HAL_DMA_Abort_IT+0x288>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d018      	beq.n	8004dc2 <HAL_DMA_Abort_IT+0x17a>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a4f      	ldr	r2, [pc, #316]	; (8004ed4 <HAL_DMA_Abort_IT+0x28c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d013      	beq.n	8004dc2 <HAL_DMA_Abort_IT+0x17a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a4e      	ldr	r2, [pc, #312]	; (8004ed8 <HAL_DMA_Abort_IT+0x290>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00e      	beq.n	8004dc2 <HAL_DMA_Abort_IT+0x17a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a4c      	ldr	r2, [pc, #304]	; (8004edc <HAL_DMA_Abort_IT+0x294>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d009      	beq.n	8004dc2 <HAL_DMA_Abort_IT+0x17a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a4b      	ldr	r2, [pc, #300]	; (8004ee0 <HAL_DMA_Abort_IT+0x298>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d004      	beq.n	8004dc2 <HAL_DMA_Abort_IT+0x17a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a49      	ldr	r2, [pc, #292]	; (8004ee4 <HAL_DMA_Abort_IT+0x29c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d108      	bne.n	8004dd4 <HAL_DMA_Abort_IT+0x18c>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0201 	bic.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	e147      	b.n	8005064 <HAL_DMA_Abort_IT+0x41c>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0201 	bic.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	e13e      	b.n	8005064 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 020e 	bic.w	r2, r2, #14
 8004df4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a2b      	ldr	r2, [pc, #172]	; (8004ea8 <HAL_DMA_Abort_IT+0x260>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d04a      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x24e>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a29      	ldr	r2, [pc, #164]	; (8004eac <HAL_DMA_Abort_IT+0x264>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d045      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x24e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a28      	ldr	r2, [pc, #160]	; (8004eb0 <HAL_DMA_Abort_IT+0x268>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d040      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x24e>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a26      	ldr	r2, [pc, #152]	; (8004eb4 <HAL_DMA_Abort_IT+0x26c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d03b      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x24e>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a25      	ldr	r2, [pc, #148]	; (8004eb8 <HAL_DMA_Abort_IT+0x270>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d036      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x24e>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a23      	ldr	r2, [pc, #140]	; (8004ebc <HAL_DMA_Abort_IT+0x274>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d031      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x24e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a22      	ldr	r2, [pc, #136]	; (8004ec0 <HAL_DMA_Abort_IT+0x278>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d02c      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x24e>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a20      	ldr	r2, [pc, #128]	; (8004ec4 <HAL_DMA_Abort_IT+0x27c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d027      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x24e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1f      	ldr	r2, [pc, #124]	; (8004ec8 <HAL_DMA_Abort_IT+0x280>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d022      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x24e>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1d      	ldr	r2, [pc, #116]	; (8004ecc <HAL_DMA_Abort_IT+0x284>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d01d      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x24e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1c      	ldr	r2, [pc, #112]	; (8004ed0 <HAL_DMA_Abort_IT+0x288>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d018      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x24e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1a      	ldr	r2, [pc, #104]	; (8004ed4 <HAL_DMA_Abort_IT+0x28c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x24e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a19      	ldr	r2, [pc, #100]	; (8004ed8 <HAL_DMA_Abort_IT+0x290>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00e      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x24e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a17      	ldr	r2, [pc, #92]	; (8004edc <HAL_DMA_Abort_IT+0x294>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d009      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x24e>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a16      	ldr	r2, [pc, #88]	; (8004ee0 <HAL_DMA_Abort_IT+0x298>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d004      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x24e>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a14      	ldr	r2, [pc, #80]	; (8004ee4 <HAL_DMA_Abort_IT+0x29c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d128      	bne.n	8004ee8 <HAL_DMA_Abort_IT+0x2a0>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	e027      	b.n	8004ef8 <HAL_DMA_Abort_IT+0x2b0>
 8004ea8:	40020010 	.word	0x40020010
 8004eac:	40020028 	.word	0x40020028
 8004eb0:	40020040 	.word	0x40020040
 8004eb4:	40020058 	.word	0x40020058
 8004eb8:	40020070 	.word	0x40020070
 8004ebc:	40020088 	.word	0x40020088
 8004ec0:	400200a0 	.word	0x400200a0
 8004ec4:	400200b8 	.word	0x400200b8
 8004ec8:	40020410 	.word	0x40020410
 8004ecc:	40020428 	.word	0x40020428
 8004ed0:	40020440 	.word	0x40020440
 8004ed4:	40020458 	.word	0x40020458
 8004ed8:	40020470 	.word	0x40020470
 8004edc:	40020488 	.word	0x40020488
 8004ee0:	400204a0 	.word	0x400204a0
 8004ee4:	400204b8 	.word	0x400204b8
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0201 	bic.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a5c      	ldr	r2, [pc, #368]	; (8005070 <HAL_DMA_Abort_IT+0x428>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d072      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a5b      	ldr	r2, [pc, #364]	; (8005074 <HAL_DMA_Abort_IT+0x42c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d06d      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a59      	ldr	r2, [pc, #356]	; (8005078 <HAL_DMA_Abort_IT+0x430>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d068      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a58      	ldr	r2, [pc, #352]	; (800507c <HAL_DMA_Abort_IT+0x434>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d063      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a56      	ldr	r2, [pc, #344]	; (8005080 <HAL_DMA_Abort_IT+0x438>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d05e      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a55      	ldr	r2, [pc, #340]	; (8005084 <HAL_DMA_Abort_IT+0x43c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d059      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a53      	ldr	r2, [pc, #332]	; (8005088 <HAL_DMA_Abort_IT+0x440>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d054      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a52      	ldr	r2, [pc, #328]	; (800508c <HAL_DMA_Abort_IT+0x444>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d04f      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a50      	ldr	r2, [pc, #320]	; (8005090 <HAL_DMA_Abort_IT+0x448>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d04a      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a4f      	ldr	r2, [pc, #316]	; (8005094 <HAL_DMA_Abort_IT+0x44c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d045      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a4d      	ldr	r2, [pc, #308]	; (8005098 <HAL_DMA_Abort_IT+0x450>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d040      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a4c      	ldr	r2, [pc, #304]	; (800509c <HAL_DMA_Abort_IT+0x454>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d03b      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a4a      	ldr	r2, [pc, #296]	; (80050a0 <HAL_DMA_Abort_IT+0x458>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d036      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a49      	ldr	r2, [pc, #292]	; (80050a4 <HAL_DMA_Abort_IT+0x45c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d031      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a47      	ldr	r2, [pc, #284]	; (80050a8 <HAL_DMA_Abort_IT+0x460>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d02c      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a46      	ldr	r2, [pc, #280]	; (80050ac <HAL_DMA_Abort_IT+0x464>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d027      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a44      	ldr	r2, [pc, #272]	; (80050b0 <HAL_DMA_Abort_IT+0x468>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d022      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a43      	ldr	r2, [pc, #268]	; (80050b4 <HAL_DMA_Abort_IT+0x46c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d01d      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a41      	ldr	r2, [pc, #260]	; (80050b8 <HAL_DMA_Abort_IT+0x470>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d018      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a40      	ldr	r2, [pc, #256]	; (80050bc <HAL_DMA_Abort_IT+0x474>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d013      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a3e      	ldr	r2, [pc, #248]	; (80050c0 <HAL_DMA_Abort_IT+0x478>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00e      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a3d      	ldr	r2, [pc, #244]	; (80050c4 <HAL_DMA_Abort_IT+0x47c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d009      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a3b      	ldr	r2, [pc, #236]	; (80050c8 <HAL_DMA_Abort_IT+0x480>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d004      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x3a0>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a3a      	ldr	r2, [pc, #232]	; (80050cc <HAL_DMA_Abort_IT+0x484>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d101      	bne.n	8004fec <HAL_DMA_Abort_IT+0x3a4>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <HAL_DMA_Abort_IT+0x3a6>
 8004fec:	2300      	movs	r3, #0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d028      	beq.n	8005044 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005000:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005006:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	2201      	movs	r2, #1
 8005012:	409a      	lsls	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005020:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00c      	beq.n	8005044 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005038:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005042:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40020010 	.word	0x40020010
 8005074:	40020028 	.word	0x40020028
 8005078:	40020040 	.word	0x40020040
 800507c:	40020058 	.word	0x40020058
 8005080:	40020070 	.word	0x40020070
 8005084:	40020088 	.word	0x40020088
 8005088:	400200a0 	.word	0x400200a0
 800508c:	400200b8 	.word	0x400200b8
 8005090:	40020410 	.word	0x40020410
 8005094:	40020428 	.word	0x40020428
 8005098:	40020440 	.word	0x40020440
 800509c:	40020458 	.word	0x40020458
 80050a0:	40020470 	.word	0x40020470
 80050a4:	40020488 	.word	0x40020488
 80050a8:	400204a0 	.word	0x400204a0
 80050ac:	400204b8 	.word	0x400204b8
 80050b0:	58025408 	.word	0x58025408
 80050b4:	5802541c 	.word	0x5802541c
 80050b8:	58025430 	.word	0x58025430
 80050bc:	58025444 	.word	0x58025444
 80050c0:	58025458 	.word	0x58025458
 80050c4:	5802546c 	.word	0x5802546c
 80050c8:	58025480 	.word	0x58025480
 80050cc:	58025494 	.word	0x58025494

080050d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08a      	sub	sp, #40	; 0x28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050dc:	4b67      	ldr	r3, [pc, #412]	; (800527c <HAL_DMA_IRQHandler+0x1ac>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a67      	ldr	r2, [pc, #412]	; (8005280 <HAL_DMA_IRQHandler+0x1b0>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	0a9b      	lsrs	r3, r3, #10
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a5f      	ldr	r2, [pc, #380]	; (8005284 <HAL_DMA_IRQHandler+0x1b4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d04a      	beq.n	80051a2 <HAL_DMA_IRQHandler+0xd2>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a5d      	ldr	r2, [pc, #372]	; (8005288 <HAL_DMA_IRQHandler+0x1b8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d045      	beq.n	80051a2 <HAL_DMA_IRQHandler+0xd2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a5c      	ldr	r2, [pc, #368]	; (800528c <HAL_DMA_IRQHandler+0x1bc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d040      	beq.n	80051a2 <HAL_DMA_IRQHandler+0xd2>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a5a      	ldr	r2, [pc, #360]	; (8005290 <HAL_DMA_IRQHandler+0x1c0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d03b      	beq.n	80051a2 <HAL_DMA_IRQHandler+0xd2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a59      	ldr	r2, [pc, #356]	; (8005294 <HAL_DMA_IRQHandler+0x1c4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d036      	beq.n	80051a2 <HAL_DMA_IRQHandler+0xd2>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a57      	ldr	r2, [pc, #348]	; (8005298 <HAL_DMA_IRQHandler+0x1c8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d031      	beq.n	80051a2 <HAL_DMA_IRQHandler+0xd2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a56      	ldr	r2, [pc, #344]	; (800529c <HAL_DMA_IRQHandler+0x1cc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d02c      	beq.n	80051a2 <HAL_DMA_IRQHandler+0xd2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a54      	ldr	r2, [pc, #336]	; (80052a0 <HAL_DMA_IRQHandler+0x1d0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d027      	beq.n	80051a2 <HAL_DMA_IRQHandler+0xd2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a53      	ldr	r2, [pc, #332]	; (80052a4 <HAL_DMA_IRQHandler+0x1d4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d022      	beq.n	80051a2 <HAL_DMA_IRQHandler+0xd2>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a51      	ldr	r2, [pc, #324]	; (80052a8 <HAL_DMA_IRQHandler+0x1d8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d01d      	beq.n	80051a2 <HAL_DMA_IRQHandler+0xd2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a50      	ldr	r2, [pc, #320]	; (80052ac <HAL_DMA_IRQHandler+0x1dc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d018      	beq.n	80051a2 <HAL_DMA_IRQHandler+0xd2>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a4e      	ldr	r2, [pc, #312]	; (80052b0 <HAL_DMA_IRQHandler+0x1e0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d013      	beq.n	80051a2 <HAL_DMA_IRQHandler+0xd2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a4d      	ldr	r2, [pc, #308]	; (80052b4 <HAL_DMA_IRQHandler+0x1e4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00e      	beq.n	80051a2 <HAL_DMA_IRQHandler+0xd2>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a4b      	ldr	r2, [pc, #300]	; (80052b8 <HAL_DMA_IRQHandler+0x1e8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d009      	beq.n	80051a2 <HAL_DMA_IRQHandler+0xd2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a4a      	ldr	r2, [pc, #296]	; (80052bc <HAL_DMA_IRQHandler+0x1ec>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_DMA_IRQHandler+0xd2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a48      	ldr	r2, [pc, #288]	; (80052c0 <HAL_DMA_IRQHandler+0x1f0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d101      	bne.n	80051a6 <HAL_DMA_IRQHandler+0xd6>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <HAL_DMA_IRQHandler+0xd8>
 80051a6:	2300      	movs	r3, #0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 842b 	beq.w	8005a04 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b2:	f003 031f 	and.w	r3, r3, #31
 80051b6:	2208      	movs	r2, #8
 80051b8:	409a      	lsls	r2, r3
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	4013      	ands	r3, r2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 80a2 	beq.w	8005308 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a2e      	ldr	r2, [pc, #184]	; (8005284 <HAL_DMA_IRQHandler+0x1b4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d04a      	beq.n	8005264 <HAL_DMA_IRQHandler+0x194>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a2d      	ldr	r2, [pc, #180]	; (8005288 <HAL_DMA_IRQHandler+0x1b8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d045      	beq.n	8005264 <HAL_DMA_IRQHandler+0x194>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a2b      	ldr	r2, [pc, #172]	; (800528c <HAL_DMA_IRQHandler+0x1bc>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d040      	beq.n	8005264 <HAL_DMA_IRQHandler+0x194>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a2a      	ldr	r2, [pc, #168]	; (8005290 <HAL_DMA_IRQHandler+0x1c0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d03b      	beq.n	8005264 <HAL_DMA_IRQHandler+0x194>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a28      	ldr	r2, [pc, #160]	; (8005294 <HAL_DMA_IRQHandler+0x1c4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d036      	beq.n	8005264 <HAL_DMA_IRQHandler+0x194>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a27      	ldr	r2, [pc, #156]	; (8005298 <HAL_DMA_IRQHandler+0x1c8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d031      	beq.n	8005264 <HAL_DMA_IRQHandler+0x194>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a25      	ldr	r2, [pc, #148]	; (800529c <HAL_DMA_IRQHandler+0x1cc>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d02c      	beq.n	8005264 <HAL_DMA_IRQHandler+0x194>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a24      	ldr	r2, [pc, #144]	; (80052a0 <HAL_DMA_IRQHandler+0x1d0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d027      	beq.n	8005264 <HAL_DMA_IRQHandler+0x194>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a22      	ldr	r2, [pc, #136]	; (80052a4 <HAL_DMA_IRQHandler+0x1d4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d022      	beq.n	8005264 <HAL_DMA_IRQHandler+0x194>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a21      	ldr	r2, [pc, #132]	; (80052a8 <HAL_DMA_IRQHandler+0x1d8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d01d      	beq.n	8005264 <HAL_DMA_IRQHandler+0x194>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1f      	ldr	r2, [pc, #124]	; (80052ac <HAL_DMA_IRQHandler+0x1dc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d018      	beq.n	8005264 <HAL_DMA_IRQHandler+0x194>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1e      	ldr	r2, [pc, #120]	; (80052b0 <HAL_DMA_IRQHandler+0x1e0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d013      	beq.n	8005264 <HAL_DMA_IRQHandler+0x194>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <HAL_DMA_IRQHandler+0x1e4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00e      	beq.n	8005264 <HAL_DMA_IRQHandler+0x194>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a1b      	ldr	r2, [pc, #108]	; (80052b8 <HAL_DMA_IRQHandler+0x1e8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d009      	beq.n	8005264 <HAL_DMA_IRQHandler+0x194>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a19      	ldr	r2, [pc, #100]	; (80052bc <HAL_DMA_IRQHandler+0x1ec>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d004      	beq.n	8005264 <HAL_DMA_IRQHandler+0x194>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a18      	ldr	r2, [pc, #96]	; (80052c0 <HAL_DMA_IRQHandler+0x1f0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d12f      	bne.n	80052c4 <HAL_DMA_IRQHandler+0x1f4>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	bf14      	ite	ne
 8005272:	2301      	movne	r3, #1
 8005274:	2300      	moveq	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	e02e      	b.n	80052d8 <HAL_DMA_IRQHandler+0x208>
 800527a:	bf00      	nop
 800527c:	24000038 	.word	0x24000038
 8005280:	1b4e81b5 	.word	0x1b4e81b5
 8005284:	40020010 	.word	0x40020010
 8005288:	40020028 	.word	0x40020028
 800528c:	40020040 	.word	0x40020040
 8005290:	40020058 	.word	0x40020058
 8005294:	40020070 	.word	0x40020070
 8005298:	40020088 	.word	0x40020088
 800529c:	400200a0 	.word	0x400200a0
 80052a0:	400200b8 	.word	0x400200b8
 80052a4:	40020410 	.word	0x40020410
 80052a8:	40020428 	.word	0x40020428
 80052ac:	40020440 	.word	0x40020440
 80052b0:	40020458 	.word	0x40020458
 80052b4:	40020470 	.word	0x40020470
 80052b8:	40020488 	.word	0x40020488
 80052bc:	400204a0 	.word	0x400204a0
 80052c0:	400204b8 	.word	0x400204b8
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	bf14      	ite	ne
 80052d2:	2301      	movne	r3, #1
 80052d4:	2300      	moveq	r3, #0
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d015      	beq.n	8005308 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0204 	bic.w	r2, r2, #4
 80052ea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f0:	f003 031f 	and.w	r3, r3, #31
 80052f4:	2208      	movs	r2, #8
 80052f6:	409a      	lsls	r2, r3
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005300:	f043 0201 	orr.w	r2, r3, #1
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530c:	f003 031f 	and.w	r3, r3, #31
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	fa22 f303 	lsr.w	r3, r2, r3
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d06e      	beq.n	80053fc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a69      	ldr	r2, [pc, #420]	; (80054c8 <HAL_DMA_IRQHandler+0x3f8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d04a      	beq.n	80053be <HAL_DMA_IRQHandler+0x2ee>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a67      	ldr	r2, [pc, #412]	; (80054cc <HAL_DMA_IRQHandler+0x3fc>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d045      	beq.n	80053be <HAL_DMA_IRQHandler+0x2ee>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a66      	ldr	r2, [pc, #408]	; (80054d0 <HAL_DMA_IRQHandler+0x400>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d040      	beq.n	80053be <HAL_DMA_IRQHandler+0x2ee>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a64      	ldr	r2, [pc, #400]	; (80054d4 <HAL_DMA_IRQHandler+0x404>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d03b      	beq.n	80053be <HAL_DMA_IRQHandler+0x2ee>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a63      	ldr	r2, [pc, #396]	; (80054d8 <HAL_DMA_IRQHandler+0x408>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d036      	beq.n	80053be <HAL_DMA_IRQHandler+0x2ee>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a61      	ldr	r2, [pc, #388]	; (80054dc <HAL_DMA_IRQHandler+0x40c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d031      	beq.n	80053be <HAL_DMA_IRQHandler+0x2ee>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a60      	ldr	r2, [pc, #384]	; (80054e0 <HAL_DMA_IRQHandler+0x410>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d02c      	beq.n	80053be <HAL_DMA_IRQHandler+0x2ee>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a5e      	ldr	r2, [pc, #376]	; (80054e4 <HAL_DMA_IRQHandler+0x414>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d027      	beq.n	80053be <HAL_DMA_IRQHandler+0x2ee>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a5d      	ldr	r2, [pc, #372]	; (80054e8 <HAL_DMA_IRQHandler+0x418>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d022      	beq.n	80053be <HAL_DMA_IRQHandler+0x2ee>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a5b      	ldr	r2, [pc, #364]	; (80054ec <HAL_DMA_IRQHandler+0x41c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01d      	beq.n	80053be <HAL_DMA_IRQHandler+0x2ee>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a5a      	ldr	r2, [pc, #360]	; (80054f0 <HAL_DMA_IRQHandler+0x420>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d018      	beq.n	80053be <HAL_DMA_IRQHandler+0x2ee>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a58      	ldr	r2, [pc, #352]	; (80054f4 <HAL_DMA_IRQHandler+0x424>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <HAL_DMA_IRQHandler+0x2ee>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a57      	ldr	r2, [pc, #348]	; (80054f8 <HAL_DMA_IRQHandler+0x428>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00e      	beq.n	80053be <HAL_DMA_IRQHandler+0x2ee>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a55      	ldr	r2, [pc, #340]	; (80054fc <HAL_DMA_IRQHandler+0x42c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d009      	beq.n	80053be <HAL_DMA_IRQHandler+0x2ee>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a54      	ldr	r2, [pc, #336]	; (8005500 <HAL_DMA_IRQHandler+0x430>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d004      	beq.n	80053be <HAL_DMA_IRQHandler+0x2ee>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a52      	ldr	r2, [pc, #328]	; (8005504 <HAL_DMA_IRQHandler+0x434>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d10a      	bne.n	80053d4 <HAL_DMA_IRQHandler+0x304>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	bf14      	ite	ne
 80053cc:	2301      	movne	r3, #1
 80053ce:	2300      	moveq	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	e003      	b.n	80053dc <HAL_DMA_IRQHandler+0x30c>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2300      	movs	r3, #0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00d      	beq.n	80053fc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e4:	f003 031f 	and.w	r3, r3, #31
 80053e8:	2201      	movs	r2, #1
 80053ea:	409a      	lsls	r2, r3
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f4:	f043 0202 	orr.w	r2, r3, #2
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005400:	f003 031f 	and.w	r3, r3, #31
 8005404:	2204      	movs	r2, #4
 8005406:	409a      	lsls	r2, r3
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 808f 	beq.w	8005530 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a2c      	ldr	r2, [pc, #176]	; (80054c8 <HAL_DMA_IRQHandler+0x3f8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d04a      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x3e2>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a2a      	ldr	r2, [pc, #168]	; (80054cc <HAL_DMA_IRQHandler+0x3fc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d045      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x3e2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a29      	ldr	r2, [pc, #164]	; (80054d0 <HAL_DMA_IRQHandler+0x400>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d040      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x3e2>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a27      	ldr	r2, [pc, #156]	; (80054d4 <HAL_DMA_IRQHandler+0x404>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d03b      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x3e2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a26      	ldr	r2, [pc, #152]	; (80054d8 <HAL_DMA_IRQHandler+0x408>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d036      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x3e2>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a24      	ldr	r2, [pc, #144]	; (80054dc <HAL_DMA_IRQHandler+0x40c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d031      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x3e2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a23      	ldr	r2, [pc, #140]	; (80054e0 <HAL_DMA_IRQHandler+0x410>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d02c      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x3e2>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a21      	ldr	r2, [pc, #132]	; (80054e4 <HAL_DMA_IRQHandler+0x414>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d027      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x3e2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a20      	ldr	r2, [pc, #128]	; (80054e8 <HAL_DMA_IRQHandler+0x418>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d022      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x3e2>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a1e      	ldr	r2, [pc, #120]	; (80054ec <HAL_DMA_IRQHandler+0x41c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d01d      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x3e2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1d      	ldr	r2, [pc, #116]	; (80054f0 <HAL_DMA_IRQHandler+0x420>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d018      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x3e2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a1b      	ldr	r2, [pc, #108]	; (80054f4 <HAL_DMA_IRQHandler+0x424>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d013      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x3e2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1a      	ldr	r2, [pc, #104]	; (80054f8 <HAL_DMA_IRQHandler+0x428>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00e      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x3e2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a18      	ldr	r2, [pc, #96]	; (80054fc <HAL_DMA_IRQHandler+0x42c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d009      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x3e2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a17      	ldr	r2, [pc, #92]	; (8005500 <HAL_DMA_IRQHandler+0x430>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d004      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x3e2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a15      	ldr	r2, [pc, #84]	; (8005504 <HAL_DMA_IRQHandler+0x434>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d12a      	bne.n	8005508 <HAL_DMA_IRQHandler+0x438>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	bf14      	ite	ne
 80054c0:	2301      	movne	r3, #1
 80054c2:	2300      	moveq	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	e023      	b.n	8005510 <HAL_DMA_IRQHandler+0x440>
 80054c8:	40020010 	.word	0x40020010
 80054cc:	40020028 	.word	0x40020028
 80054d0:	40020040 	.word	0x40020040
 80054d4:	40020058 	.word	0x40020058
 80054d8:	40020070 	.word	0x40020070
 80054dc:	40020088 	.word	0x40020088
 80054e0:	400200a0 	.word	0x400200a0
 80054e4:	400200b8 	.word	0x400200b8
 80054e8:	40020410 	.word	0x40020410
 80054ec:	40020428 	.word	0x40020428
 80054f0:	40020440 	.word	0x40020440
 80054f4:	40020458 	.word	0x40020458
 80054f8:	40020470 	.word	0x40020470
 80054fc:	40020488 	.word	0x40020488
 8005500:	400204a0 	.word	0x400204a0
 8005504:	400204b8 	.word	0x400204b8
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2300      	movs	r3, #0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00d      	beq.n	8005530 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005518:	f003 031f 	and.w	r3, r3, #31
 800551c:	2204      	movs	r2, #4
 800551e:	409a      	lsls	r2, r3
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005528:	f043 0204 	orr.w	r2, r3, #4
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005534:	f003 031f 	and.w	r3, r3, #31
 8005538:	2210      	movs	r2, #16
 800553a:	409a      	lsls	r2, r3
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	4013      	ands	r3, r2
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 80a6 	beq.w	8005692 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a85      	ldr	r2, [pc, #532]	; (8005760 <HAL_DMA_IRQHandler+0x690>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d04a      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x516>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a83      	ldr	r2, [pc, #524]	; (8005764 <HAL_DMA_IRQHandler+0x694>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d045      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x516>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a82      	ldr	r2, [pc, #520]	; (8005768 <HAL_DMA_IRQHandler+0x698>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d040      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x516>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a80      	ldr	r2, [pc, #512]	; (800576c <HAL_DMA_IRQHandler+0x69c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d03b      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x516>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a7f      	ldr	r2, [pc, #508]	; (8005770 <HAL_DMA_IRQHandler+0x6a0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d036      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x516>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a7d      	ldr	r2, [pc, #500]	; (8005774 <HAL_DMA_IRQHandler+0x6a4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d031      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x516>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a7c      	ldr	r2, [pc, #496]	; (8005778 <HAL_DMA_IRQHandler+0x6a8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d02c      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x516>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a7a      	ldr	r2, [pc, #488]	; (800577c <HAL_DMA_IRQHandler+0x6ac>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d027      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x516>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a79      	ldr	r2, [pc, #484]	; (8005780 <HAL_DMA_IRQHandler+0x6b0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d022      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x516>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a77      	ldr	r2, [pc, #476]	; (8005784 <HAL_DMA_IRQHandler+0x6b4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d01d      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x516>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a76      	ldr	r2, [pc, #472]	; (8005788 <HAL_DMA_IRQHandler+0x6b8>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d018      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x516>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a74      	ldr	r2, [pc, #464]	; (800578c <HAL_DMA_IRQHandler+0x6bc>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x516>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a73      	ldr	r2, [pc, #460]	; (8005790 <HAL_DMA_IRQHandler+0x6c0>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00e      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x516>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a71      	ldr	r2, [pc, #452]	; (8005794 <HAL_DMA_IRQHandler+0x6c4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d009      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x516>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a70      	ldr	r2, [pc, #448]	; (8005798 <HAL_DMA_IRQHandler+0x6c8>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d004      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x516>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a6e      	ldr	r2, [pc, #440]	; (800579c <HAL_DMA_IRQHandler+0x6cc>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d10a      	bne.n	80055fc <HAL_DMA_IRQHandler+0x52c>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	bf14      	ite	ne
 80055f4:	2301      	movne	r3, #1
 80055f6:	2300      	moveq	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	e009      	b.n	8005610 <HAL_DMA_IRQHandler+0x540>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0304 	and.w	r3, r3, #4
 8005606:	2b00      	cmp	r3, #0
 8005608:	bf14      	ite	ne
 800560a:	2301      	movne	r3, #1
 800560c:	2300      	moveq	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d03e      	beq.n	8005692 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005618:	f003 031f 	and.w	r3, r3, #31
 800561c:	2210      	movs	r2, #16
 800561e:	409a      	lsls	r2, r3
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d018      	beq.n	8005664 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d108      	bne.n	8005652 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	2b00      	cmp	r3, #0
 8005646:	d024      	beq.n	8005692 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	4798      	blx	r3
 8005650:	e01f      	b.n	8005692 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005656:	2b00      	cmp	r3, #0
 8005658:	d01b      	beq.n	8005692 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	4798      	blx	r3
 8005662:	e016      	b.n	8005692 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566e:	2b00      	cmp	r3, #0
 8005670:	d107      	bne.n	8005682 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0208 	bic.w	r2, r2, #8
 8005680:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	2220      	movs	r2, #32
 800569c:	409a      	lsls	r2, r3
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	4013      	ands	r3, r2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 8110 	beq.w	80058c8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a2c      	ldr	r2, [pc, #176]	; (8005760 <HAL_DMA_IRQHandler+0x690>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d04a      	beq.n	8005748 <HAL_DMA_IRQHandler+0x678>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a2b      	ldr	r2, [pc, #172]	; (8005764 <HAL_DMA_IRQHandler+0x694>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d045      	beq.n	8005748 <HAL_DMA_IRQHandler+0x678>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a29      	ldr	r2, [pc, #164]	; (8005768 <HAL_DMA_IRQHandler+0x698>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d040      	beq.n	8005748 <HAL_DMA_IRQHandler+0x678>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a28      	ldr	r2, [pc, #160]	; (800576c <HAL_DMA_IRQHandler+0x69c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d03b      	beq.n	8005748 <HAL_DMA_IRQHandler+0x678>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a26      	ldr	r2, [pc, #152]	; (8005770 <HAL_DMA_IRQHandler+0x6a0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d036      	beq.n	8005748 <HAL_DMA_IRQHandler+0x678>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a25      	ldr	r2, [pc, #148]	; (8005774 <HAL_DMA_IRQHandler+0x6a4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d031      	beq.n	8005748 <HAL_DMA_IRQHandler+0x678>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a23      	ldr	r2, [pc, #140]	; (8005778 <HAL_DMA_IRQHandler+0x6a8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d02c      	beq.n	8005748 <HAL_DMA_IRQHandler+0x678>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a22      	ldr	r2, [pc, #136]	; (800577c <HAL_DMA_IRQHandler+0x6ac>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d027      	beq.n	8005748 <HAL_DMA_IRQHandler+0x678>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a20      	ldr	r2, [pc, #128]	; (8005780 <HAL_DMA_IRQHandler+0x6b0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d022      	beq.n	8005748 <HAL_DMA_IRQHandler+0x678>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1f      	ldr	r2, [pc, #124]	; (8005784 <HAL_DMA_IRQHandler+0x6b4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d01d      	beq.n	8005748 <HAL_DMA_IRQHandler+0x678>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1d      	ldr	r2, [pc, #116]	; (8005788 <HAL_DMA_IRQHandler+0x6b8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d018      	beq.n	8005748 <HAL_DMA_IRQHandler+0x678>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1c      	ldr	r2, [pc, #112]	; (800578c <HAL_DMA_IRQHandler+0x6bc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d013      	beq.n	8005748 <HAL_DMA_IRQHandler+0x678>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1a      	ldr	r2, [pc, #104]	; (8005790 <HAL_DMA_IRQHandler+0x6c0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00e      	beq.n	8005748 <HAL_DMA_IRQHandler+0x678>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a19      	ldr	r2, [pc, #100]	; (8005794 <HAL_DMA_IRQHandler+0x6c4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d009      	beq.n	8005748 <HAL_DMA_IRQHandler+0x678>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a17      	ldr	r2, [pc, #92]	; (8005798 <HAL_DMA_IRQHandler+0x6c8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d004      	beq.n	8005748 <HAL_DMA_IRQHandler+0x678>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a16      	ldr	r2, [pc, #88]	; (800579c <HAL_DMA_IRQHandler+0x6cc>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d12b      	bne.n	80057a0 <HAL_DMA_IRQHandler+0x6d0>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0310 	and.w	r3, r3, #16
 8005752:	2b00      	cmp	r3, #0
 8005754:	bf14      	ite	ne
 8005756:	2301      	movne	r3, #1
 8005758:	2300      	moveq	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	e02a      	b.n	80057b4 <HAL_DMA_IRQHandler+0x6e4>
 800575e:	bf00      	nop
 8005760:	40020010 	.word	0x40020010
 8005764:	40020028 	.word	0x40020028
 8005768:	40020040 	.word	0x40020040
 800576c:	40020058 	.word	0x40020058
 8005770:	40020070 	.word	0x40020070
 8005774:	40020088 	.word	0x40020088
 8005778:	400200a0 	.word	0x400200a0
 800577c:	400200b8 	.word	0x400200b8
 8005780:	40020410 	.word	0x40020410
 8005784:	40020428 	.word	0x40020428
 8005788:	40020440 	.word	0x40020440
 800578c:	40020458 	.word	0x40020458
 8005790:	40020470 	.word	0x40020470
 8005794:	40020488 	.word	0x40020488
 8005798:	400204a0 	.word	0x400204a0
 800579c:	400204b8 	.word	0x400204b8
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	bf14      	ite	ne
 80057ae:	2301      	movne	r3, #1
 80057b0:	2300      	moveq	r3, #0
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 8087 	beq.w	80058c8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	2220      	movs	r2, #32
 80057c4:	409a      	lsls	r2, r3
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d139      	bne.n	800584a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0216 	bic.w	r2, r2, #22
 80057e4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695a      	ldr	r2, [r3, #20]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057f4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d103      	bne.n	8005806 <HAL_DMA_IRQHandler+0x736>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005802:	2b00      	cmp	r3, #0
 8005804:	d007      	beq.n	8005816 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0208 	bic.w	r2, r2, #8
 8005814:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800581a:	f003 031f 	and.w	r3, r3, #31
 800581e:	223f      	movs	r2, #63	; 0x3f
 8005820:	409a      	lsls	r2, r3
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 834a 	beq.w	8005ed4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	4798      	blx	r3
          }
          return;
 8005848:	e344      	b.n	8005ed4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d018      	beq.n	800588a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d108      	bne.n	8005878 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586a:	2b00      	cmp	r3, #0
 800586c:	d02c      	beq.n	80058c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	4798      	blx	r3
 8005876:	e027      	b.n	80058c8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587c:	2b00      	cmp	r3, #0
 800587e:	d023      	beq.n	80058c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	4798      	blx	r3
 8005888:	e01e      	b.n	80058c8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10f      	bne.n	80058b8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0210 	bic.w	r2, r2, #16
 80058a6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 8306 	beq.w	8005ede <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 8088 	beq.w	80059f0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2204      	movs	r2, #4
 80058e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a7a      	ldr	r2, [pc, #488]	; (8005ad8 <HAL_DMA_IRQHandler+0xa08>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d04a      	beq.n	8005988 <HAL_DMA_IRQHandler+0x8b8>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a79      	ldr	r2, [pc, #484]	; (8005adc <HAL_DMA_IRQHandler+0xa0c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d045      	beq.n	8005988 <HAL_DMA_IRQHandler+0x8b8>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a77      	ldr	r2, [pc, #476]	; (8005ae0 <HAL_DMA_IRQHandler+0xa10>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d040      	beq.n	8005988 <HAL_DMA_IRQHandler+0x8b8>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a76      	ldr	r2, [pc, #472]	; (8005ae4 <HAL_DMA_IRQHandler+0xa14>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d03b      	beq.n	8005988 <HAL_DMA_IRQHandler+0x8b8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a74      	ldr	r2, [pc, #464]	; (8005ae8 <HAL_DMA_IRQHandler+0xa18>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d036      	beq.n	8005988 <HAL_DMA_IRQHandler+0x8b8>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a73      	ldr	r2, [pc, #460]	; (8005aec <HAL_DMA_IRQHandler+0xa1c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d031      	beq.n	8005988 <HAL_DMA_IRQHandler+0x8b8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a71      	ldr	r2, [pc, #452]	; (8005af0 <HAL_DMA_IRQHandler+0xa20>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d02c      	beq.n	8005988 <HAL_DMA_IRQHandler+0x8b8>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a70      	ldr	r2, [pc, #448]	; (8005af4 <HAL_DMA_IRQHandler+0xa24>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d027      	beq.n	8005988 <HAL_DMA_IRQHandler+0x8b8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a6e      	ldr	r2, [pc, #440]	; (8005af8 <HAL_DMA_IRQHandler+0xa28>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d022      	beq.n	8005988 <HAL_DMA_IRQHandler+0x8b8>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a6d      	ldr	r2, [pc, #436]	; (8005afc <HAL_DMA_IRQHandler+0xa2c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d01d      	beq.n	8005988 <HAL_DMA_IRQHandler+0x8b8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a6b      	ldr	r2, [pc, #428]	; (8005b00 <HAL_DMA_IRQHandler+0xa30>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d018      	beq.n	8005988 <HAL_DMA_IRQHandler+0x8b8>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a6a      	ldr	r2, [pc, #424]	; (8005b04 <HAL_DMA_IRQHandler+0xa34>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d013      	beq.n	8005988 <HAL_DMA_IRQHandler+0x8b8>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a68      	ldr	r2, [pc, #416]	; (8005b08 <HAL_DMA_IRQHandler+0xa38>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00e      	beq.n	8005988 <HAL_DMA_IRQHandler+0x8b8>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a67      	ldr	r2, [pc, #412]	; (8005b0c <HAL_DMA_IRQHandler+0xa3c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d009      	beq.n	8005988 <HAL_DMA_IRQHandler+0x8b8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a65      	ldr	r2, [pc, #404]	; (8005b10 <HAL_DMA_IRQHandler+0xa40>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d004      	beq.n	8005988 <HAL_DMA_IRQHandler+0x8b8>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a64      	ldr	r2, [pc, #400]	; (8005b14 <HAL_DMA_IRQHandler+0xa44>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d108      	bne.n	800599a <HAL_DMA_IRQHandler+0x8ca>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0201 	bic.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	e007      	b.n	80059aa <HAL_DMA_IRQHandler+0x8da>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0201 	bic.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	3301      	adds	r3, #1
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d307      	bcc.n	80059c6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1f2      	bne.n	80059aa <HAL_DMA_IRQHandler+0x8da>
 80059c4:	e000      	b.n	80059c8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80059c6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d004      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2203      	movs	r2, #3
 80059e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80059e6:	e003      	b.n	80059f0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 8272 	beq.w	8005ede <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	4798      	blx	r3
 8005a02:	e26c      	b.n	8005ede <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a43      	ldr	r2, [pc, #268]	; (8005b18 <HAL_DMA_IRQHandler+0xa48>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d022      	beq.n	8005a54 <HAL_DMA_IRQHandler+0x984>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a42      	ldr	r2, [pc, #264]	; (8005b1c <HAL_DMA_IRQHandler+0xa4c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d01d      	beq.n	8005a54 <HAL_DMA_IRQHandler+0x984>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a40      	ldr	r2, [pc, #256]	; (8005b20 <HAL_DMA_IRQHandler+0xa50>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d018      	beq.n	8005a54 <HAL_DMA_IRQHandler+0x984>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a3f      	ldr	r2, [pc, #252]	; (8005b24 <HAL_DMA_IRQHandler+0xa54>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d013      	beq.n	8005a54 <HAL_DMA_IRQHandler+0x984>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a3d      	ldr	r2, [pc, #244]	; (8005b28 <HAL_DMA_IRQHandler+0xa58>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00e      	beq.n	8005a54 <HAL_DMA_IRQHandler+0x984>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a3c      	ldr	r2, [pc, #240]	; (8005b2c <HAL_DMA_IRQHandler+0xa5c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d009      	beq.n	8005a54 <HAL_DMA_IRQHandler+0x984>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a3a      	ldr	r2, [pc, #232]	; (8005b30 <HAL_DMA_IRQHandler+0xa60>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d004      	beq.n	8005a54 <HAL_DMA_IRQHandler+0x984>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a39      	ldr	r2, [pc, #228]	; (8005b34 <HAL_DMA_IRQHandler+0xa64>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d101      	bne.n	8005a58 <HAL_DMA_IRQHandler+0x988>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e000      	b.n	8005a5a <HAL_DMA_IRQHandler+0x98a>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 823f 	beq.w	8005ede <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6c:	f003 031f 	and.w	r3, r3, #31
 8005a70:	2204      	movs	r2, #4
 8005a72:	409a      	lsls	r2, r3
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	4013      	ands	r3, r2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 80cd 	beq.w	8005c18 <HAL_DMA_IRQHandler+0xb48>
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 80c7 	beq.w	8005c18 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a8e:	f003 031f 	and.w	r3, r3, #31
 8005a92:	2204      	movs	r2, #4
 8005a94:	409a      	lsls	r2, r3
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d049      	beq.n	8005b38 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d109      	bne.n	8005ac2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 8210 	beq.w	8005ed8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ac0:	e20a      	b.n	8005ed8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 8206 	beq.w	8005ed8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ad4:	e200      	b.n	8005ed8 <HAL_DMA_IRQHandler+0xe08>
 8005ad6:	bf00      	nop
 8005ad8:	40020010 	.word	0x40020010
 8005adc:	40020028 	.word	0x40020028
 8005ae0:	40020040 	.word	0x40020040
 8005ae4:	40020058 	.word	0x40020058
 8005ae8:	40020070 	.word	0x40020070
 8005aec:	40020088 	.word	0x40020088
 8005af0:	400200a0 	.word	0x400200a0
 8005af4:	400200b8 	.word	0x400200b8
 8005af8:	40020410 	.word	0x40020410
 8005afc:	40020428 	.word	0x40020428
 8005b00:	40020440 	.word	0x40020440
 8005b04:	40020458 	.word	0x40020458
 8005b08:	40020470 	.word	0x40020470
 8005b0c:	40020488 	.word	0x40020488
 8005b10:	400204a0 	.word	0x400204a0
 8005b14:	400204b8 	.word	0x400204b8
 8005b18:	58025408 	.word	0x58025408
 8005b1c:	5802541c 	.word	0x5802541c
 8005b20:	58025430 	.word	0x58025430
 8005b24:	58025444 	.word	0x58025444
 8005b28:	58025458 	.word	0x58025458
 8005b2c:	5802546c 	.word	0x5802546c
 8005b30:	58025480 	.word	0x58025480
 8005b34:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f003 0320 	and.w	r3, r3, #32
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d160      	bne.n	8005c04 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a8c      	ldr	r2, [pc, #560]	; (8005d78 <HAL_DMA_IRQHandler+0xca8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d04a      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb12>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a8a      	ldr	r2, [pc, #552]	; (8005d7c <HAL_DMA_IRQHandler+0xcac>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d045      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb12>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a89      	ldr	r2, [pc, #548]	; (8005d80 <HAL_DMA_IRQHandler+0xcb0>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d040      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb12>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a87      	ldr	r2, [pc, #540]	; (8005d84 <HAL_DMA_IRQHandler+0xcb4>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d03b      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb12>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a86      	ldr	r2, [pc, #536]	; (8005d88 <HAL_DMA_IRQHandler+0xcb8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d036      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb12>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a84      	ldr	r2, [pc, #528]	; (8005d8c <HAL_DMA_IRQHandler+0xcbc>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d031      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb12>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a83      	ldr	r2, [pc, #524]	; (8005d90 <HAL_DMA_IRQHandler+0xcc0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d02c      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb12>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a81      	ldr	r2, [pc, #516]	; (8005d94 <HAL_DMA_IRQHandler+0xcc4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d027      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb12>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a80      	ldr	r2, [pc, #512]	; (8005d98 <HAL_DMA_IRQHandler+0xcc8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d022      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb12>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a7e      	ldr	r2, [pc, #504]	; (8005d9c <HAL_DMA_IRQHandler+0xccc>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01d      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb12>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a7d      	ldr	r2, [pc, #500]	; (8005da0 <HAL_DMA_IRQHandler+0xcd0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d018      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb12>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a7b      	ldr	r2, [pc, #492]	; (8005da4 <HAL_DMA_IRQHandler+0xcd4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d013      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb12>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a7a      	ldr	r2, [pc, #488]	; (8005da8 <HAL_DMA_IRQHandler+0xcd8>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00e      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb12>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a78      	ldr	r2, [pc, #480]	; (8005dac <HAL_DMA_IRQHandler+0xcdc>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d009      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb12>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a77      	ldr	r2, [pc, #476]	; (8005db0 <HAL_DMA_IRQHandler+0xce0>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d004      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb12>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a75      	ldr	r2, [pc, #468]	; (8005db4 <HAL_DMA_IRQHandler+0xce4>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d108      	bne.n	8005bf4 <HAL_DMA_IRQHandler+0xb24>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0208 	bic.w	r2, r2, #8
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	e007      	b.n	8005c04 <HAL_DMA_IRQHandler+0xb34>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0204 	bic.w	r2, r2, #4
 8005c02:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 8165 	beq.w	8005ed8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c16:	e15f      	b.n	8005ed8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c1c:	f003 031f 	and.w	r3, r3, #31
 8005c20:	2202      	movs	r2, #2
 8005c22:	409a      	lsls	r2, r3
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	4013      	ands	r3, r2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 80c5 	beq.w	8005db8 <HAL_DMA_IRQHandler+0xce8>
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 80bf 	beq.w	8005db8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3e:	f003 031f 	and.w	r3, r3, #31
 8005c42:	2202      	movs	r2, #2
 8005c44:	409a      	lsls	r2, r3
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d018      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d109      	bne.n	8005c72 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 813a 	beq.w	8005edc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c70:	e134      	b.n	8005edc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 8130 	beq.w	8005edc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c84:	e12a      	b.n	8005edc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f003 0320 	and.w	r3, r3, #32
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d168      	bne.n	8005d62 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a38      	ldr	r2, [pc, #224]	; (8005d78 <HAL_DMA_IRQHandler+0xca8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d04a      	beq.n	8005d30 <HAL_DMA_IRQHandler+0xc60>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a37      	ldr	r2, [pc, #220]	; (8005d7c <HAL_DMA_IRQHandler+0xcac>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d045      	beq.n	8005d30 <HAL_DMA_IRQHandler+0xc60>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a35      	ldr	r2, [pc, #212]	; (8005d80 <HAL_DMA_IRQHandler+0xcb0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d040      	beq.n	8005d30 <HAL_DMA_IRQHandler+0xc60>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a34      	ldr	r2, [pc, #208]	; (8005d84 <HAL_DMA_IRQHandler+0xcb4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d03b      	beq.n	8005d30 <HAL_DMA_IRQHandler+0xc60>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a32      	ldr	r2, [pc, #200]	; (8005d88 <HAL_DMA_IRQHandler+0xcb8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d036      	beq.n	8005d30 <HAL_DMA_IRQHandler+0xc60>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a31      	ldr	r2, [pc, #196]	; (8005d8c <HAL_DMA_IRQHandler+0xcbc>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d031      	beq.n	8005d30 <HAL_DMA_IRQHandler+0xc60>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a2f      	ldr	r2, [pc, #188]	; (8005d90 <HAL_DMA_IRQHandler+0xcc0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d02c      	beq.n	8005d30 <HAL_DMA_IRQHandler+0xc60>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a2e      	ldr	r2, [pc, #184]	; (8005d94 <HAL_DMA_IRQHandler+0xcc4>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d027      	beq.n	8005d30 <HAL_DMA_IRQHandler+0xc60>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a2c      	ldr	r2, [pc, #176]	; (8005d98 <HAL_DMA_IRQHandler+0xcc8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d022      	beq.n	8005d30 <HAL_DMA_IRQHandler+0xc60>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a2b      	ldr	r2, [pc, #172]	; (8005d9c <HAL_DMA_IRQHandler+0xccc>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d01d      	beq.n	8005d30 <HAL_DMA_IRQHandler+0xc60>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a29      	ldr	r2, [pc, #164]	; (8005da0 <HAL_DMA_IRQHandler+0xcd0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d018      	beq.n	8005d30 <HAL_DMA_IRQHandler+0xc60>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a28      	ldr	r2, [pc, #160]	; (8005da4 <HAL_DMA_IRQHandler+0xcd4>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d013      	beq.n	8005d30 <HAL_DMA_IRQHandler+0xc60>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a26      	ldr	r2, [pc, #152]	; (8005da8 <HAL_DMA_IRQHandler+0xcd8>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d00e      	beq.n	8005d30 <HAL_DMA_IRQHandler+0xc60>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a25      	ldr	r2, [pc, #148]	; (8005dac <HAL_DMA_IRQHandler+0xcdc>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d009      	beq.n	8005d30 <HAL_DMA_IRQHandler+0xc60>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a23      	ldr	r2, [pc, #140]	; (8005db0 <HAL_DMA_IRQHandler+0xce0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d004      	beq.n	8005d30 <HAL_DMA_IRQHandler+0xc60>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a22      	ldr	r2, [pc, #136]	; (8005db4 <HAL_DMA_IRQHandler+0xce4>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d108      	bne.n	8005d42 <HAL_DMA_IRQHandler+0xc72>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0214 	bic.w	r2, r2, #20
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	e007      	b.n	8005d52 <HAL_DMA_IRQHandler+0xc82>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 020a 	bic.w	r2, r2, #10
 8005d50:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 80b8 	beq.w	8005edc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d74:	e0b2      	b.n	8005edc <HAL_DMA_IRQHandler+0xe0c>
 8005d76:	bf00      	nop
 8005d78:	40020010 	.word	0x40020010
 8005d7c:	40020028 	.word	0x40020028
 8005d80:	40020040 	.word	0x40020040
 8005d84:	40020058 	.word	0x40020058
 8005d88:	40020070 	.word	0x40020070
 8005d8c:	40020088 	.word	0x40020088
 8005d90:	400200a0 	.word	0x400200a0
 8005d94:	400200b8 	.word	0x400200b8
 8005d98:	40020410 	.word	0x40020410
 8005d9c:	40020428 	.word	0x40020428
 8005da0:	40020440 	.word	0x40020440
 8005da4:	40020458 	.word	0x40020458
 8005da8:	40020470 	.word	0x40020470
 8005dac:	40020488 	.word	0x40020488
 8005db0:	400204a0 	.word	0x400204a0
 8005db4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dbc:	f003 031f 	and.w	r3, r3, #31
 8005dc0:	2208      	movs	r2, #8
 8005dc2:	409a      	lsls	r2, r3
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 8088 	beq.w	8005ede <HAL_DMA_IRQHandler+0xe0e>
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 8082 	beq.w	8005ede <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a41      	ldr	r2, [pc, #260]	; (8005ee4 <HAL_DMA_IRQHandler+0xe14>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d04a      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xdaa>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a3f      	ldr	r2, [pc, #252]	; (8005ee8 <HAL_DMA_IRQHandler+0xe18>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d045      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xdaa>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a3e      	ldr	r2, [pc, #248]	; (8005eec <HAL_DMA_IRQHandler+0xe1c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d040      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xdaa>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a3c      	ldr	r2, [pc, #240]	; (8005ef0 <HAL_DMA_IRQHandler+0xe20>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d03b      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xdaa>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a3b      	ldr	r2, [pc, #236]	; (8005ef4 <HAL_DMA_IRQHandler+0xe24>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d036      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xdaa>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a39      	ldr	r2, [pc, #228]	; (8005ef8 <HAL_DMA_IRQHandler+0xe28>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d031      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xdaa>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a38      	ldr	r2, [pc, #224]	; (8005efc <HAL_DMA_IRQHandler+0xe2c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d02c      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xdaa>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a36      	ldr	r2, [pc, #216]	; (8005f00 <HAL_DMA_IRQHandler+0xe30>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d027      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xdaa>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a35      	ldr	r2, [pc, #212]	; (8005f04 <HAL_DMA_IRQHandler+0xe34>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d022      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xdaa>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a33      	ldr	r2, [pc, #204]	; (8005f08 <HAL_DMA_IRQHandler+0xe38>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d01d      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xdaa>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a32      	ldr	r2, [pc, #200]	; (8005f0c <HAL_DMA_IRQHandler+0xe3c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d018      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xdaa>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a30      	ldr	r2, [pc, #192]	; (8005f10 <HAL_DMA_IRQHandler+0xe40>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d013      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xdaa>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a2f      	ldr	r2, [pc, #188]	; (8005f14 <HAL_DMA_IRQHandler+0xe44>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00e      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xdaa>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a2d      	ldr	r2, [pc, #180]	; (8005f18 <HAL_DMA_IRQHandler+0xe48>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d009      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xdaa>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a2c      	ldr	r2, [pc, #176]	; (8005f1c <HAL_DMA_IRQHandler+0xe4c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d004      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xdaa>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a2a      	ldr	r2, [pc, #168]	; (8005f20 <HAL_DMA_IRQHandler+0xe50>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d108      	bne.n	8005e8c <HAL_DMA_IRQHandler+0xdbc>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 021c 	bic.w	r2, r2, #28
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	e007      	b.n	8005e9c <HAL_DMA_IRQHandler+0xdcc>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 020e 	bic.w	r2, r2, #14
 8005e9a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea0:	f003 031f 	and.w	r3, r3, #31
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	409a      	lsls	r2, r3
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	4798      	blx	r3
 8005ed2:	e004      	b.n	8005ede <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005ed4:	bf00      	nop
 8005ed6:	e002      	b.n	8005ede <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ed8:	bf00      	nop
 8005eda:	e000      	b.n	8005ede <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005edc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ede:	3728      	adds	r7, #40	; 0x28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40020010 	.word	0x40020010
 8005ee8:	40020028 	.word	0x40020028
 8005eec:	40020040 	.word	0x40020040
 8005ef0:	40020058 	.word	0x40020058
 8005ef4:	40020070 	.word	0x40020070
 8005ef8:	40020088 	.word	0x40020088
 8005efc:	400200a0 	.word	0x400200a0
 8005f00:	400200b8 	.word	0x400200b8
 8005f04:	40020410 	.word	0x40020410
 8005f08:	40020428 	.word	0x40020428
 8005f0c:	40020440 	.word	0x40020440
 8005f10:	40020458 	.word	0x40020458
 8005f14:	40020470 	.word	0x40020470
 8005f18:	40020488 	.word	0x40020488
 8005f1c:	400204a0 	.word	0x400204a0
 8005f20:	400204b8 	.word	0x400204b8

08005f24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f36:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a84      	ldr	r2, [pc, #528]	; (8006154 <DMA_SetConfig+0x230>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d072      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a82      	ldr	r2, [pc, #520]	; (8006158 <DMA_SetConfig+0x234>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d06d      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a81      	ldr	r2, [pc, #516]	; (800615c <DMA_SetConfig+0x238>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d068      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a7f      	ldr	r2, [pc, #508]	; (8006160 <DMA_SetConfig+0x23c>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d063      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a7e      	ldr	r2, [pc, #504]	; (8006164 <DMA_SetConfig+0x240>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d05e      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a7c      	ldr	r2, [pc, #496]	; (8006168 <DMA_SetConfig+0x244>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d059      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a7b      	ldr	r2, [pc, #492]	; (800616c <DMA_SetConfig+0x248>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d054      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a79      	ldr	r2, [pc, #484]	; (8006170 <DMA_SetConfig+0x24c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d04f      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a78      	ldr	r2, [pc, #480]	; (8006174 <DMA_SetConfig+0x250>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d04a      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a76      	ldr	r2, [pc, #472]	; (8006178 <DMA_SetConfig+0x254>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d045      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a75      	ldr	r2, [pc, #468]	; (800617c <DMA_SetConfig+0x258>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d040      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a73      	ldr	r2, [pc, #460]	; (8006180 <DMA_SetConfig+0x25c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d03b      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a72      	ldr	r2, [pc, #456]	; (8006184 <DMA_SetConfig+0x260>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d036      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a70      	ldr	r2, [pc, #448]	; (8006188 <DMA_SetConfig+0x264>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d031      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a6f      	ldr	r2, [pc, #444]	; (800618c <DMA_SetConfig+0x268>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d02c      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a6d      	ldr	r2, [pc, #436]	; (8006190 <DMA_SetConfig+0x26c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d027      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a6c      	ldr	r2, [pc, #432]	; (8006194 <DMA_SetConfig+0x270>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d022      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a6a      	ldr	r2, [pc, #424]	; (8006198 <DMA_SetConfig+0x274>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d01d      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a69      	ldr	r2, [pc, #420]	; (800619c <DMA_SetConfig+0x278>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d018      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a67      	ldr	r2, [pc, #412]	; (80061a0 <DMA_SetConfig+0x27c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d013      	beq.n	800602e <DMA_SetConfig+0x10a>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a66      	ldr	r2, [pc, #408]	; (80061a4 <DMA_SetConfig+0x280>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00e      	beq.n	800602e <DMA_SetConfig+0x10a>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a64      	ldr	r2, [pc, #400]	; (80061a8 <DMA_SetConfig+0x284>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d009      	beq.n	800602e <DMA_SetConfig+0x10a>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a63      	ldr	r2, [pc, #396]	; (80061ac <DMA_SetConfig+0x288>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d004      	beq.n	800602e <DMA_SetConfig+0x10a>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a61      	ldr	r2, [pc, #388]	; (80061b0 <DMA_SetConfig+0x28c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d101      	bne.n	8006032 <DMA_SetConfig+0x10e>
 800602e:	2301      	movs	r3, #1
 8006030:	e000      	b.n	8006034 <DMA_SetConfig+0x110>
 8006032:	2300      	movs	r3, #0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00d      	beq.n	8006054 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006040:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006046:	2b00      	cmp	r3, #0
 8006048:	d004      	beq.n	8006054 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006052:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a3e      	ldr	r2, [pc, #248]	; (8006154 <DMA_SetConfig+0x230>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d04a      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a3d      	ldr	r2, [pc, #244]	; (8006158 <DMA_SetConfig+0x234>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d045      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a3b      	ldr	r2, [pc, #236]	; (800615c <DMA_SetConfig+0x238>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d040      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a3a      	ldr	r2, [pc, #232]	; (8006160 <DMA_SetConfig+0x23c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d03b      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a38      	ldr	r2, [pc, #224]	; (8006164 <DMA_SetConfig+0x240>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d036      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a37      	ldr	r2, [pc, #220]	; (8006168 <DMA_SetConfig+0x244>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d031      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a35      	ldr	r2, [pc, #212]	; (800616c <DMA_SetConfig+0x248>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d02c      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a34      	ldr	r2, [pc, #208]	; (8006170 <DMA_SetConfig+0x24c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d027      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a32      	ldr	r2, [pc, #200]	; (8006174 <DMA_SetConfig+0x250>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d022      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a31      	ldr	r2, [pc, #196]	; (8006178 <DMA_SetConfig+0x254>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d01d      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a2f      	ldr	r2, [pc, #188]	; (800617c <DMA_SetConfig+0x258>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d018      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a2e      	ldr	r2, [pc, #184]	; (8006180 <DMA_SetConfig+0x25c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d013      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a2c      	ldr	r2, [pc, #176]	; (8006184 <DMA_SetConfig+0x260>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00e      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a2b      	ldr	r2, [pc, #172]	; (8006188 <DMA_SetConfig+0x264>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d009      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a29      	ldr	r2, [pc, #164]	; (800618c <DMA_SetConfig+0x268>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d004      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a28      	ldr	r2, [pc, #160]	; (8006190 <DMA_SetConfig+0x26c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d101      	bne.n	80060f8 <DMA_SetConfig+0x1d4>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <DMA_SetConfig+0x1d6>
 80060f8:	2300      	movs	r3, #0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d05a      	beq.n	80061b4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006102:	f003 031f 	and.w	r3, r3, #31
 8006106:	223f      	movs	r2, #63	; 0x3f
 8006108:	409a      	lsls	r2, r3
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800611c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d108      	bne.n	8006140 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800613e:	e087      	b.n	8006250 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	60da      	str	r2, [r3, #12]
}
 8006150:	e07e      	b.n	8006250 <DMA_SetConfig+0x32c>
 8006152:	bf00      	nop
 8006154:	40020010 	.word	0x40020010
 8006158:	40020028 	.word	0x40020028
 800615c:	40020040 	.word	0x40020040
 8006160:	40020058 	.word	0x40020058
 8006164:	40020070 	.word	0x40020070
 8006168:	40020088 	.word	0x40020088
 800616c:	400200a0 	.word	0x400200a0
 8006170:	400200b8 	.word	0x400200b8
 8006174:	40020410 	.word	0x40020410
 8006178:	40020428 	.word	0x40020428
 800617c:	40020440 	.word	0x40020440
 8006180:	40020458 	.word	0x40020458
 8006184:	40020470 	.word	0x40020470
 8006188:	40020488 	.word	0x40020488
 800618c:	400204a0 	.word	0x400204a0
 8006190:	400204b8 	.word	0x400204b8
 8006194:	58025408 	.word	0x58025408
 8006198:	5802541c 	.word	0x5802541c
 800619c:	58025430 	.word	0x58025430
 80061a0:	58025444 	.word	0x58025444
 80061a4:	58025458 	.word	0x58025458
 80061a8:	5802546c 	.word	0x5802546c
 80061ac:	58025480 	.word	0x58025480
 80061b0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a28      	ldr	r2, [pc, #160]	; (800625c <DMA_SetConfig+0x338>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d022      	beq.n	8006204 <DMA_SetConfig+0x2e0>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a27      	ldr	r2, [pc, #156]	; (8006260 <DMA_SetConfig+0x33c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d01d      	beq.n	8006204 <DMA_SetConfig+0x2e0>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a25      	ldr	r2, [pc, #148]	; (8006264 <DMA_SetConfig+0x340>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d018      	beq.n	8006204 <DMA_SetConfig+0x2e0>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a24      	ldr	r2, [pc, #144]	; (8006268 <DMA_SetConfig+0x344>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d013      	beq.n	8006204 <DMA_SetConfig+0x2e0>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a22      	ldr	r2, [pc, #136]	; (800626c <DMA_SetConfig+0x348>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00e      	beq.n	8006204 <DMA_SetConfig+0x2e0>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a21      	ldr	r2, [pc, #132]	; (8006270 <DMA_SetConfig+0x34c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d009      	beq.n	8006204 <DMA_SetConfig+0x2e0>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a1f      	ldr	r2, [pc, #124]	; (8006274 <DMA_SetConfig+0x350>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d004      	beq.n	8006204 <DMA_SetConfig+0x2e0>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a1e      	ldr	r2, [pc, #120]	; (8006278 <DMA_SetConfig+0x354>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d101      	bne.n	8006208 <DMA_SetConfig+0x2e4>
 8006204:	2301      	movs	r3, #1
 8006206:	e000      	b.n	800620a <DMA_SetConfig+0x2e6>
 8006208:	2300      	movs	r3, #0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d020      	beq.n	8006250 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006212:	f003 031f 	and.w	r3, r3, #31
 8006216:	2201      	movs	r2, #1
 8006218:	409a      	lsls	r2, r3
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b40      	cmp	r3, #64	; 0x40
 800622c:	d108      	bne.n	8006240 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	60da      	str	r2, [r3, #12]
}
 800623e:	e007      	b.n	8006250 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	60da      	str	r2, [r3, #12]
}
 8006250:	bf00      	nop
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	58025408 	.word	0x58025408
 8006260:	5802541c 	.word	0x5802541c
 8006264:	58025430 	.word	0x58025430
 8006268:	58025444 	.word	0x58025444
 800626c:	58025458 	.word	0x58025458
 8006270:	5802546c 	.word	0x5802546c
 8006274:	58025480 	.word	0x58025480
 8006278:	58025494 	.word	0x58025494

0800627c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a42      	ldr	r2, [pc, #264]	; (8006394 <DMA_CalcBaseAndBitshift+0x118>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d04a      	beq.n	8006324 <DMA_CalcBaseAndBitshift+0xa8>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a41      	ldr	r2, [pc, #260]	; (8006398 <DMA_CalcBaseAndBitshift+0x11c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d045      	beq.n	8006324 <DMA_CalcBaseAndBitshift+0xa8>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a3f      	ldr	r2, [pc, #252]	; (800639c <DMA_CalcBaseAndBitshift+0x120>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d040      	beq.n	8006324 <DMA_CalcBaseAndBitshift+0xa8>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a3e      	ldr	r2, [pc, #248]	; (80063a0 <DMA_CalcBaseAndBitshift+0x124>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d03b      	beq.n	8006324 <DMA_CalcBaseAndBitshift+0xa8>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a3c      	ldr	r2, [pc, #240]	; (80063a4 <DMA_CalcBaseAndBitshift+0x128>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d036      	beq.n	8006324 <DMA_CalcBaseAndBitshift+0xa8>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a3b      	ldr	r2, [pc, #236]	; (80063a8 <DMA_CalcBaseAndBitshift+0x12c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d031      	beq.n	8006324 <DMA_CalcBaseAndBitshift+0xa8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a39      	ldr	r2, [pc, #228]	; (80063ac <DMA_CalcBaseAndBitshift+0x130>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d02c      	beq.n	8006324 <DMA_CalcBaseAndBitshift+0xa8>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a38      	ldr	r2, [pc, #224]	; (80063b0 <DMA_CalcBaseAndBitshift+0x134>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d027      	beq.n	8006324 <DMA_CalcBaseAndBitshift+0xa8>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a36      	ldr	r2, [pc, #216]	; (80063b4 <DMA_CalcBaseAndBitshift+0x138>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d022      	beq.n	8006324 <DMA_CalcBaseAndBitshift+0xa8>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a35      	ldr	r2, [pc, #212]	; (80063b8 <DMA_CalcBaseAndBitshift+0x13c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d01d      	beq.n	8006324 <DMA_CalcBaseAndBitshift+0xa8>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a33      	ldr	r2, [pc, #204]	; (80063bc <DMA_CalcBaseAndBitshift+0x140>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d018      	beq.n	8006324 <DMA_CalcBaseAndBitshift+0xa8>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a32      	ldr	r2, [pc, #200]	; (80063c0 <DMA_CalcBaseAndBitshift+0x144>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d013      	beq.n	8006324 <DMA_CalcBaseAndBitshift+0xa8>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a30      	ldr	r2, [pc, #192]	; (80063c4 <DMA_CalcBaseAndBitshift+0x148>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00e      	beq.n	8006324 <DMA_CalcBaseAndBitshift+0xa8>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a2f      	ldr	r2, [pc, #188]	; (80063c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d009      	beq.n	8006324 <DMA_CalcBaseAndBitshift+0xa8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a2d      	ldr	r2, [pc, #180]	; (80063cc <DMA_CalcBaseAndBitshift+0x150>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d004      	beq.n	8006324 <DMA_CalcBaseAndBitshift+0xa8>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a2c      	ldr	r2, [pc, #176]	; (80063d0 <DMA_CalcBaseAndBitshift+0x154>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d101      	bne.n	8006328 <DMA_CalcBaseAndBitshift+0xac>
 8006324:	2301      	movs	r3, #1
 8006326:	e000      	b.n	800632a <DMA_CalcBaseAndBitshift+0xae>
 8006328:	2300      	movs	r3, #0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d024      	beq.n	8006378 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	b2db      	uxtb	r3, r3
 8006334:	3b10      	subs	r3, #16
 8006336:	4a27      	ldr	r2, [pc, #156]	; (80063d4 <DMA_CalcBaseAndBitshift+0x158>)
 8006338:	fba2 2303 	umull	r2, r3, r2, r3
 800633c:	091b      	lsrs	r3, r3, #4
 800633e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	4a24      	ldr	r2, [pc, #144]	; (80063d8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006348:	5cd3      	ldrb	r3, [r2, r3]
 800634a:	461a      	mov	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b03      	cmp	r3, #3
 8006354:	d908      	bls.n	8006368 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	4b1f      	ldr	r3, [pc, #124]	; (80063dc <DMA_CalcBaseAndBitshift+0x160>)
 800635e:	4013      	ands	r3, r2
 8006360:	1d1a      	adds	r2, r3, #4
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	659a      	str	r2, [r3, #88]	; 0x58
 8006366:	e00d      	b.n	8006384 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	461a      	mov	r2, r3
 800636e:	4b1b      	ldr	r3, [pc, #108]	; (80063dc <DMA_CalcBaseAndBitshift+0x160>)
 8006370:	4013      	ands	r3, r2
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6593      	str	r3, [r2, #88]	; 0x58
 8006376:	e005      	b.n	8006384 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	40020010 	.word	0x40020010
 8006398:	40020028 	.word	0x40020028
 800639c:	40020040 	.word	0x40020040
 80063a0:	40020058 	.word	0x40020058
 80063a4:	40020070 	.word	0x40020070
 80063a8:	40020088 	.word	0x40020088
 80063ac:	400200a0 	.word	0x400200a0
 80063b0:	400200b8 	.word	0x400200b8
 80063b4:	40020410 	.word	0x40020410
 80063b8:	40020428 	.word	0x40020428
 80063bc:	40020440 	.word	0x40020440
 80063c0:	40020458 	.word	0x40020458
 80063c4:	40020470 	.word	0x40020470
 80063c8:	40020488 	.word	0x40020488
 80063cc:	400204a0 	.word	0x400204a0
 80063d0:	400204b8 	.word	0x400204b8
 80063d4:	aaaaaaab 	.word	0xaaaaaaab
 80063d8:	0800ebc4 	.word	0x0800ebc4
 80063dc:	fffffc00 	.word	0xfffffc00

080063e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d120      	bne.n	8006436 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f8:	2b03      	cmp	r3, #3
 80063fa:	d858      	bhi.n	80064ae <DMA_CheckFifoParam+0xce>
 80063fc:	a201      	add	r2, pc, #4	; (adr r2, 8006404 <DMA_CheckFifoParam+0x24>)
 80063fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006402:	bf00      	nop
 8006404:	08006415 	.word	0x08006415
 8006408:	08006427 	.word	0x08006427
 800640c:	08006415 	.word	0x08006415
 8006410:	080064af 	.word	0x080064af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d048      	beq.n	80064b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006424:	e045      	b.n	80064b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800642e:	d142      	bne.n	80064b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006434:	e03f      	b.n	80064b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800643e:	d123      	bne.n	8006488 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006444:	2b03      	cmp	r3, #3
 8006446:	d838      	bhi.n	80064ba <DMA_CheckFifoParam+0xda>
 8006448:	a201      	add	r2, pc, #4	; (adr r2, 8006450 <DMA_CheckFifoParam+0x70>)
 800644a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644e:	bf00      	nop
 8006450:	08006461 	.word	0x08006461
 8006454:	08006467 	.word	0x08006467
 8006458:	08006461 	.word	0x08006461
 800645c:	08006479 	.word	0x08006479
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	73fb      	strb	r3, [r7, #15]
        break;
 8006464:	e030      	b.n	80064c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d025      	beq.n	80064be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006476:	e022      	b.n	80064be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006480:	d11f      	bne.n	80064c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006486:	e01c      	b.n	80064c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648c:	2b02      	cmp	r3, #2
 800648e:	d902      	bls.n	8006496 <DMA_CheckFifoParam+0xb6>
 8006490:	2b03      	cmp	r3, #3
 8006492:	d003      	beq.n	800649c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006494:	e018      	b.n	80064c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	73fb      	strb	r3, [r7, #15]
        break;
 800649a:	e015      	b.n	80064c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00e      	beq.n	80064c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	73fb      	strb	r3, [r7, #15]
    break;
 80064ac:	e00b      	b.n	80064c6 <DMA_CheckFifoParam+0xe6>
        break;
 80064ae:	bf00      	nop
 80064b0:	e00a      	b.n	80064c8 <DMA_CheckFifoParam+0xe8>
        break;
 80064b2:	bf00      	nop
 80064b4:	e008      	b.n	80064c8 <DMA_CheckFifoParam+0xe8>
        break;
 80064b6:	bf00      	nop
 80064b8:	e006      	b.n	80064c8 <DMA_CheckFifoParam+0xe8>
        break;
 80064ba:	bf00      	nop
 80064bc:	e004      	b.n	80064c8 <DMA_CheckFifoParam+0xe8>
        break;
 80064be:	bf00      	nop
 80064c0:	e002      	b.n	80064c8 <DMA_CheckFifoParam+0xe8>
        break;
 80064c2:	bf00      	nop
 80064c4:	e000      	b.n	80064c8 <DMA_CheckFifoParam+0xe8>
    break;
 80064c6:	bf00      	nop
    }
  }

  return status;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop

080064d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a38      	ldr	r2, [pc, #224]	; (80065cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d022      	beq.n	8006536 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a36      	ldr	r2, [pc, #216]	; (80065d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d01d      	beq.n	8006536 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a35      	ldr	r2, [pc, #212]	; (80065d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d018      	beq.n	8006536 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a33      	ldr	r2, [pc, #204]	; (80065d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d013      	beq.n	8006536 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a32      	ldr	r2, [pc, #200]	; (80065dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00e      	beq.n	8006536 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a30      	ldr	r2, [pc, #192]	; (80065e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d009      	beq.n	8006536 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a2f      	ldr	r2, [pc, #188]	; (80065e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d004      	beq.n	8006536 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a2d      	ldr	r2, [pc, #180]	; (80065e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d101      	bne.n	800653a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006536:	2301      	movs	r3, #1
 8006538:	e000      	b.n	800653c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800653a:	2300      	movs	r3, #0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01a      	beq.n	8006576 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	3b08      	subs	r3, #8
 8006548:	4a28      	ldr	r2, [pc, #160]	; (80065ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800654a:	fba2 2303 	umull	r2, r3, r2, r3
 800654e:	091b      	lsrs	r3, r3, #4
 8006550:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4b26      	ldr	r3, [pc, #152]	; (80065f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006556:	4413      	add	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	461a      	mov	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a24      	ldr	r2, [pc, #144]	; (80065f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006564:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f003 031f 	and.w	r3, r3, #31
 800656c:	2201      	movs	r2, #1
 800656e:	409a      	lsls	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006574:	e024      	b.n	80065c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	3b10      	subs	r3, #16
 800657e:	4a1e      	ldr	r2, [pc, #120]	; (80065f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006580:	fba2 2303 	umull	r2, r3, r2, r3
 8006584:	091b      	lsrs	r3, r3, #4
 8006586:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4a1c      	ldr	r2, [pc, #112]	; (80065fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d806      	bhi.n	800659e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4a1b      	ldr	r2, [pc, #108]	; (8006600 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d902      	bls.n	800659e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3308      	adds	r3, #8
 800659c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	4b18      	ldr	r3, [pc, #96]	; (8006604 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	461a      	mov	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a16      	ldr	r2, [pc, #88]	; (8006608 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80065b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f003 031f 	and.w	r3, r3, #31
 80065b8:	2201      	movs	r2, #1
 80065ba:	409a      	lsls	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	669a      	str	r2, [r3, #104]	; 0x68
}
 80065c0:	bf00      	nop
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	58025408 	.word	0x58025408
 80065d0:	5802541c 	.word	0x5802541c
 80065d4:	58025430 	.word	0x58025430
 80065d8:	58025444 	.word	0x58025444
 80065dc:	58025458 	.word	0x58025458
 80065e0:	5802546c 	.word	0x5802546c
 80065e4:	58025480 	.word	0x58025480
 80065e8:	58025494 	.word	0x58025494
 80065ec:	cccccccd 	.word	0xcccccccd
 80065f0:	16009600 	.word	0x16009600
 80065f4:	58025880 	.word	0x58025880
 80065f8:	aaaaaaab 	.word	0xaaaaaaab
 80065fc:	400204b8 	.word	0x400204b8
 8006600:	4002040f 	.word	0x4002040f
 8006604:	10008200 	.word	0x10008200
 8006608:	40020880 	.word	0x40020880

0800660c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	b2db      	uxtb	r3, r3
 800661a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d04a      	beq.n	80066b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2b08      	cmp	r3, #8
 8006626:	d847      	bhi.n	80066b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a25      	ldr	r2, [pc, #148]	; (80066c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d022      	beq.n	8006678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a24      	ldr	r2, [pc, #144]	; (80066c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d01d      	beq.n	8006678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a22      	ldr	r2, [pc, #136]	; (80066cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d018      	beq.n	8006678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a21      	ldr	r2, [pc, #132]	; (80066d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d013      	beq.n	8006678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a1f      	ldr	r2, [pc, #124]	; (80066d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00e      	beq.n	8006678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a1e      	ldr	r2, [pc, #120]	; (80066d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d009      	beq.n	8006678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a1c      	ldr	r2, [pc, #112]	; (80066dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d004      	beq.n	8006678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a1b      	ldr	r2, [pc, #108]	; (80066e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d101      	bne.n	800667c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006678:	2301      	movs	r3, #1
 800667a:	e000      	b.n	800667e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800667c:	2300      	movs	r3, #0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00a      	beq.n	8006698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	4b17      	ldr	r3, [pc, #92]	; (80066e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006686:	4413      	add	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	461a      	mov	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a15      	ldr	r2, [pc, #84]	; (80066e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006694:	671a      	str	r2, [r3, #112]	; 0x70
 8006696:	e009      	b.n	80066ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	4b14      	ldr	r3, [pc, #80]	; (80066ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800669c:	4413      	add	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	461a      	mov	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a11      	ldr	r2, [pc, #68]	; (80066f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80066aa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	2201      	movs	r2, #1
 80066b2:	409a      	lsls	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80066b8:	bf00      	nop
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	58025408 	.word	0x58025408
 80066c8:	5802541c 	.word	0x5802541c
 80066cc:	58025430 	.word	0x58025430
 80066d0:	58025444 	.word	0x58025444
 80066d4:	58025458 	.word	0x58025458
 80066d8:	5802546c 	.word	0x5802546c
 80066dc:	58025480 	.word	0x58025480
 80066e0:	58025494 	.word	0x58025494
 80066e4:	1600963f 	.word	0x1600963f
 80066e8:	58025940 	.word	0x58025940
 80066ec:	1000823f 	.word	0x1000823f
 80066f0:	40020940 	.word	0x40020940

080066f4 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	2b80      	cmp	r3, #128	; 0x80
 800670c:	d105      	bne.n	800671a <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006714:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e325      	b.n	8006d66 <HAL_DMAEx_MultiBufferStart_IT+0x672>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8006724:	2302      	movs	r3, #2
 8006726:	e31e      	b.n	8006d66 <HAL_DMAEx_MultiBufferStart_IT+0x672>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b01      	cmp	r3, #1
 800673a:	f040 830d 	bne.w	8006d58 <HAL_DMAEx_MultiBufferStart_IT+0x664>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2202      	movs	r2, #2
 8006742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a82      	ldr	r2, [pc, #520]	; (800695c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d04a      	beq.n	80067ec <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a81      	ldr	r2, [pc, #516]	; (8006960 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d045      	beq.n	80067ec <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a7f      	ldr	r2, [pc, #508]	; (8006964 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d040      	beq.n	80067ec <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a7e      	ldr	r2, [pc, #504]	; (8006968 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d03b      	beq.n	80067ec <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a7c      	ldr	r2, [pc, #496]	; (800696c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d036      	beq.n	80067ec <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a7b      	ldr	r2, [pc, #492]	; (8006970 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d031      	beq.n	80067ec <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a79      	ldr	r2, [pc, #484]	; (8006974 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d02c      	beq.n	80067ec <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a78      	ldr	r2, [pc, #480]	; (8006978 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d027      	beq.n	80067ec <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a76      	ldr	r2, [pc, #472]	; (800697c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d022      	beq.n	80067ec <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a75      	ldr	r2, [pc, #468]	; (8006980 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d01d      	beq.n	80067ec <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a73      	ldr	r2, [pc, #460]	; (8006984 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d018      	beq.n	80067ec <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a72      	ldr	r2, [pc, #456]	; (8006988 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d013      	beq.n	80067ec <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a70      	ldr	r2, [pc, #448]	; (800698c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00e      	beq.n	80067ec <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a6f      	ldr	r2, [pc, #444]	; (8006990 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d009      	beq.n	80067ec <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a6d      	ldr	r2, [pc, #436]	; (8006994 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d004      	beq.n	80067ec <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a6c      	ldr	r2, [pc, #432]	; (8006998 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d101      	bne.n	80067f0 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 80067ec:	2301      	movs	r3, #1
 80067ee:	e000      	b.n	80067f2 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 80067f0:	2300      	movs	r3, #0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d018      	beq.n	8006828 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006804:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006812:	3308      	adds	r3, #8
 8006814:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681a:	f003 031f 	and.w	r3, r3, #31
 800681e:	223f      	movs	r2, #63	; 0x3f
 8006820:	409a      	lsls	r2, r3
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	e018      	b.n	800685a <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6819      	ldr	r1, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	f248 0320 	movw	r3, #32800	; 0x8020
 8006836:	430b      	orrs	r3, r1
 8006838:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006846:	3304      	adds	r3, #4
 8006848:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684e:	f003 031f 	and.w	r3, r3, #31
 8006852:	2201      	movs	r2, #1
 8006854:	409a      	lsls	r2, r3
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	68b9      	ldr	r1, [r7, #8]
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 fb41 	bl	8006ee8 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a3c      	ldr	r2, [pc, #240]	; (800695c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d072      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a3a      	ldr	r2, [pc, #232]	; (8006960 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d06d      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a39      	ldr	r2, [pc, #228]	; (8006964 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d068      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a37      	ldr	r2, [pc, #220]	; (8006968 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d063      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a36      	ldr	r2, [pc, #216]	; (800696c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d05e      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a34      	ldr	r2, [pc, #208]	; (8006970 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d059      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a33      	ldr	r2, [pc, #204]	; (8006974 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d054      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a31      	ldr	r2, [pc, #196]	; (8006978 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d04f      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a30      	ldr	r2, [pc, #192]	; (800697c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d04a      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a2e      	ldr	r2, [pc, #184]	; (8006980 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d045      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a2d      	ldr	r2, [pc, #180]	; (8006984 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d040      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a2b      	ldr	r2, [pc, #172]	; (8006988 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d03b      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a2a      	ldr	r2, [pc, #168]	; (800698c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d036      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a28      	ldr	r2, [pc, #160]	; (8006990 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d031      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a27      	ldr	r2, [pc, #156]	; (8006994 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d02c      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a25      	ldr	r2, [pc, #148]	; (8006998 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d027      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a24      	ldr	r2, [pc, #144]	; (800699c <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d022      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a22      	ldr	r2, [pc, #136]	; (80069a0 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d01d      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a21      	ldr	r2, [pc, #132]	; (80069a4 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d018      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a1f      	ldr	r2, [pc, #124]	; (80069a8 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d013      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a1e      	ldr	r2, [pc, #120]	; (80069ac <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d00e      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a1c      	ldr	r2, [pc, #112]	; (80069b0 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d009      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a1b      	ldr	r2, [pc, #108]	; (80069b4 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d004      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a19      	ldr	r2, [pc, #100]	; (80069b8 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d132      	bne.n	80069bc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8006956:	2301      	movs	r3, #1
 8006958:	e031      	b.n	80069be <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 800695a:	bf00      	nop
 800695c:	40020010 	.word	0x40020010
 8006960:	40020028 	.word	0x40020028
 8006964:	40020040 	.word	0x40020040
 8006968:	40020058 	.word	0x40020058
 800696c:	40020070 	.word	0x40020070
 8006970:	40020088 	.word	0x40020088
 8006974:	400200a0 	.word	0x400200a0
 8006978:	400200b8 	.word	0x400200b8
 800697c:	40020410 	.word	0x40020410
 8006980:	40020428 	.word	0x40020428
 8006984:	40020440 	.word	0x40020440
 8006988:	40020458 	.word	0x40020458
 800698c:	40020470 	.word	0x40020470
 8006990:	40020488 	.word	0x40020488
 8006994:	400204a0 	.word	0x400204a0
 8006998:	400204b8 	.word	0x400204b8
 800699c:	58025408 	.word	0x58025408
 80069a0:	5802541c 	.word	0x5802541c
 80069a4:	58025430 	.word	0x58025430
 80069a8:	58025444 	.word	0x58025444
 80069ac:	58025458 	.word	0x58025458
 80069b0:	5802546c 	.word	0x5802546c
 80069b4:	58025480 	.word	0x58025480
 80069b8:	58025494 	.word	0x58025494
 80069bc:	2300      	movs	r3, #0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00d      	beq.n	80069de <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80069ca:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80069dc:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a85      	ldr	r2, [pc, #532]	; (8006bf8 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d04a      	beq.n	8006a7e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a83      	ldr	r2, [pc, #524]	; (8006bfc <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d045      	beq.n	8006a7e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a82      	ldr	r2, [pc, #520]	; (8006c00 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d040      	beq.n	8006a7e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a80      	ldr	r2, [pc, #512]	; (8006c04 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d03b      	beq.n	8006a7e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a7f      	ldr	r2, [pc, #508]	; (8006c08 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d036      	beq.n	8006a7e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a7d      	ldr	r2, [pc, #500]	; (8006c0c <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d031      	beq.n	8006a7e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a7c      	ldr	r2, [pc, #496]	; (8006c10 <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d02c      	beq.n	8006a7e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a7a      	ldr	r2, [pc, #488]	; (8006c14 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d027      	beq.n	8006a7e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a79      	ldr	r2, [pc, #484]	; (8006c18 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d022      	beq.n	8006a7e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a77      	ldr	r2, [pc, #476]	; (8006c1c <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d01d      	beq.n	8006a7e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a76      	ldr	r2, [pc, #472]	; (8006c20 <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d018      	beq.n	8006a7e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a74      	ldr	r2, [pc, #464]	; (8006c24 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d013      	beq.n	8006a7e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a73      	ldr	r2, [pc, #460]	; (8006c28 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00e      	beq.n	8006a7e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a71      	ldr	r2, [pc, #452]	; (8006c2c <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d009      	beq.n	8006a7e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a70      	ldr	r2, [pc, #448]	; (8006c30 <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d004      	beq.n	8006a7e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a6e      	ldr	r2, [pc, #440]	; (8006c34 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d101      	bne.n	8006a82 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e000      	b.n	8006a84 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8006a82:	2300      	movs	r3, #0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d022      	beq.n	8006ace <HAL_DMAEx_MultiBufferStart_IT+0x3da>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f023 021e 	bic.w	r2, r3, #30
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f042 0216 	orr.w	r2, r2, #22
 8006a9a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	695a      	ldr	r2, [r3, #20]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006aaa:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d103      	bne.n	8006abc <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d022      	beq.n	8006b02 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0208 	orr.w	r2, r2, #8
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	e019      	b.n	8006b02 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f023 020e 	bic.w	r2, r3, #14
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f042 020a 	orr.w	r2, r2, #10
 8006ae0:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d103      	bne.n	8006af2 <HAL_DMAEx_MultiBufferStart_IT+0x3fe>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d007      	beq.n	8006b02 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f042 0204 	orr.w	r2, r2, #4
 8006b00:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a3c      	ldr	r2, [pc, #240]	; (8006bf8 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d072      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a3a      	ldr	r2, [pc, #232]	; (8006bfc <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d06d      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a39      	ldr	r2, [pc, #228]	; (8006c00 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d068      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a37      	ldr	r2, [pc, #220]	; (8006c04 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d063      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a36      	ldr	r2, [pc, #216]	; (8006c08 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d05e      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a34      	ldr	r2, [pc, #208]	; (8006c0c <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d059      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a33      	ldr	r2, [pc, #204]	; (8006c10 <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d054      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a31      	ldr	r2, [pc, #196]	; (8006c14 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d04f      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a30      	ldr	r2, [pc, #192]	; (8006c18 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d04a      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a2e      	ldr	r2, [pc, #184]	; (8006c1c <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d045      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a2d      	ldr	r2, [pc, #180]	; (8006c20 <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d040      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a2b      	ldr	r2, [pc, #172]	; (8006c24 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d03b      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a2a      	ldr	r2, [pc, #168]	; (8006c28 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d036      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a28      	ldr	r2, [pc, #160]	; (8006c2c <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d031      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a27      	ldr	r2, [pc, #156]	; (8006c30 <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d02c      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a25      	ldr	r2, [pc, #148]	; (8006c34 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d027      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a24      	ldr	r2, [pc, #144]	; (8006c38 <HAL_DMAEx_MultiBufferStart_IT+0x544>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d022      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a22      	ldr	r2, [pc, #136]	; (8006c3c <HAL_DMAEx_MultiBufferStart_IT+0x548>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d01d      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a21      	ldr	r2, [pc, #132]	; (8006c40 <HAL_DMAEx_MultiBufferStart_IT+0x54c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d018      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a1f      	ldr	r2, [pc, #124]	; (8006c44 <HAL_DMAEx_MultiBufferStart_IT+0x550>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d013      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a1e      	ldr	r2, [pc, #120]	; (8006c48 <HAL_DMAEx_MultiBufferStart_IT+0x554>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00e      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a1c      	ldr	r2, [pc, #112]	; (8006c4c <HAL_DMAEx_MultiBufferStart_IT+0x558>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d009      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1b      	ldr	r2, [pc, #108]	; (8006c50 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d004      	beq.n	8006bf2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a19      	ldr	r2, [pc, #100]	; (8006c54 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d132      	bne.n	8006c58 <HAL_DMAEx_MultiBufferStart_IT+0x564>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e031      	b.n	8006c5a <HAL_DMAEx_MultiBufferStart_IT+0x566>
 8006bf6:	bf00      	nop
 8006bf8:	40020010 	.word	0x40020010
 8006bfc:	40020028 	.word	0x40020028
 8006c00:	40020040 	.word	0x40020040
 8006c04:	40020058 	.word	0x40020058
 8006c08:	40020070 	.word	0x40020070
 8006c0c:	40020088 	.word	0x40020088
 8006c10:	400200a0 	.word	0x400200a0
 8006c14:	400200b8 	.word	0x400200b8
 8006c18:	40020410 	.word	0x40020410
 8006c1c:	40020428 	.word	0x40020428
 8006c20:	40020440 	.word	0x40020440
 8006c24:	40020458 	.word	0x40020458
 8006c28:	40020470 	.word	0x40020470
 8006c2c:	40020488 	.word	0x40020488
 8006c30:	400204a0 	.word	0x400204a0
 8006c34:	400204b8 	.word	0x400204b8
 8006c38:	58025408 	.word	0x58025408
 8006c3c:	5802541c 	.word	0x5802541c
 8006c40:	58025430 	.word	0x58025430
 8006c44:	58025444 	.word	0x58025444
 8006c48:	58025458 	.word	0x58025458
 8006c4c:	5802546c 	.word	0x5802546c
 8006c50:	58025480 	.word	0x58025480
 8006c54:	58025494 	.word	0x58025494
 8006c58:	2300      	movs	r3, #0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d01a      	beq.n	8006c94 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d007      	beq.n	8006c7c <HAL_DMAEx_MultiBufferStart_IT+0x588>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c7a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d007      	beq.n	8006c94 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c92:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a35      	ldr	r2, [pc, #212]	; (8006d70 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d04a      	beq.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a34      	ldr	r2, [pc, #208]	; (8006d74 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d045      	beq.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a32      	ldr	r2, [pc, #200]	; (8006d78 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d040      	beq.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a31      	ldr	r2, [pc, #196]	; (8006d7c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d03b      	beq.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a2f      	ldr	r2, [pc, #188]	; (8006d80 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d036      	beq.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a2e      	ldr	r2, [pc, #184]	; (8006d84 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d031      	beq.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a2c      	ldr	r2, [pc, #176]	; (8006d88 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d02c      	beq.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a2b      	ldr	r2, [pc, #172]	; (8006d8c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d027      	beq.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a29      	ldr	r2, [pc, #164]	; (8006d90 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d022      	beq.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a28      	ldr	r2, [pc, #160]	; (8006d94 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d01d      	beq.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a26      	ldr	r2, [pc, #152]	; (8006d98 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d018      	beq.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a25      	ldr	r2, [pc, #148]	; (8006d9c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d013      	beq.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a23      	ldr	r2, [pc, #140]	; (8006da0 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d00e      	beq.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a22      	ldr	r2, [pc, #136]	; (8006da4 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d009      	beq.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a20      	ldr	r2, [pc, #128]	; (8006da8 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d004      	beq.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a1f      	ldr	r2, [pc, #124]	; (8006dac <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d108      	bne.n	8006d46 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 0201 	orr.w	r2, r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e00e      	b.n	8006d64 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f042 0201 	orr.w	r2, r2, #1
 8006d54:	601a      	str	r2, [r3, #0]
 8006d56:	e005      	b.n	8006d64 <HAL_DMAEx_MultiBufferStart_IT+0x670>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	40020010 	.word	0x40020010
 8006d74:	40020028 	.word	0x40020028
 8006d78:	40020040 	.word	0x40020040
 8006d7c:	40020058 	.word	0x40020058
 8006d80:	40020070 	.word	0x40020070
 8006d84:	40020088 	.word	0x40020088
 8006d88:	400200a0 	.word	0x400200a0
 8006d8c:	400200b8 	.word	0x400200b8
 8006d90:	40020410 	.word	0x40020410
 8006d94:	40020428 	.word	0x40020428
 8006d98:	40020440 	.word	0x40020440
 8006d9c:	40020458 	.word	0x40020458
 8006da0:	40020470 	.word	0x40020470
 8006da4:	40020488 	.word	0x40020488
 8006da8:	400204a0 	.word	0x400204a0
 8006dac:	400204b8 	.word	0x400204b8

08006db0 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a39      	ldr	r2, [pc, #228]	; (8006ea8 <HAL_DMAEx_ChangeMemory+0xf8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d04a      	beq.n	8006e5e <HAL_DMAEx_ChangeMemory+0xae>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a37      	ldr	r2, [pc, #220]	; (8006eac <HAL_DMAEx_ChangeMemory+0xfc>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d045      	beq.n	8006e5e <HAL_DMAEx_ChangeMemory+0xae>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a36      	ldr	r2, [pc, #216]	; (8006eb0 <HAL_DMAEx_ChangeMemory+0x100>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d040      	beq.n	8006e5e <HAL_DMAEx_ChangeMemory+0xae>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a34      	ldr	r2, [pc, #208]	; (8006eb4 <HAL_DMAEx_ChangeMemory+0x104>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d03b      	beq.n	8006e5e <HAL_DMAEx_ChangeMemory+0xae>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a33      	ldr	r2, [pc, #204]	; (8006eb8 <HAL_DMAEx_ChangeMemory+0x108>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d036      	beq.n	8006e5e <HAL_DMAEx_ChangeMemory+0xae>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a31      	ldr	r2, [pc, #196]	; (8006ebc <HAL_DMAEx_ChangeMemory+0x10c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d031      	beq.n	8006e5e <HAL_DMAEx_ChangeMemory+0xae>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a30      	ldr	r2, [pc, #192]	; (8006ec0 <HAL_DMAEx_ChangeMemory+0x110>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d02c      	beq.n	8006e5e <HAL_DMAEx_ChangeMemory+0xae>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a2e      	ldr	r2, [pc, #184]	; (8006ec4 <HAL_DMAEx_ChangeMemory+0x114>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d027      	beq.n	8006e5e <HAL_DMAEx_ChangeMemory+0xae>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a2d      	ldr	r2, [pc, #180]	; (8006ec8 <HAL_DMAEx_ChangeMemory+0x118>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d022      	beq.n	8006e5e <HAL_DMAEx_ChangeMemory+0xae>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a2b      	ldr	r2, [pc, #172]	; (8006ecc <HAL_DMAEx_ChangeMemory+0x11c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d01d      	beq.n	8006e5e <HAL_DMAEx_ChangeMemory+0xae>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a2a      	ldr	r2, [pc, #168]	; (8006ed0 <HAL_DMAEx_ChangeMemory+0x120>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d018      	beq.n	8006e5e <HAL_DMAEx_ChangeMemory+0xae>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a28      	ldr	r2, [pc, #160]	; (8006ed4 <HAL_DMAEx_ChangeMemory+0x124>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d013      	beq.n	8006e5e <HAL_DMAEx_ChangeMemory+0xae>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a27      	ldr	r2, [pc, #156]	; (8006ed8 <HAL_DMAEx_ChangeMemory+0x128>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00e      	beq.n	8006e5e <HAL_DMAEx_ChangeMemory+0xae>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a25      	ldr	r2, [pc, #148]	; (8006edc <HAL_DMAEx_ChangeMemory+0x12c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d009      	beq.n	8006e5e <HAL_DMAEx_ChangeMemory+0xae>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a24      	ldr	r2, [pc, #144]	; (8006ee0 <HAL_DMAEx_ChangeMemory+0x130>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d004      	beq.n	8006e5e <HAL_DMAEx_ChangeMemory+0xae>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a22      	ldr	r2, [pc, #136]	; (8006ee4 <HAL_DMAEx_ChangeMemory+0x134>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d101      	bne.n	8006e62 <HAL_DMAEx_ChangeMemory+0xb2>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e000      	b.n	8006e64 <HAL_DMAEx_ChangeMemory+0xb4>
 8006e62:	2300      	movs	r3, #0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00c      	beq.n	8006e82 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8006e68:	79fb      	ldrb	r3, [r7, #7]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d104      	bne.n	8006e78 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	60da      	str	r2, [r3, #12]
 8006e76:	e010      	b.n	8006e9a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	611a      	str	r2, [r3, #16]
 8006e80:	e00b      	b.n	8006e9a <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d104      	bne.n	8006e92 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	60da      	str	r2, [r3, #12]
 8006e90:	e003      	b.n	8006e9a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	40020010 	.word	0x40020010
 8006eac:	40020028 	.word	0x40020028
 8006eb0:	40020040 	.word	0x40020040
 8006eb4:	40020058 	.word	0x40020058
 8006eb8:	40020070 	.word	0x40020070
 8006ebc:	40020088 	.word	0x40020088
 8006ec0:	400200a0 	.word	0x400200a0
 8006ec4:	400200b8 	.word	0x400200b8
 8006ec8:	40020410 	.word	0x40020410
 8006ecc:	40020428 	.word	0x40020428
 8006ed0:	40020440 	.word	0x40020440
 8006ed4:	40020458 	.word	0x40020458
 8006ed8:	40020470 	.word	0x40020470
 8006edc:	40020488 	.word	0x40020488
 8006ee0:	400204a0 	.word	0x400204a0
 8006ee4:	400204b8 	.word	0x400204b8

08006ee8 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
 8006ef4:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a46      	ldr	r2, [pc, #280]	; (8007014 <DMA_MultiBufferSetConfig+0x12c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d04a      	beq.n	8006f96 <DMA_MultiBufferSetConfig+0xae>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a44      	ldr	r2, [pc, #272]	; (8007018 <DMA_MultiBufferSetConfig+0x130>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d045      	beq.n	8006f96 <DMA_MultiBufferSetConfig+0xae>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a43      	ldr	r2, [pc, #268]	; (800701c <DMA_MultiBufferSetConfig+0x134>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d040      	beq.n	8006f96 <DMA_MultiBufferSetConfig+0xae>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a41      	ldr	r2, [pc, #260]	; (8007020 <DMA_MultiBufferSetConfig+0x138>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d03b      	beq.n	8006f96 <DMA_MultiBufferSetConfig+0xae>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a40      	ldr	r2, [pc, #256]	; (8007024 <DMA_MultiBufferSetConfig+0x13c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d036      	beq.n	8006f96 <DMA_MultiBufferSetConfig+0xae>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a3e      	ldr	r2, [pc, #248]	; (8007028 <DMA_MultiBufferSetConfig+0x140>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d031      	beq.n	8006f96 <DMA_MultiBufferSetConfig+0xae>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a3d      	ldr	r2, [pc, #244]	; (800702c <DMA_MultiBufferSetConfig+0x144>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d02c      	beq.n	8006f96 <DMA_MultiBufferSetConfig+0xae>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a3b      	ldr	r2, [pc, #236]	; (8007030 <DMA_MultiBufferSetConfig+0x148>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d027      	beq.n	8006f96 <DMA_MultiBufferSetConfig+0xae>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a3a      	ldr	r2, [pc, #232]	; (8007034 <DMA_MultiBufferSetConfig+0x14c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d022      	beq.n	8006f96 <DMA_MultiBufferSetConfig+0xae>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a38      	ldr	r2, [pc, #224]	; (8007038 <DMA_MultiBufferSetConfig+0x150>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d01d      	beq.n	8006f96 <DMA_MultiBufferSetConfig+0xae>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a37      	ldr	r2, [pc, #220]	; (800703c <DMA_MultiBufferSetConfig+0x154>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d018      	beq.n	8006f96 <DMA_MultiBufferSetConfig+0xae>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a35      	ldr	r2, [pc, #212]	; (8007040 <DMA_MultiBufferSetConfig+0x158>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d013      	beq.n	8006f96 <DMA_MultiBufferSetConfig+0xae>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a34      	ldr	r2, [pc, #208]	; (8007044 <DMA_MultiBufferSetConfig+0x15c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d00e      	beq.n	8006f96 <DMA_MultiBufferSetConfig+0xae>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a32      	ldr	r2, [pc, #200]	; (8007048 <DMA_MultiBufferSetConfig+0x160>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d009      	beq.n	8006f96 <DMA_MultiBufferSetConfig+0xae>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a31      	ldr	r2, [pc, #196]	; (800704c <DMA_MultiBufferSetConfig+0x164>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d004      	beq.n	8006f96 <DMA_MultiBufferSetConfig+0xae>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a2f      	ldr	r2, [pc, #188]	; (8007050 <DMA_MultiBufferSetConfig+0x168>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d101      	bne.n	8006f9a <DMA_MultiBufferSetConfig+0xb2>
 8006f96:	2301      	movs	r3, #1
 8006f98:	e000      	b.n	8006f9c <DMA_MultiBufferSetConfig+0xb4>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d019      	beq.n	8006fd4 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	2b40      	cmp	r3, #64	; 0x40
 8006fae:	d108      	bne.n	8006fc2 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8006fc0:	e021      	b.n	8007006 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	60da      	str	r2, [r3, #12]
}
 8006fd2:	e018      	b.n	8007006 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	2b40      	cmp	r3, #64	; 0x40
 8006fe2:	d108      	bne.n	8006ff6 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	60da      	str	r2, [r3, #12]
}
 8006ff4:	e007      	b.n	8007006 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	60da      	str	r2, [r3, #12]
}
 8007006:	bf00      	nop
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	40020010 	.word	0x40020010
 8007018:	40020028 	.word	0x40020028
 800701c:	40020040 	.word	0x40020040
 8007020:	40020058 	.word	0x40020058
 8007024:	40020070 	.word	0x40020070
 8007028:	40020088 	.word	0x40020088
 800702c:	400200a0 	.word	0x400200a0
 8007030:	400200b8 	.word	0x400200b8
 8007034:	40020410 	.word	0x40020410
 8007038:	40020428 	.word	0x40020428
 800703c:	40020440 	.word	0x40020440
 8007040:	40020458 	.word	0x40020458
 8007044:	40020470 	.word	0x40020470
 8007048:	40020488 	.word	0x40020488
 800704c:	400204a0 	.word	0x400204a0
 8007050:	400204b8 	.word	0x400204b8

08007054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007054:	b480      	push	{r7}
 8007056:	b089      	sub	sp, #36	; 0x24
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800705e:	2300      	movs	r3, #0
 8007060:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007062:	4b89      	ldr	r3, [pc, #548]	; (8007288 <HAL_GPIO_Init+0x234>)
 8007064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007066:	e194      	b.n	8007392 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	2101      	movs	r1, #1
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	fa01 f303 	lsl.w	r3, r1, r3
 8007074:	4013      	ands	r3, r2
 8007076:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 8186 	beq.w	800738c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d00b      	beq.n	80070a0 <HAL_GPIO_Init+0x4c>
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	2b02      	cmp	r3, #2
 800708e:	d007      	beq.n	80070a0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007094:	2b11      	cmp	r3, #17
 8007096:	d003      	beq.n	80070a0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2b12      	cmp	r3, #18
 800709e:	d130      	bne.n	8007102 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	2203      	movs	r2, #3
 80070ac:	fa02 f303 	lsl.w	r3, r2, r3
 80070b0:	43db      	mvns	r3, r3
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	4013      	ands	r3, r2
 80070b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	fa02 f303 	lsl.w	r3, r2, r3
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80070d6:	2201      	movs	r2, #1
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	fa02 f303 	lsl.w	r3, r2, r3
 80070de:	43db      	mvns	r3, r3
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	4013      	ands	r3, r2
 80070e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	091b      	lsrs	r3, r3, #4
 80070ec:	f003 0201 	and.w	r2, r3, #1
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	fa02 f303 	lsl.w	r3, r2, r3
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	005b      	lsls	r3, r3, #1
 800710c:	2203      	movs	r2, #3
 800710e:	fa02 f303 	lsl.w	r3, r2, r3
 8007112:	43db      	mvns	r3, r3
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	4013      	ands	r3, r2
 8007118:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	689a      	ldr	r2, [r3, #8]
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	fa02 f303 	lsl.w	r3, r2, r3
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	4313      	orrs	r3, r2
 800712a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	2b02      	cmp	r3, #2
 8007138:	d003      	beq.n	8007142 <HAL_GPIO_Init+0xee>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	2b12      	cmp	r3, #18
 8007140:	d123      	bne.n	800718a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	08da      	lsrs	r2, r3, #3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	3208      	adds	r2, #8
 800714a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800714e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	220f      	movs	r2, #15
 800715a:	fa02 f303 	lsl.w	r3, r2, r3
 800715e:	43db      	mvns	r3, r3
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	4013      	ands	r3, r2
 8007164:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	691a      	ldr	r2, [r3, #16]
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	f003 0307 	and.w	r3, r3, #7
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	fa02 f303 	lsl.w	r3, r2, r3
 8007176:	69ba      	ldr	r2, [r7, #24]
 8007178:	4313      	orrs	r3, r2
 800717a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	08da      	lsrs	r2, r3, #3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3208      	adds	r2, #8
 8007184:	69b9      	ldr	r1, [r7, #24]
 8007186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	2203      	movs	r2, #3
 8007196:	fa02 f303 	lsl.w	r3, r2, r3
 800719a:	43db      	mvns	r3, r3
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	4013      	ands	r3, r2
 80071a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f003 0203 	and.w	r2, r3, #3
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	005b      	lsls	r3, r3, #1
 80071ae:	fa02 f303 	lsl.w	r3, r2, r3
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 80e0 	beq.w	800738c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071cc:	4b2f      	ldr	r3, [pc, #188]	; (800728c <HAL_GPIO_Init+0x238>)
 80071ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071d2:	4a2e      	ldr	r2, [pc, #184]	; (800728c <HAL_GPIO_Init+0x238>)
 80071d4:	f043 0302 	orr.w	r3, r3, #2
 80071d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80071dc:	4b2b      	ldr	r3, [pc, #172]	; (800728c <HAL_GPIO_Init+0x238>)
 80071de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071ea:	4a29      	ldr	r2, [pc, #164]	; (8007290 <HAL_GPIO_Init+0x23c>)
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	089b      	lsrs	r3, r3, #2
 80071f0:	3302      	adds	r3, #2
 80071f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	f003 0303 	and.w	r3, r3, #3
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	220f      	movs	r2, #15
 8007202:	fa02 f303 	lsl.w	r3, r2, r3
 8007206:	43db      	mvns	r3, r3
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	4013      	ands	r3, r2
 800720c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a20      	ldr	r2, [pc, #128]	; (8007294 <HAL_GPIO_Init+0x240>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d052      	beq.n	80072bc <HAL_GPIO_Init+0x268>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a1f      	ldr	r2, [pc, #124]	; (8007298 <HAL_GPIO_Init+0x244>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d031      	beq.n	8007282 <HAL_GPIO_Init+0x22e>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a1e      	ldr	r2, [pc, #120]	; (800729c <HAL_GPIO_Init+0x248>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d02b      	beq.n	800727e <HAL_GPIO_Init+0x22a>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a1d      	ldr	r2, [pc, #116]	; (80072a0 <HAL_GPIO_Init+0x24c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d025      	beq.n	800727a <HAL_GPIO_Init+0x226>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a1c      	ldr	r2, [pc, #112]	; (80072a4 <HAL_GPIO_Init+0x250>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d01f      	beq.n	8007276 <HAL_GPIO_Init+0x222>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a1b      	ldr	r2, [pc, #108]	; (80072a8 <HAL_GPIO_Init+0x254>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d019      	beq.n	8007272 <HAL_GPIO_Init+0x21e>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a1a      	ldr	r2, [pc, #104]	; (80072ac <HAL_GPIO_Init+0x258>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <HAL_GPIO_Init+0x21a>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a19      	ldr	r2, [pc, #100]	; (80072b0 <HAL_GPIO_Init+0x25c>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d00d      	beq.n	800726a <HAL_GPIO_Init+0x216>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a18      	ldr	r2, [pc, #96]	; (80072b4 <HAL_GPIO_Init+0x260>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d007      	beq.n	8007266 <HAL_GPIO_Init+0x212>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a17      	ldr	r2, [pc, #92]	; (80072b8 <HAL_GPIO_Init+0x264>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d101      	bne.n	8007262 <HAL_GPIO_Init+0x20e>
 800725e:	2309      	movs	r3, #9
 8007260:	e02d      	b.n	80072be <HAL_GPIO_Init+0x26a>
 8007262:	230a      	movs	r3, #10
 8007264:	e02b      	b.n	80072be <HAL_GPIO_Init+0x26a>
 8007266:	2308      	movs	r3, #8
 8007268:	e029      	b.n	80072be <HAL_GPIO_Init+0x26a>
 800726a:	2307      	movs	r3, #7
 800726c:	e027      	b.n	80072be <HAL_GPIO_Init+0x26a>
 800726e:	2306      	movs	r3, #6
 8007270:	e025      	b.n	80072be <HAL_GPIO_Init+0x26a>
 8007272:	2305      	movs	r3, #5
 8007274:	e023      	b.n	80072be <HAL_GPIO_Init+0x26a>
 8007276:	2304      	movs	r3, #4
 8007278:	e021      	b.n	80072be <HAL_GPIO_Init+0x26a>
 800727a:	2303      	movs	r3, #3
 800727c:	e01f      	b.n	80072be <HAL_GPIO_Init+0x26a>
 800727e:	2302      	movs	r3, #2
 8007280:	e01d      	b.n	80072be <HAL_GPIO_Init+0x26a>
 8007282:	2301      	movs	r3, #1
 8007284:	e01b      	b.n	80072be <HAL_GPIO_Init+0x26a>
 8007286:	bf00      	nop
 8007288:	58000080 	.word	0x58000080
 800728c:	58024400 	.word	0x58024400
 8007290:	58000400 	.word	0x58000400
 8007294:	58020000 	.word	0x58020000
 8007298:	58020400 	.word	0x58020400
 800729c:	58020800 	.word	0x58020800
 80072a0:	58020c00 	.word	0x58020c00
 80072a4:	58021000 	.word	0x58021000
 80072a8:	58021400 	.word	0x58021400
 80072ac:	58021800 	.word	0x58021800
 80072b0:	58021c00 	.word	0x58021c00
 80072b4:	58022000 	.word	0x58022000
 80072b8:	58022400 	.word	0x58022400
 80072bc:	2300      	movs	r3, #0
 80072be:	69fa      	ldr	r2, [r7, #28]
 80072c0:	f002 0203 	and.w	r2, r2, #3
 80072c4:	0092      	lsls	r2, r2, #2
 80072c6:	4093      	lsls	r3, r2
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80072ce:	4938      	ldr	r1, [pc, #224]	; (80073b0 <HAL_GPIO_Init+0x35c>)
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	089b      	lsrs	r3, r3, #2
 80072d4:	3302      	adds	r3, #2
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	43db      	mvns	r3, r3
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	4013      	ands	r3, r2
 80072ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d003      	beq.n	8007300 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80072f8:	69ba      	ldr	r2, [r7, #24]
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	43db      	mvns	r3, r3
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	4013      	ands	r3, r2
 8007314:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	4313      	orrs	r3, r2
 8007328:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	43db      	mvns	r3, r3
 800733c:	69ba      	ldr	r2, [r7, #24]
 800733e:	4013      	ands	r3, r2
 8007340:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800734e:	69ba      	ldr	r2, [r7, #24]
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	4313      	orrs	r3, r2
 8007354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007356:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800735e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	43db      	mvns	r3, r3
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	4013      	ands	r3, r2
 800736e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007384:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	3301      	adds	r3, #1
 8007390:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	fa22 f303 	lsr.w	r3, r2, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	f47f ae63 	bne.w	8007068 <HAL_GPIO_Init+0x14>
  }
}
 80073a2:	bf00      	nop
 80073a4:	3724      	adds	r7, #36	; 0x24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	58000400 	.word	0x58000400

080073b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691a      	ldr	r2, [r3, #16]
 80073c4:	887b      	ldrh	r3, [r7, #2]
 80073c6:	4013      	ands	r3, r2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80073cc:	2301      	movs	r3, #1
 80073ce:	73fb      	strb	r3, [r7, #15]
 80073d0:	e001      	b.n	80073d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073d2:	2300      	movs	r3, #0
 80073d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	807b      	strh	r3, [r7, #2]
 80073f0:	4613      	mov	r3, r2
 80073f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80073f4:	787b      	ldrb	r3, [r7, #1]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80073fa:	887a      	ldrh	r2, [r7, #2]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007400:	e003      	b.n	800740a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007402:	887b      	ldrh	r3, [r7, #2]
 8007404:	041a      	lsls	r2, r3, #16
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	619a      	str	r2, [r3, #24]
}
 800740a:	bf00      	nop
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
	...

08007418 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e07f      	b.n	800752a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d106      	bne.n	8007444 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7fb f8b6 	bl	80025b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2224      	movs	r2, #36	; 0x24
 8007448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0201 	bic.w	r2, r2, #1
 800745a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007468:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007478:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d107      	bne.n	8007492 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	689a      	ldr	r2, [r3, #8]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800748e:	609a      	str	r2, [r3, #8]
 8007490:	e006      	b.n	80074a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	689a      	ldr	r2, [r3, #8]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800749e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d104      	bne.n	80074b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6859      	ldr	r1, [r3, #4]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	4b1d      	ldr	r3, [pc, #116]	; (8007534 <HAL_I2C_Init+0x11c>)
 80074be:	430b      	orrs	r3, r1
 80074c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68da      	ldr	r2, [r3, #12]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691a      	ldr	r2, [r3, #16]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	ea42 0103 	orr.w	r1, r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	021a      	lsls	r2, r3, #8
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	69d9      	ldr	r1, [r3, #28]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a1a      	ldr	r2, [r3, #32]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f042 0201 	orr.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2220      	movs	r2, #32
 8007516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	02008000 	.word	0x02008000

08007538 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b088      	sub	sp, #32
 800753c:	af02      	add	r7, sp, #8
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	4608      	mov	r0, r1
 8007542:	4611      	mov	r1, r2
 8007544:	461a      	mov	r2, r3
 8007546:	4603      	mov	r3, r0
 8007548:	817b      	strh	r3, [r7, #10]
 800754a:	460b      	mov	r3, r1
 800754c:	813b      	strh	r3, [r7, #8]
 800754e:	4613      	mov	r3, r2
 8007550:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b20      	cmp	r3, #32
 800755c:	f040 80f9 	bne.w	8007752 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <HAL_I2C_Mem_Write+0x34>
 8007566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007568:	2b00      	cmp	r3, #0
 800756a:	d105      	bne.n	8007578 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007572:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e0ed      	b.n	8007754 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800757e:	2b01      	cmp	r3, #1
 8007580:	d101      	bne.n	8007586 <HAL_I2C_Mem_Write+0x4e>
 8007582:	2302      	movs	r3, #2
 8007584:	e0e6      	b.n	8007754 <HAL_I2C_Mem_Write+0x21c>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800758e:	f7fb fdd3 	bl	8003138 <HAL_GetTick>
 8007592:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	2319      	movs	r3, #25
 800759a:	2201      	movs	r2, #1
 800759c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f000 f955 	bl	8007850 <I2C_WaitOnFlagUntilTimeout>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d001      	beq.n	80075b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e0d1      	b.n	8007754 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2221      	movs	r2, #33	; 0x21
 80075b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2240      	movs	r2, #64	; 0x40
 80075bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6a3a      	ldr	r2, [r7, #32]
 80075ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80075d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075d8:	88f8      	ldrh	r0, [r7, #6]
 80075da:	893a      	ldrh	r2, [r7, #8]
 80075dc:	8979      	ldrh	r1, [r7, #10]
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	9301      	str	r3, [sp, #4]
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	4603      	mov	r3, r0
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 f8b9 	bl	8007760 <I2C_RequestMemoryWrite>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e0a9      	b.n	8007754 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007604:	b29b      	uxth	r3, r3
 8007606:	2bff      	cmp	r3, #255	; 0xff
 8007608:	d90e      	bls.n	8007628 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	22ff      	movs	r2, #255	; 0xff
 800760e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007614:	b2da      	uxtb	r2, r3
 8007616:	8979      	ldrh	r1, [r7, #10]
 8007618:	2300      	movs	r3, #0
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 fa37 	bl	8007a94 <I2C_TransferConfig>
 8007626:	e00f      	b.n	8007648 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800762c:	b29a      	uxth	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007636:	b2da      	uxtb	r2, r3
 8007638:	8979      	ldrh	r1, [r7, #10]
 800763a:	2300      	movs	r3, #0
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 fa26 	bl	8007a94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 f93f 	bl	80078d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e07b      	b.n	8007754 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	781a      	ldrb	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	1c5a      	adds	r2, r3, #1
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007676:	b29b      	uxth	r3, r3
 8007678:	3b01      	subs	r3, #1
 800767a:	b29a      	uxth	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007684:	3b01      	subs	r3, #1
 8007686:	b29a      	uxth	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007690:	b29b      	uxth	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d034      	beq.n	8007700 <HAL_I2C_Mem_Write+0x1c8>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800769a:	2b00      	cmp	r3, #0
 800769c:	d130      	bne.n	8007700 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	2200      	movs	r2, #0
 80076a6:	2180      	movs	r1, #128	; 0x80
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 f8d1 	bl	8007850 <I2C_WaitOnFlagUntilTimeout>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e04d      	b.n	8007754 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076bc:	b29b      	uxth	r3, r3
 80076be:	2bff      	cmp	r3, #255	; 0xff
 80076c0:	d90e      	bls.n	80076e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	22ff      	movs	r2, #255	; 0xff
 80076c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	8979      	ldrh	r1, [r7, #10]
 80076d0:	2300      	movs	r3, #0
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 f9db 	bl	8007a94 <I2C_TransferConfig>
 80076de:	e00f      	b.n	8007700 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	8979      	ldrh	r1, [r7, #10]
 80076f2:	2300      	movs	r3, #0
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 f9ca 	bl	8007a94 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007704:	b29b      	uxth	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d19e      	bne.n	8007648 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 f91e 	bl	8007950 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e01a      	b.n	8007754 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2220      	movs	r2, #32
 8007724:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6859      	ldr	r1, [r3, #4]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	4b0a      	ldr	r3, [pc, #40]	; (800775c <HAL_I2C_Mem_Write+0x224>)
 8007732:	400b      	ands	r3, r1
 8007734:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2220      	movs	r2, #32
 800773a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	e000      	b.n	8007754 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007752:	2302      	movs	r3, #2
  }
}
 8007754:	4618      	mov	r0, r3
 8007756:	3718      	adds	r7, #24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	fe00e800 	.word	0xfe00e800

08007760 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af02      	add	r7, sp, #8
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	4608      	mov	r0, r1
 800776a:	4611      	mov	r1, r2
 800776c:	461a      	mov	r2, r3
 800776e:	4603      	mov	r3, r0
 8007770:	817b      	strh	r3, [r7, #10]
 8007772:	460b      	mov	r3, r1
 8007774:	813b      	strh	r3, [r7, #8]
 8007776:	4613      	mov	r3, r2
 8007778:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800777a:	88fb      	ldrh	r3, [r7, #6]
 800777c:	b2da      	uxtb	r2, r3
 800777e:	8979      	ldrh	r1, [r7, #10]
 8007780:	4b20      	ldr	r3, [pc, #128]	; (8007804 <I2C_RequestMemoryWrite+0xa4>)
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 f983 	bl	8007a94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	69b9      	ldr	r1, [r7, #24]
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 f89c 	bl	80078d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e02c      	b.n	80077fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077a2:	88fb      	ldrh	r3, [r7, #6]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d105      	bne.n	80077b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077a8:	893b      	ldrh	r3, [r7, #8]
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	629a      	str	r2, [r3, #40]	; 0x28
 80077b2:	e015      	b.n	80077e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80077b4:	893b      	ldrh	r3, [r7, #8]
 80077b6:	0a1b      	lsrs	r3, r3, #8
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077c2:	69fa      	ldr	r2, [r7, #28]
 80077c4:	69b9      	ldr	r1, [r7, #24]
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 f882 	bl	80078d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e012      	b.n	80077fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077d6:	893b      	ldrh	r3, [r7, #8]
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	2200      	movs	r2, #0
 80077e8:	2180      	movs	r1, #128	; 0x80
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 f830 	bl	8007850 <I2C_WaitOnFlagUntilTimeout>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e000      	b.n	80077fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	80002000 	.word	0x80002000

08007808 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b02      	cmp	r3, #2
 800781c:	d103      	bne.n	8007826 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2200      	movs	r2, #0
 8007824:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b01      	cmp	r3, #1
 8007832:	d007      	beq.n	8007844 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699a      	ldr	r2, [r3, #24]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f042 0201 	orr.w	r2, r2, #1
 8007842:	619a      	str	r2, [r3, #24]
  }
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	603b      	str	r3, [r7, #0]
 800785c:	4613      	mov	r3, r2
 800785e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007860:	e022      	b.n	80078a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007868:	d01e      	beq.n	80078a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800786a:	f7fb fc65 	bl	8003138 <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	683a      	ldr	r2, [r7, #0]
 8007876:	429a      	cmp	r2, r3
 8007878:	d302      	bcc.n	8007880 <I2C_WaitOnFlagUntilTimeout+0x30>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d113      	bne.n	80078a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007884:	f043 0220 	orr.w	r2, r3, #32
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2220      	movs	r2, #32
 8007890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e00f      	b.n	80078c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	699a      	ldr	r2, [r3, #24]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	4013      	ands	r3, r2
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	bf0c      	ite	eq
 80078b8:	2301      	moveq	r3, #1
 80078ba:	2300      	movne	r3, #0
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	461a      	mov	r2, r3
 80078c0:	79fb      	ldrb	r3, [r7, #7]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d0cd      	beq.n	8007862 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078dc:	e02c      	b.n	8007938 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	68b9      	ldr	r1, [r7, #8]
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 f870 	bl	80079c8 <I2C_IsAcknowledgeFailed>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e02a      	b.n	8007948 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f8:	d01e      	beq.n	8007938 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078fa:	f7fb fc1d 	bl	8003138 <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	429a      	cmp	r2, r3
 8007908:	d302      	bcc.n	8007910 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d113      	bne.n	8007938 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007914:	f043 0220 	orr.w	r2, r3, #32
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2220      	movs	r2, #32
 8007920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e007      	b.n	8007948 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b02      	cmp	r3, #2
 8007944:	d1cb      	bne.n	80078de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800795c:	e028      	b.n	80079b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	68b9      	ldr	r1, [r7, #8]
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 f830 	bl	80079c8 <I2C_IsAcknowledgeFailed>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e026      	b.n	80079c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007972:	f7fb fbe1 	bl	8003138 <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	429a      	cmp	r2, r3
 8007980:	d302      	bcc.n	8007988 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d113      	bne.n	80079b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798c:	f043 0220 	orr.w	r2, r3, #32
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2220      	movs	r2, #32
 8007998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e007      	b.n	80079c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	f003 0320 	and.w	r3, r3, #32
 80079ba:	2b20      	cmp	r3, #32
 80079bc:	d1cf      	bne.n	800795e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	f003 0310 	and.w	r3, r3, #16
 80079de:	2b10      	cmp	r3, #16
 80079e0:	d151      	bne.n	8007a86 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079e2:	e022      	b.n	8007a2a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ea:	d01e      	beq.n	8007a2a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ec:	f7fb fba4 	bl	8003138 <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d302      	bcc.n	8007a02 <I2C_IsAcknowledgeFailed+0x3a>
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d113      	bne.n	8007a2a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a06:	f043 0220 	orr.w	r2, r3, #32
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2220      	movs	r2, #32
 8007a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e02e      	b.n	8007a88 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	f003 0320 	and.w	r3, r3, #32
 8007a34:	2b20      	cmp	r3, #32
 8007a36:	d1d5      	bne.n	80079e4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2210      	movs	r2, #16
 8007a3e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2220      	movs	r2, #32
 8007a46:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f7ff fedd 	bl	8007808 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6859      	ldr	r1, [r3, #4]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	4b0d      	ldr	r3, [pc, #52]	; (8007a90 <I2C_IsAcknowledgeFailed+0xc8>)
 8007a5a:	400b      	ands	r3, r1
 8007a5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a62:	f043 0204 	orr.w	r2, r3, #4
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e000      	b.n	8007a88 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	fe00e800 	.word	0xfe00e800

08007a94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	607b      	str	r3, [r7, #4]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	817b      	strh	r3, [r7, #10]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	0d5b      	lsrs	r3, r3, #21
 8007ab0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007ab4:	4b0d      	ldr	r3, [pc, #52]	; (8007aec <I2C_TransferConfig+0x58>)
 8007ab6:	430b      	orrs	r3, r1
 8007ab8:	43db      	mvns	r3, r3
 8007aba:	ea02 0103 	and.w	r1, r2, r3
 8007abe:	897b      	ldrh	r3, [r7, #10]
 8007ac0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007ac4:	7a7b      	ldrb	r3, [r7, #9]
 8007ac6:	041b      	lsls	r3, r3, #16
 8007ac8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007acc:	431a      	orrs	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007ade:	bf00      	nop
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	03ff63ff 	.word	0x03ff63ff

08007af0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b20      	cmp	r3, #32
 8007b04:	d138      	bne.n	8007b78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d101      	bne.n	8007b14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007b10:	2302      	movs	r3, #2
 8007b12:	e032      	b.n	8007b7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2224      	movs	r2, #36	; 0x24
 8007b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0201 	bic.w	r2, r2, #1
 8007b32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6819      	ldr	r1, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f042 0201 	orr.w	r2, r2, #1
 8007b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	e000      	b.n	8007b7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b78:	2302      	movs	r3, #2
  }
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b085      	sub	sp, #20
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b20      	cmp	r3, #32
 8007b9a:	d139      	bne.n	8007c10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d101      	bne.n	8007baa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	e033      	b.n	8007c12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2224      	movs	r2, #36	; 0x24
 8007bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f022 0201 	bic.w	r2, r2, #1
 8007bc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007bd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	021b      	lsls	r3, r3, #8
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f042 0201 	orr.w	r2, r2, #1
 8007bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	e000      	b.n	8007c12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007c10:	2302      	movs	r3, #2
  }
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
	...

08007c20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007c28:	4b19      	ldr	r3, [pc, #100]	; (8007c90 <HAL_PWREx_ConfigSupply+0x70>)
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b04      	cmp	r3, #4
 8007c32:	d00a      	beq.n	8007c4a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007c34:	4b16      	ldr	r3, [pc, #88]	; (8007c90 <HAL_PWREx_ConfigSupply+0x70>)
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	f003 0307 	and.w	r3, r3, #7
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d001      	beq.n	8007c46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e01f      	b.n	8007c86 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	e01d      	b.n	8007c86 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007c4a:	4b11      	ldr	r3, [pc, #68]	; (8007c90 <HAL_PWREx_ConfigSupply+0x70>)
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	f023 0207 	bic.w	r2, r3, #7
 8007c52:	490f      	ldr	r1, [pc, #60]	; (8007c90 <HAL_PWREx_ConfigSupply+0x70>)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007c5a:	f7fb fa6d 	bl	8003138 <HAL_GetTick>
 8007c5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c60:	e009      	b.n	8007c76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007c62:	f7fb fa69 	bl	8003138 <HAL_GetTick>
 8007c66:	4602      	mov	r2, r0
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c70:	d901      	bls.n	8007c76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e007      	b.n	8007c86 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c76:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <HAL_PWREx_ConfigSupply+0x70>)
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c82:	d1ee      	bne.n	8007c62 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	58024800 	.word	0x58024800

08007c94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08c      	sub	sp, #48	; 0x30
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e3ff      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f000 8087 	beq.w	8007dc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cb4:	4b99      	ldr	r3, [pc, #612]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007cbe:	4b97      	ldr	r3, [pc, #604]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc6:	2b10      	cmp	r3, #16
 8007cc8:	d007      	beq.n	8007cda <HAL_RCC_OscConfig+0x46>
 8007cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ccc:	2b18      	cmp	r3, #24
 8007cce:	d110      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x5e>
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	f003 0303 	and.w	r3, r3, #3
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d10b      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cda:	4b90      	ldr	r3, [pc, #576]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d06c      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x12c>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d168      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e3d9      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cfa:	d106      	bne.n	8007d0a <HAL_RCC_OscConfig+0x76>
 8007cfc:	4b87      	ldr	r3, [pc, #540]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a86      	ldr	r2, [pc, #536]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	e02e      	b.n	8007d68 <HAL_RCC_OscConfig+0xd4>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10c      	bne.n	8007d2c <HAL_RCC_OscConfig+0x98>
 8007d12:	4b82      	ldr	r3, [pc, #520]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a81      	ldr	r2, [pc, #516]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	4b7f      	ldr	r3, [pc, #508]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a7e      	ldr	r2, [pc, #504]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	e01d      	b.n	8007d68 <HAL_RCC_OscConfig+0xd4>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d34:	d10c      	bne.n	8007d50 <HAL_RCC_OscConfig+0xbc>
 8007d36:	4b79      	ldr	r3, [pc, #484]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a78      	ldr	r2, [pc, #480]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d40:	6013      	str	r3, [r2, #0]
 8007d42:	4b76      	ldr	r3, [pc, #472]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a75      	ldr	r2, [pc, #468]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	e00b      	b.n	8007d68 <HAL_RCC_OscConfig+0xd4>
 8007d50:	4b72      	ldr	r3, [pc, #456]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a71      	ldr	r2, [pc, #452]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	4b6f      	ldr	r3, [pc, #444]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a6e      	ldr	r2, [pc, #440]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d013      	beq.n	8007d98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d70:	f7fb f9e2 	bl	8003138 <HAL_GetTick>
 8007d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d76:	e008      	b.n	8007d8a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d78:	f7fb f9de 	bl	8003138 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b64      	cmp	r3, #100	; 0x64
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e38d      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d8a:	4b64      	ldr	r3, [pc, #400]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0f0      	beq.n	8007d78 <HAL_RCC_OscConfig+0xe4>
 8007d96:	e014      	b.n	8007dc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d98:	f7fb f9ce 	bl	8003138 <HAL_GetTick>
 8007d9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d9e:	e008      	b.n	8007db2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007da0:	f7fb f9ca 	bl	8003138 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b64      	cmp	r3, #100	; 0x64
 8007dac:	d901      	bls.n	8007db2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e379      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007db2:	4b5a      	ldr	r3, [pc, #360]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1f0      	bne.n	8007da0 <HAL_RCC_OscConfig+0x10c>
 8007dbe:	e000      	b.n	8007dc2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 80ae 	beq.w	8007f2c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dd0:	4b52      	ldr	r3, [pc, #328]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dd8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007dda:	4b50      	ldr	r3, [pc, #320]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dde:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d007      	beq.n	8007df6 <HAL_RCC_OscConfig+0x162>
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	2b18      	cmp	r3, #24
 8007dea:	d13a      	bne.n	8007e62 <HAL_RCC_OscConfig+0x1ce>
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	f003 0303 	and.w	r3, r3, #3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d135      	bne.n	8007e62 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007df6:	4b49      	ldr	r3, [pc, #292]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0304 	and.w	r3, r3, #4
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d005      	beq.n	8007e0e <HAL_RCC_OscConfig+0x17a>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e34b      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e0e:	f7fb f9c1 	bl	8003194 <HAL_GetREVID>
 8007e12:	4602      	mov	r2, r0
 8007e14:	f241 0303 	movw	r3, #4099	; 0x1003
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d817      	bhi.n	8007e4c <HAL_RCC_OscConfig+0x1b8>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	2b40      	cmp	r3, #64	; 0x40
 8007e22:	d108      	bne.n	8007e36 <HAL_RCC_OscConfig+0x1a2>
 8007e24:	4b3d      	ldr	r3, [pc, #244]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007e2c:	4a3b      	ldr	r2, [pc, #236]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e32:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e34:	e07a      	b.n	8007f2c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e36:	4b39      	ldr	r3, [pc, #228]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	031b      	lsls	r3, r3, #12
 8007e44:	4935      	ldr	r1, [pc, #212]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e4a:	e06f      	b.n	8007f2c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e4c:	4b33      	ldr	r3, [pc, #204]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	061b      	lsls	r3, r3, #24
 8007e5a:	4930      	ldr	r1, [pc, #192]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e60:	e064      	b.n	8007f2c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d045      	beq.n	8007ef6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e6a:	4b2c      	ldr	r3, [pc, #176]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f023 0219 	bic.w	r2, r3, #25
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	4929      	ldr	r1, [pc, #164]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e7c:	f7fb f95c 	bl	8003138 <HAL_GetTick>
 8007e80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e82:	e008      	b.n	8007e96 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e84:	f7fb f958 	bl	8003138 <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d901      	bls.n	8007e96 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e307      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e96:	4b21      	ldr	r3, [pc, #132]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0304 	and.w	r3, r3, #4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0f0      	beq.n	8007e84 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ea2:	f7fb f977 	bl	8003194 <HAL_GetREVID>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	f241 0303 	movw	r3, #4099	; 0x1003
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d817      	bhi.n	8007ee0 <HAL_RCC_OscConfig+0x24c>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	2b40      	cmp	r3, #64	; 0x40
 8007eb6:	d108      	bne.n	8007eca <HAL_RCC_OscConfig+0x236>
 8007eb8:	4b18      	ldr	r3, [pc, #96]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007ec0:	4a16      	ldr	r2, [pc, #88]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ec6:	6053      	str	r3, [r2, #4]
 8007ec8:	e030      	b.n	8007f2c <HAL_RCC_OscConfig+0x298>
 8007eca:	4b14      	ldr	r3, [pc, #80]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	031b      	lsls	r3, r3, #12
 8007ed8:	4910      	ldr	r1, [pc, #64]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007eda:	4313      	orrs	r3, r2
 8007edc:	604b      	str	r3, [r1, #4]
 8007ede:	e025      	b.n	8007f2c <HAL_RCC_OscConfig+0x298>
 8007ee0:	4b0e      	ldr	r3, [pc, #56]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	061b      	lsls	r3, r3, #24
 8007eee:	490b      	ldr	r1, [pc, #44]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	604b      	str	r3, [r1, #4]
 8007ef4:	e01a      	b.n	8007f2c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ef6:	4b09      	ldr	r3, [pc, #36]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a08      	ldr	r2, [pc, #32]	; (8007f1c <HAL_RCC_OscConfig+0x288>)
 8007efc:	f023 0301 	bic.w	r3, r3, #1
 8007f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f02:	f7fb f919 	bl	8003138 <HAL_GetTick>
 8007f06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f08:	e00a      	b.n	8007f20 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f0a:	f7fb f915 	bl	8003138 <HAL_GetTick>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d903      	bls.n	8007f20 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e2c4      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
 8007f1c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f20:	4ba4      	ldr	r3, [pc, #656]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0304 	and.w	r3, r3, #4
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1ee      	bne.n	8007f0a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 80a9 	beq.w	800808c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f3a:	4b9e      	ldr	r3, [pc, #632]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f42:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f44:	4b9b      	ldr	r3, [pc, #620]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8007f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f48:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	2b08      	cmp	r3, #8
 8007f4e:	d007      	beq.n	8007f60 <HAL_RCC_OscConfig+0x2cc>
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	2b18      	cmp	r3, #24
 8007f54:	d13a      	bne.n	8007fcc <HAL_RCC_OscConfig+0x338>
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f003 0303 	and.w	r3, r3, #3
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d135      	bne.n	8007fcc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f60:	4b94      	ldr	r3, [pc, #592]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d005      	beq.n	8007f78 <HAL_RCC_OscConfig+0x2e4>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	69db      	ldr	r3, [r3, #28]
 8007f70:	2b80      	cmp	r3, #128	; 0x80
 8007f72:	d001      	beq.n	8007f78 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e296      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f78:	f7fb f90c 	bl	8003194 <HAL_GetREVID>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	f241 0303 	movw	r3, #4099	; 0x1003
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d817      	bhi.n	8007fb6 <HAL_RCC_OscConfig+0x322>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	2b20      	cmp	r3, #32
 8007f8c:	d108      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x30c>
 8007f8e:	4b89      	ldr	r3, [pc, #548]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007f96:	4a87      	ldr	r2, [pc, #540]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8007f98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f9c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f9e:	e075      	b.n	800808c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fa0:	4b84      	ldr	r3, [pc, #528]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	069b      	lsls	r3, r3, #26
 8007fae:	4981      	ldr	r1, [pc, #516]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fb4:	e06a      	b.n	800808c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fb6:	4b7f      	ldr	r3, [pc, #508]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	061b      	lsls	r3, r3, #24
 8007fc4:	497b      	ldr	r1, [pc, #492]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fca:	e05f      	b.n	800808c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d042      	beq.n	800805a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007fd4:	4b77      	ldr	r3, [pc, #476]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a76      	ldr	r2, [pc, #472]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8007fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe0:	f7fb f8aa 	bl	8003138 <HAL_GetTick>
 8007fe4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fe6:	e008      	b.n	8007ffa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007fe8:	f7fb f8a6 	bl	8003138 <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e255      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ffa:	4b6e      	ldr	r3, [pc, #440]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0f0      	beq.n	8007fe8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008006:	f7fb f8c5 	bl	8003194 <HAL_GetREVID>
 800800a:	4602      	mov	r2, r0
 800800c:	f241 0303 	movw	r3, #4099	; 0x1003
 8008010:	429a      	cmp	r2, r3
 8008012:	d817      	bhi.n	8008044 <HAL_RCC_OscConfig+0x3b0>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a1b      	ldr	r3, [r3, #32]
 8008018:	2b20      	cmp	r3, #32
 800801a:	d108      	bne.n	800802e <HAL_RCC_OscConfig+0x39a>
 800801c:	4b65      	ldr	r3, [pc, #404]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008024:	4a63      	ldr	r2, [pc, #396]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8008026:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800802a:	6053      	str	r3, [r2, #4]
 800802c:	e02e      	b.n	800808c <HAL_RCC_OscConfig+0x3f8>
 800802e:	4b61      	ldr	r3, [pc, #388]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	069b      	lsls	r3, r3, #26
 800803c:	495d      	ldr	r1, [pc, #372]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 800803e:	4313      	orrs	r3, r2
 8008040:	604b      	str	r3, [r1, #4]
 8008042:	e023      	b.n	800808c <HAL_RCC_OscConfig+0x3f8>
 8008044:	4b5b      	ldr	r3, [pc, #364]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	061b      	lsls	r3, r3, #24
 8008052:	4958      	ldr	r1, [pc, #352]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8008054:	4313      	orrs	r3, r2
 8008056:	60cb      	str	r3, [r1, #12]
 8008058:	e018      	b.n	800808c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800805a:	4b56      	ldr	r3, [pc, #344]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a55      	ldr	r2, [pc, #340]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8008060:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008066:	f7fb f867 	bl	8003138 <HAL_GetTick>
 800806a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800806c:	e008      	b.n	8008080 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800806e:	f7fb f863 	bl	8003138 <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	2b02      	cmp	r3, #2
 800807a:	d901      	bls.n	8008080 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e212      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008080:	4b4c      	ldr	r3, [pc, #304]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1f0      	bne.n	800806e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0308 	and.w	r3, r3, #8
 8008094:	2b00      	cmp	r3, #0
 8008096:	d036      	beq.n	8008106 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d019      	beq.n	80080d4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080a0:	4b44      	ldr	r3, [pc, #272]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 80080a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080a4:	4a43      	ldr	r2, [pc, #268]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 80080a6:	f043 0301 	orr.w	r3, r3, #1
 80080aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ac:	f7fb f844 	bl	8003138 <HAL_GetTick>
 80080b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080b2:	e008      	b.n	80080c6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080b4:	f7fb f840 	bl	8003138 <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d901      	bls.n	80080c6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e1ef      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080c6:	4b3b      	ldr	r3, [pc, #236]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 80080c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0f0      	beq.n	80080b4 <HAL_RCC_OscConfig+0x420>
 80080d2:	e018      	b.n	8008106 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080d4:	4b37      	ldr	r3, [pc, #220]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 80080d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080d8:	4a36      	ldr	r2, [pc, #216]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 80080da:	f023 0301 	bic.w	r3, r3, #1
 80080de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080e0:	f7fb f82a 	bl	8003138 <HAL_GetTick>
 80080e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080e6:	e008      	b.n	80080fa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080e8:	f7fb f826 	bl	8003138 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d901      	bls.n	80080fa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e1d5      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080fa:	4b2e      	ldr	r3, [pc, #184]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 80080fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080fe:	f003 0302 	and.w	r3, r3, #2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1f0      	bne.n	80080e8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0320 	and.w	r3, r3, #32
 800810e:	2b00      	cmp	r3, #0
 8008110:	d036      	beq.n	8008180 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d019      	beq.n	800814e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800811a:	4b26      	ldr	r3, [pc, #152]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a25      	ldr	r2, [pc, #148]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8008120:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008124:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008126:	f7fb f807 	bl	8003138 <HAL_GetTick>
 800812a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800812c:	e008      	b.n	8008140 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800812e:	f7fb f803 	bl	8003138 <HAL_GetTick>
 8008132:	4602      	mov	r2, r0
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	2b02      	cmp	r3, #2
 800813a:	d901      	bls.n	8008140 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e1b2      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008140:	4b1c      	ldr	r3, [pc, #112]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d0f0      	beq.n	800812e <HAL_RCC_OscConfig+0x49a>
 800814c:	e018      	b.n	8008180 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800814e:	4b19      	ldr	r3, [pc, #100]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a18      	ldr	r2, [pc, #96]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8008154:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008158:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800815a:	f7fa ffed 	bl	8003138 <HAL_GetTick>
 800815e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008160:	e008      	b.n	8008174 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008162:	f7fa ffe9 	bl	8003138 <HAL_GetTick>
 8008166:	4602      	mov	r2, r0
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	2b02      	cmp	r3, #2
 800816e:	d901      	bls.n	8008174 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e198      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008174:	4b0f      	ldr	r3, [pc, #60]	; (80081b4 <HAL_RCC_OscConfig+0x520>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1f0      	bne.n	8008162 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0304 	and.w	r3, r3, #4
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 8085 	beq.w	8008298 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800818e:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <HAL_RCC_OscConfig+0x524>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a09      	ldr	r2, [pc, #36]	; (80081b8 <HAL_RCC_OscConfig+0x524>)
 8008194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008198:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800819a:	f7fa ffcd 	bl	8003138 <HAL_GetTick>
 800819e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081a0:	e00c      	b.n	80081bc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80081a2:	f7fa ffc9 	bl	8003138 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b64      	cmp	r3, #100	; 0x64
 80081ae:	d905      	bls.n	80081bc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e178      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
 80081b4:	58024400 	.word	0x58024400
 80081b8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081bc:	4b96      	ldr	r3, [pc, #600]	; (8008418 <HAL_RCC_OscConfig+0x784>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d0ec      	beq.n	80081a2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d106      	bne.n	80081de <HAL_RCC_OscConfig+0x54a>
 80081d0:	4b92      	ldr	r3, [pc, #584]	; (800841c <HAL_RCC_OscConfig+0x788>)
 80081d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d4:	4a91      	ldr	r2, [pc, #580]	; (800841c <HAL_RCC_OscConfig+0x788>)
 80081d6:	f043 0301 	orr.w	r3, r3, #1
 80081da:	6713      	str	r3, [r2, #112]	; 0x70
 80081dc:	e02d      	b.n	800823a <HAL_RCC_OscConfig+0x5a6>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10c      	bne.n	8008200 <HAL_RCC_OscConfig+0x56c>
 80081e6:	4b8d      	ldr	r3, [pc, #564]	; (800841c <HAL_RCC_OscConfig+0x788>)
 80081e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ea:	4a8c      	ldr	r2, [pc, #560]	; (800841c <HAL_RCC_OscConfig+0x788>)
 80081ec:	f023 0301 	bic.w	r3, r3, #1
 80081f0:	6713      	str	r3, [r2, #112]	; 0x70
 80081f2:	4b8a      	ldr	r3, [pc, #552]	; (800841c <HAL_RCC_OscConfig+0x788>)
 80081f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f6:	4a89      	ldr	r2, [pc, #548]	; (800841c <HAL_RCC_OscConfig+0x788>)
 80081f8:	f023 0304 	bic.w	r3, r3, #4
 80081fc:	6713      	str	r3, [r2, #112]	; 0x70
 80081fe:	e01c      	b.n	800823a <HAL_RCC_OscConfig+0x5a6>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	2b05      	cmp	r3, #5
 8008206:	d10c      	bne.n	8008222 <HAL_RCC_OscConfig+0x58e>
 8008208:	4b84      	ldr	r3, [pc, #528]	; (800841c <HAL_RCC_OscConfig+0x788>)
 800820a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800820c:	4a83      	ldr	r2, [pc, #524]	; (800841c <HAL_RCC_OscConfig+0x788>)
 800820e:	f043 0304 	orr.w	r3, r3, #4
 8008212:	6713      	str	r3, [r2, #112]	; 0x70
 8008214:	4b81      	ldr	r3, [pc, #516]	; (800841c <HAL_RCC_OscConfig+0x788>)
 8008216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008218:	4a80      	ldr	r2, [pc, #512]	; (800841c <HAL_RCC_OscConfig+0x788>)
 800821a:	f043 0301 	orr.w	r3, r3, #1
 800821e:	6713      	str	r3, [r2, #112]	; 0x70
 8008220:	e00b      	b.n	800823a <HAL_RCC_OscConfig+0x5a6>
 8008222:	4b7e      	ldr	r3, [pc, #504]	; (800841c <HAL_RCC_OscConfig+0x788>)
 8008224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008226:	4a7d      	ldr	r2, [pc, #500]	; (800841c <HAL_RCC_OscConfig+0x788>)
 8008228:	f023 0301 	bic.w	r3, r3, #1
 800822c:	6713      	str	r3, [r2, #112]	; 0x70
 800822e:	4b7b      	ldr	r3, [pc, #492]	; (800841c <HAL_RCC_OscConfig+0x788>)
 8008230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008232:	4a7a      	ldr	r2, [pc, #488]	; (800841c <HAL_RCC_OscConfig+0x788>)
 8008234:	f023 0304 	bic.w	r3, r3, #4
 8008238:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d015      	beq.n	800826e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008242:	f7fa ff79 	bl	8003138 <HAL_GetTick>
 8008246:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008248:	e00a      	b.n	8008260 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800824a:	f7fa ff75 	bl	8003138 <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	f241 3288 	movw	r2, #5000	; 0x1388
 8008258:	4293      	cmp	r3, r2
 800825a:	d901      	bls.n	8008260 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e122      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008260:	4b6e      	ldr	r3, [pc, #440]	; (800841c <HAL_RCC_OscConfig+0x788>)
 8008262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008264:	f003 0302 	and.w	r3, r3, #2
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0ee      	beq.n	800824a <HAL_RCC_OscConfig+0x5b6>
 800826c:	e014      	b.n	8008298 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800826e:	f7fa ff63 	bl	8003138 <HAL_GetTick>
 8008272:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008274:	e00a      	b.n	800828c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008276:	f7fa ff5f 	bl	8003138 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	f241 3288 	movw	r2, #5000	; 0x1388
 8008284:	4293      	cmp	r3, r2
 8008286:	d901      	bls.n	800828c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8008288:	2303      	movs	r3, #3
 800828a:	e10c      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800828c:	4b63      	ldr	r3, [pc, #396]	; (800841c <HAL_RCC_OscConfig+0x788>)
 800828e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008290:	f003 0302 	and.w	r3, r3, #2
 8008294:	2b00      	cmp	r3, #0
 8008296:	d1ee      	bne.n	8008276 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 8101 	beq.w	80084a4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80082a2:	4b5e      	ldr	r3, [pc, #376]	; (800841c <HAL_RCC_OscConfig+0x788>)
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082aa:	2b18      	cmp	r3, #24
 80082ac:	f000 80bc 	beq.w	8008428 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	f040 8095 	bne.w	80083e4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082ba:	4b58      	ldr	r3, [pc, #352]	; (800841c <HAL_RCC_OscConfig+0x788>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a57      	ldr	r2, [pc, #348]	; (800841c <HAL_RCC_OscConfig+0x788>)
 80082c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c6:	f7fa ff37 	bl	8003138 <HAL_GetTick>
 80082ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082cc:	e008      	b.n	80082e0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082ce:	f7fa ff33 	bl	8003138 <HAL_GetTick>
 80082d2:	4602      	mov	r2, r0
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d901      	bls.n	80082e0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e0e2      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082e0:	4b4e      	ldr	r3, [pc, #312]	; (800841c <HAL_RCC_OscConfig+0x788>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1f0      	bne.n	80082ce <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082ec:	4b4b      	ldr	r3, [pc, #300]	; (800841c <HAL_RCC_OscConfig+0x788>)
 80082ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082f0:	4b4b      	ldr	r3, [pc, #300]	; (8008420 <HAL_RCC_OscConfig+0x78c>)
 80082f2:	4013      	ands	r3, r2
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80082fc:	0112      	lsls	r2, r2, #4
 80082fe:	430a      	orrs	r2, r1
 8008300:	4946      	ldr	r1, [pc, #280]	; (800841c <HAL_RCC_OscConfig+0x788>)
 8008302:	4313      	orrs	r3, r2
 8008304:	628b      	str	r3, [r1, #40]	; 0x28
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830a:	3b01      	subs	r3, #1
 800830c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008314:	3b01      	subs	r3, #1
 8008316:	025b      	lsls	r3, r3, #9
 8008318:	b29b      	uxth	r3, r3
 800831a:	431a      	orrs	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008320:	3b01      	subs	r3, #1
 8008322:	041b      	lsls	r3, r3, #16
 8008324:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008328:	431a      	orrs	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832e:	3b01      	subs	r3, #1
 8008330:	061b      	lsls	r3, r3, #24
 8008332:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008336:	4939      	ldr	r1, [pc, #228]	; (800841c <HAL_RCC_OscConfig+0x788>)
 8008338:	4313      	orrs	r3, r2
 800833a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800833c:	4b37      	ldr	r3, [pc, #220]	; (800841c <HAL_RCC_OscConfig+0x788>)
 800833e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008340:	4a36      	ldr	r2, [pc, #216]	; (800841c <HAL_RCC_OscConfig+0x788>)
 8008342:	f023 0301 	bic.w	r3, r3, #1
 8008346:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008348:	4b34      	ldr	r3, [pc, #208]	; (800841c <HAL_RCC_OscConfig+0x788>)
 800834a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800834c:	4b35      	ldr	r3, [pc, #212]	; (8008424 <HAL_RCC_OscConfig+0x790>)
 800834e:	4013      	ands	r3, r2
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008354:	00d2      	lsls	r2, r2, #3
 8008356:	4931      	ldr	r1, [pc, #196]	; (800841c <HAL_RCC_OscConfig+0x788>)
 8008358:	4313      	orrs	r3, r2
 800835a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800835c:	4b2f      	ldr	r3, [pc, #188]	; (800841c <HAL_RCC_OscConfig+0x788>)
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	f023 020c 	bic.w	r2, r3, #12
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008368:	492c      	ldr	r1, [pc, #176]	; (800841c <HAL_RCC_OscConfig+0x788>)
 800836a:	4313      	orrs	r3, r2
 800836c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800836e:	4b2b      	ldr	r3, [pc, #172]	; (800841c <HAL_RCC_OscConfig+0x788>)
 8008370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008372:	f023 0202 	bic.w	r2, r3, #2
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800837a:	4928      	ldr	r1, [pc, #160]	; (800841c <HAL_RCC_OscConfig+0x788>)
 800837c:	4313      	orrs	r3, r2
 800837e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008380:	4b26      	ldr	r3, [pc, #152]	; (800841c <HAL_RCC_OscConfig+0x788>)
 8008382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008384:	4a25      	ldr	r2, [pc, #148]	; (800841c <HAL_RCC_OscConfig+0x788>)
 8008386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800838a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800838c:	4b23      	ldr	r3, [pc, #140]	; (800841c <HAL_RCC_OscConfig+0x788>)
 800838e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008390:	4a22      	ldr	r2, [pc, #136]	; (800841c <HAL_RCC_OscConfig+0x788>)
 8008392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008396:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008398:	4b20      	ldr	r3, [pc, #128]	; (800841c <HAL_RCC_OscConfig+0x788>)
 800839a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839c:	4a1f      	ldr	r2, [pc, #124]	; (800841c <HAL_RCC_OscConfig+0x788>)
 800839e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80083a4:	4b1d      	ldr	r3, [pc, #116]	; (800841c <HAL_RCC_OscConfig+0x788>)
 80083a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a8:	4a1c      	ldr	r2, [pc, #112]	; (800841c <HAL_RCC_OscConfig+0x788>)
 80083aa:	f043 0301 	orr.w	r3, r3, #1
 80083ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083b0:	4b1a      	ldr	r3, [pc, #104]	; (800841c <HAL_RCC_OscConfig+0x788>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a19      	ldr	r2, [pc, #100]	; (800841c <HAL_RCC_OscConfig+0x788>)
 80083b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083bc:	f7fa febc 	bl	8003138 <HAL_GetTick>
 80083c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083c2:	e008      	b.n	80083d6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083c4:	f7fa feb8 	bl	8003138 <HAL_GetTick>
 80083c8:	4602      	mov	r2, r0
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d901      	bls.n	80083d6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e067      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083d6:	4b11      	ldr	r3, [pc, #68]	; (800841c <HAL_RCC_OscConfig+0x788>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0f0      	beq.n	80083c4 <HAL_RCC_OscConfig+0x730>
 80083e2:	e05f      	b.n	80084a4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083e4:	4b0d      	ldr	r3, [pc, #52]	; (800841c <HAL_RCC_OscConfig+0x788>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a0c      	ldr	r2, [pc, #48]	; (800841c <HAL_RCC_OscConfig+0x788>)
 80083ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f0:	f7fa fea2 	bl	8003138 <HAL_GetTick>
 80083f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083f6:	e008      	b.n	800840a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083f8:	f7fa fe9e 	bl	8003138 <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	2b02      	cmp	r3, #2
 8008404:	d901      	bls.n	800840a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e04d      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800840a:	4b04      	ldr	r3, [pc, #16]	; (800841c <HAL_RCC_OscConfig+0x788>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1f0      	bne.n	80083f8 <HAL_RCC_OscConfig+0x764>
 8008416:	e045      	b.n	80084a4 <HAL_RCC_OscConfig+0x810>
 8008418:	58024800 	.word	0x58024800
 800841c:	58024400 	.word	0x58024400
 8008420:	fffffc0c 	.word	0xfffffc0c
 8008424:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008428:	4b21      	ldr	r3, [pc, #132]	; (80084b0 <HAL_RCC_OscConfig+0x81c>)
 800842a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800842e:	4b20      	ldr	r3, [pc, #128]	; (80084b0 <HAL_RCC_OscConfig+0x81c>)
 8008430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008432:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	2b01      	cmp	r3, #1
 800843a:	d031      	beq.n	80084a0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	f003 0203 	and.w	r2, r3, #3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008446:	429a      	cmp	r2, r3
 8008448:	d12a      	bne.n	80084a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	091b      	lsrs	r3, r3, #4
 800844e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008456:	429a      	cmp	r2, r3
 8008458:	d122      	bne.n	80084a0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008464:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008466:	429a      	cmp	r2, r3
 8008468:	d11a      	bne.n	80084a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	0a5b      	lsrs	r3, r3, #9
 800846e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008476:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008478:	429a      	cmp	r2, r3
 800847a:	d111      	bne.n	80084a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	0c1b      	lsrs	r3, r3, #16
 8008480:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008488:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800848a:	429a      	cmp	r2, r3
 800848c:	d108      	bne.n	80084a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	0e1b      	lsrs	r3, r3, #24
 8008492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800849c:	429a      	cmp	r2, r3
 800849e:	d001      	beq.n	80084a4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e000      	b.n	80084a6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3730      	adds	r7, #48	; 0x30
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	58024400 	.word	0x58024400

080084b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e19c      	b.n	8008802 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084c8:	4b8a      	ldr	r3, [pc, #552]	; (80086f4 <HAL_RCC_ClockConfig+0x240>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 030f 	and.w	r3, r3, #15
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d910      	bls.n	80084f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084d6:	4b87      	ldr	r3, [pc, #540]	; (80086f4 <HAL_RCC_ClockConfig+0x240>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f023 020f 	bic.w	r2, r3, #15
 80084de:	4985      	ldr	r1, [pc, #532]	; (80086f4 <HAL_RCC_ClockConfig+0x240>)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084e6:	4b83      	ldr	r3, [pc, #524]	; (80086f4 <HAL_RCC_ClockConfig+0x240>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 030f 	and.w	r3, r3, #15
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d001      	beq.n	80084f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e184      	b.n	8008802 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0304 	and.w	r3, r3, #4
 8008500:	2b00      	cmp	r3, #0
 8008502:	d010      	beq.n	8008526 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	691a      	ldr	r2, [r3, #16]
 8008508:	4b7b      	ldr	r3, [pc, #492]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008510:	429a      	cmp	r2, r3
 8008512:	d908      	bls.n	8008526 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008514:	4b78      	ldr	r3, [pc, #480]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	4975      	ldr	r1, [pc, #468]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 8008522:	4313      	orrs	r3, r2
 8008524:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0308 	and.w	r3, r3, #8
 800852e:	2b00      	cmp	r3, #0
 8008530:	d010      	beq.n	8008554 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	695a      	ldr	r2, [r3, #20]
 8008536:	4b70      	ldr	r3, [pc, #448]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800853e:	429a      	cmp	r2, r3
 8008540:	d908      	bls.n	8008554 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008542:	4b6d      	ldr	r3, [pc, #436]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	496a      	ldr	r1, [pc, #424]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 8008550:	4313      	orrs	r3, r2
 8008552:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0310 	and.w	r3, r3, #16
 800855c:	2b00      	cmp	r3, #0
 800855e:	d010      	beq.n	8008582 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	699a      	ldr	r2, [r3, #24]
 8008564:	4b64      	ldr	r3, [pc, #400]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800856c:	429a      	cmp	r2, r3
 800856e:	d908      	bls.n	8008582 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008570:	4b61      	ldr	r3, [pc, #388]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	495e      	ldr	r1, [pc, #376]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 800857e:	4313      	orrs	r3, r2
 8008580:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0320 	and.w	r3, r3, #32
 800858a:	2b00      	cmp	r3, #0
 800858c:	d010      	beq.n	80085b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	69da      	ldr	r2, [r3, #28]
 8008592:	4b59      	ldr	r3, [pc, #356]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 8008594:	6a1b      	ldr	r3, [r3, #32]
 8008596:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800859a:	429a      	cmp	r2, r3
 800859c:	d908      	bls.n	80085b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800859e:	4b56      	ldr	r3, [pc, #344]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	4953      	ldr	r1, [pc, #332]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d010      	beq.n	80085de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	68da      	ldr	r2, [r3, #12]
 80085c0:	4b4d      	ldr	r3, [pc, #308]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	f003 030f 	and.w	r3, r3, #15
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d908      	bls.n	80085de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085cc:	4b4a      	ldr	r3, [pc, #296]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	f023 020f 	bic.w	r2, r3, #15
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	4947      	ldr	r1, [pc, #284]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d055      	beq.n	8008696 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80085ea:	4b43      	ldr	r3, [pc, #268]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	4940      	ldr	r1, [pc, #256]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	2b02      	cmp	r3, #2
 8008602:	d107      	bne.n	8008614 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008604:	4b3c      	ldr	r3, [pc, #240]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d121      	bne.n	8008654 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e0f6      	b.n	8008802 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	2b03      	cmp	r3, #3
 800861a:	d107      	bne.n	800862c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800861c:	4b36      	ldr	r3, [pc, #216]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008624:	2b00      	cmp	r3, #0
 8008626:	d115      	bne.n	8008654 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e0ea      	b.n	8008802 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d107      	bne.n	8008644 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008634:	4b30      	ldr	r3, [pc, #192]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800863c:	2b00      	cmp	r3, #0
 800863e:	d109      	bne.n	8008654 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e0de      	b.n	8008802 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008644:	4b2c      	ldr	r3, [pc, #176]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0304 	and.w	r3, r3, #4
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e0d6      	b.n	8008802 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008654:	4b28      	ldr	r3, [pc, #160]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	f023 0207 	bic.w	r2, r3, #7
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	4925      	ldr	r1, [pc, #148]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 8008662:	4313      	orrs	r3, r2
 8008664:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008666:	f7fa fd67 	bl	8003138 <HAL_GetTick>
 800866a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800866c:	e00a      	b.n	8008684 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800866e:	f7fa fd63 	bl	8003138 <HAL_GetTick>
 8008672:	4602      	mov	r2, r0
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	f241 3288 	movw	r2, #5000	; 0x1388
 800867c:	4293      	cmp	r3, r2
 800867e:	d901      	bls.n	8008684 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e0be      	b.n	8008802 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008684:	4b1c      	ldr	r3, [pc, #112]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	429a      	cmp	r2, r3
 8008694:	d1eb      	bne.n	800866e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d010      	beq.n	80086c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	68da      	ldr	r2, [r3, #12]
 80086a6:	4b14      	ldr	r3, [pc, #80]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	f003 030f 	and.w	r3, r3, #15
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d208      	bcs.n	80086c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086b2:	4b11      	ldr	r3, [pc, #68]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	f023 020f 	bic.w	r2, r3, #15
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	490e      	ldr	r1, [pc, #56]	; (80086f8 <HAL_RCC_ClockConfig+0x244>)
 80086c0:	4313      	orrs	r3, r2
 80086c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80086c4:	4b0b      	ldr	r3, [pc, #44]	; (80086f4 <HAL_RCC_ClockConfig+0x240>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 030f 	and.w	r3, r3, #15
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d214      	bcs.n	80086fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086d2:	4b08      	ldr	r3, [pc, #32]	; (80086f4 <HAL_RCC_ClockConfig+0x240>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f023 020f 	bic.w	r2, r3, #15
 80086da:	4906      	ldr	r1, [pc, #24]	; (80086f4 <HAL_RCC_ClockConfig+0x240>)
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	4313      	orrs	r3, r2
 80086e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086e2:	4b04      	ldr	r3, [pc, #16]	; (80086f4 <HAL_RCC_ClockConfig+0x240>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 030f 	and.w	r3, r3, #15
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d005      	beq.n	80086fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e086      	b.n	8008802 <HAL_RCC_ClockConfig+0x34e>
 80086f4:	52002000 	.word	0x52002000
 80086f8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 0304 	and.w	r3, r3, #4
 8008704:	2b00      	cmp	r3, #0
 8008706:	d010      	beq.n	800872a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	691a      	ldr	r2, [r3, #16]
 800870c:	4b3f      	ldr	r3, [pc, #252]	; (800880c <HAL_RCC_ClockConfig+0x358>)
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008714:	429a      	cmp	r2, r3
 8008716:	d208      	bcs.n	800872a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008718:	4b3c      	ldr	r3, [pc, #240]	; (800880c <HAL_RCC_ClockConfig+0x358>)
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	4939      	ldr	r1, [pc, #228]	; (800880c <HAL_RCC_ClockConfig+0x358>)
 8008726:	4313      	orrs	r3, r2
 8008728:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0308 	and.w	r3, r3, #8
 8008732:	2b00      	cmp	r3, #0
 8008734:	d010      	beq.n	8008758 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	695a      	ldr	r2, [r3, #20]
 800873a:	4b34      	ldr	r3, [pc, #208]	; (800880c <HAL_RCC_ClockConfig+0x358>)
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008742:	429a      	cmp	r2, r3
 8008744:	d208      	bcs.n	8008758 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008746:	4b31      	ldr	r3, [pc, #196]	; (800880c <HAL_RCC_ClockConfig+0x358>)
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	492e      	ldr	r1, [pc, #184]	; (800880c <HAL_RCC_ClockConfig+0x358>)
 8008754:	4313      	orrs	r3, r2
 8008756:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0310 	and.w	r3, r3, #16
 8008760:	2b00      	cmp	r3, #0
 8008762:	d010      	beq.n	8008786 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	699a      	ldr	r2, [r3, #24]
 8008768:	4b28      	ldr	r3, [pc, #160]	; (800880c <HAL_RCC_ClockConfig+0x358>)
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008770:	429a      	cmp	r2, r3
 8008772:	d208      	bcs.n	8008786 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008774:	4b25      	ldr	r3, [pc, #148]	; (800880c <HAL_RCC_ClockConfig+0x358>)
 8008776:	69db      	ldr	r3, [r3, #28]
 8008778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	4922      	ldr	r1, [pc, #136]	; (800880c <HAL_RCC_ClockConfig+0x358>)
 8008782:	4313      	orrs	r3, r2
 8008784:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0320 	and.w	r3, r3, #32
 800878e:	2b00      	cmp	r3, #0
 8008790:	d010      	beq.n	80087b4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	69da      	ldr	r2, [r3, #28]
 8008796:	4b1d      	ldr	r3, [pc, #116]	; (800880c <HAL_RCC_ClockConfig+0x358>)
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800879e:	429a      	cmp	r2, r3
 80087a0:	d208      	bcs.n	80087b4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80087a2:	4b1a      	ldr	r3, [pc, #104]	; (800880c <HAL_RCC_ClockConfig+0x358>)
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	69db      	ldr	r3, [r3, #28]
 80087ae:	4917      	ldr	r1, [pc, #92]	; (800880c <HAL_RCC_ClockConfig+0x358>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80087b4:	f000 f89e 	bl	80088f4 <HAL_RCC_GetSysClockFreq>
 80087b8:	4601      	mov	r1, r0
 80087ba:	4b14      	ldr	r3, [pc, #80]	; (800880c <HAL_RCC_ClockConfig+0x358>)
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	0a1b      	lsrs	r3, r3, #8
 80087c0:	f003 030f 	and.w	r3, r3, #15
 80087c4:	4a12      	ldr	r2, [pc, #72]	; (8008810 <HAL_RCC_ClockConfig+0x35c>)
 80087c6:	5cd3      	ldrb	r3, [r2, r3]
 80087c8:	f003 031f 	and.w	r3, r3, #31
 80087cc:	fa21 f303 	lsr.w	r3, r1, r3
 80087d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80087d2:	4b0e      	ldr	r3, [pc, #56]	; (800880c <HAL_RCC_ClockConfig+0x358>)
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	f003 030f 	and.w	r3, r3, #15
 80087da:	4a0d      	ldr	r2, [pc, #52]	; (8008810 <HAL_RCC_ClockConfig+0x35c>)
 80087dc:	5cd3      	ldrb	r3, [r2, r3]
 80087de:	f003 031f 	and.w	r3, r3, #31
 80087e2:	693a      	ldr	r2, [r7, #16]
 80087e4:	fa22 f303 	lsr.w	r3, r2, r3
 80087e8:	4a0a      	ldr	r2, [pc, #40]	; (8008814 <HAL_RCC_ClockConfig+0x360>)
 80087ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80087ec:	4a0a      	ldr	r2, [pc, #40]	; (8008818 <HAL_RCC_ClockConfig+0x364>)
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80087f2:	4b0a      	ldr	r3, [pc, #40]	; (800881c <HAL_RCC_ClockConfig+0x368>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fa fc54 	bl	80030a4 <HAL_InitTick>
 80087fc:	4603      	mov	r3, r0
 80087fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008800:	7bfb      	ldrb	r3, [r7, #15]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3718      	adds	r7, #24
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	58024400 	.word	0x58024400
 8008810:	0800eb58 	.word	0x0800eb58
 8008814:	2400003c 	.word	0x2400003c
 8008818:	24000038 	.word	0x24000038
 800881c:	24000044 	.word	0x24000044

08008820 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b08c      	sub	sp, #48	; 0x30
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d12a      	bne.n	8008888 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8008832:	4b2d      	ldr	r3, [pc, #180]	; (80088e8 <HAL_RCC_MCOConfig+0xc8>)
 8008834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008838:	4a2b      	ldr	r2, [pc, #172]	; (80088e8 <HAL_RCC_MCOConfig+0xc8>)
 800883a:	f043 0301 	orr.w	r3, r3, #1
 800883e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008842:	4b29      	ldr	r3, [pc, #164]	; (80088e8 <HAL_RCC_MCOConfig+0xc8>)
 8008844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008848:	f003 0301 	and.w	r3, r3, #1
 800884c:	61bb      	str	r3, [r7, #24]
 800884e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008856:	2302      	movs	r3, #2
 8008858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800885a:	2303      	movs	r3, #3
 800885c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800885e:	2300      	movs	r3, #0
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008862:	2300      	movs	r3, #0
 8008864:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008866:	f107 031c 	add.w	r3, r7, #28
 800886a:	4619      	mov	r1, r3
 800886c:	481f      	ldr	r0, [pc, #124]	; (80088ec <HAL_RCC_MCOConfig+0xcc>)
 800886e:	f7fe fbf1 	bl	8007054 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008872:	4b1d      	ldr	r3, [pc, #116]	; (80088e8 <HAL_RCC_MCOConfig+0xc8>)
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800887a:	68b9      	ldr	r1, [r7, #8]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	430b      	orrs	r3, r1
 8008880:	4919      	ldr	r1, [pc, #100]	; (80088e8 <HAL_RCC_MCOConfig+0xc8>)
 8008882:	4313      	orrs	r3, r2
 8008884:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8008886:	e02a      	b.n	80088de <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8008888:	4b17      	ldr	r3, [pc, #92]	; (80088e8 <HAL_RCC_MCOConfig+0xc8>)
 800888a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800888e:	4a16      	ldr	r2, [pc, #88]	; (80088e8 <HAL_RCC_MCOConfig+0xc8>)
 8008890:	f043 0304 	orr.w	r3, r3, #4
 8008894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008898:	4b13      	ldr	r3, [pc, #76]	; (80088e8 <HAL_RCC_MCOConfig+0xc8>)
 800889a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800889e:	f003 0304 	and.w	r3, r3, #4
 80088a2:	617b      	str	r3, [r7, #20]
 80088a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80088a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088ac:	2302      	movs	r3, #2
 80088ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088b0:	2303      	movs	r3, #3
 80088b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b4:	2300      	movs	r3, #0
 80088b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80088b8:	2300      	movs	r3, #0
 80088ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80088bc:	f107 031c 	add.w	r3, r7, #28
 80088c0:	4619      	mov	r1, r3
 80088c2:	480b      	ldr	r0, [pc, #44]	; (80088f0 <HAL_RCC_MCOConfig+0xd0>)
 80088c4:	f7fe fbc6 	bl	8007054 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80088c8:	4b07      	ldr	r3, [pc, #28]	; (80088e8 <HAL_RCC_MCOConfig+0xc8>)
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	01d9      	lsls	r1, r3, #7
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	430b      	orrs	r3, r1
 80088d8:	4903      	ldr	r1, [pc, #12]	; (80088e8 <HAL_RCC_MCOConfig+0xc8>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	610b      	str	r3, [r1, #16]
}
 80088de:	bf00      	nop
 80088e0:	3730      	adds	r7, #48	; 0x30
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	58024400 	.word	0x58024400
 80088ec:	58020000 	.word	0x58020000
 80088f0:	58020800 	.word	0x58020800

080088f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b089      	sub	sp, #36	; 0x24
 80088f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088fa:	4baf      	ldr	r3, [pc, #700]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008902:	2b18      	cmp	r3, #24
 8008904:	f200 814e 	bhi.w	8008ba4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8008908:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <HAL_RCC_GetSysClockFreq+0x1c>)
 800890a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890e:	bf00      	nop
 8008910:	08008975 	.word	0x08008975
 8008914:	08008ba5 	.word	0x08008ba5
 8008918:	08008ba5 	.word	0x08008ba5
 800891c:	08008ba5 	.word	0x08008ba5
 8008920:	08008ba5 	.word	0x08008ba5
 8008924:	08008ba5 	.word	0x08008ba5
 8008928:	08008ba5 	.word	0x08008ba5
 800892c:	08008ba5 	.word	0x08008ba5
 8008930:	0800899b 	.word	0x0800899b
 8008934:	08008ba5 	.word	0x08008ba5
 8008938:	08008ba5 	.word	0x08008ba5
 800893c:	08008ba5 	.word	0x08008ba5
 8008940:	08008ba5 	.word	0x08008ba5
 8008944:	08008ba5 	.word	0x08008ba5
 8008948:	08008ba5 	.word	0x08008ba5
 800894c:	08008ba5 	.word	0x08008ba5
 8008950:	080089a1 	.word	0x080089a1
 8008954:	08008ba5 	.word	0x08008ba5
 8008958:	08008ba5 	.word	0x08008ba5
 800895c:	08008ba5 	.word	0x08008ba5
 8008960:	08008ba5 	.word	0x08008ba5
 8008964:	08008ba5 	.word	0x08008ba5
 8008968:	08008ba5 	.word	0x08008ba5
 800896c:	08008ba5 	.word	0x08008ba5
 8008970:	080089a7 	.word	0x080089a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008974:	4b90      	ldr	r3, [pc, #576]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0320 	and.w	r3, r3, #32
 800897c:	2b00      	cmp	r3, #0
 800897e:	d009      	beq.n	8008994 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008980:	4b8d      	ldr	r3, [pc, #564]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	08db      	lsrs	r3, r3, #3
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	4a8c      	ldr	r2, [pc, #560]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x2c8>)
 800898c:	fa22 f303 	lsr.w	r3, r2, r3
 8008990:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008992:	e10a      	b.n	8008baa <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008994:	4b89      	ldr	r3, [pc, #548]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008996:	61bb      	str	r3, [r7, #24]
    break;
 8008998:	e107      	b.n	8008baa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800899a:	4b89      	ldr	r3, [pc, #548]	; (8008bc0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800899c:	61bb      	str	r3, [r7, #24]
    break;
 800899e:	e104      	b.n	8008baa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80089a0:	4b88      	ldr	r3, [pc, #544]	; (8008bc4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80089a2:	61bb      	str	r3, [r7, #24]
    break;
 80089a4:	e101      	b.n	8008baa <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089a6:	4b84      	ldr	r3, [pc, #528]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80089a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089aa:	f003 0303 	and.w	r3, r3, #3
 80089ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80089b0:	4b81      	ldr	r3, [pc, #516]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80089b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b4:	091b      	lsrs	r3, r3, #4
 80089b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80089bc:	4b7e      	ldr	r3, [pc, #504]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80089be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80089c6:	4b7c      	ldr	r3, [pc, #496]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80089c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ca:	08db      	lsrs	r3, r3, #3
 80089cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	fb02 f303 	mul.w	r3, r2, r3
 80089d6:	ee07 3a90 	vmov	s15, r3
 80089da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f000 80da 	beq.w	8008b9e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d05a      	beq.n	8008aa6 <HAL_RCC_GetSysClockFreq+0x1b2>
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d302      	bcc.n	80089fa <HAL_RCC_GetSysClockFreq+0x106>
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	d078      	beq.n	8008aea <HAL_RCC_GetSysClockFreq+0x1f6>
 80089f8:	e099      	b.n	8008b2e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089fa:	4b6f      	ldr	r3, [pc, #444]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 0320 	and.w	r3, r3, #32
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d02d      	beq.n	8008a62 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a06:	4b6c      	ldr	r3, [pc, #432]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	08db      	lsrs	r3, r3, #3
 8008a0c:	f003 0303 	and.w	r3, r3, #3
 8008a10:	4a6a      	ldr	r2, [pc, #424]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008a12:	fa22 f303 	lsr.w	r3, r2, r3
 8008a16:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	ee07 3a90 	vmov	s15, r3
 8008a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	ee07 3a90 	vmov	s15, r3
 8008a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a30:	4b61      	ldr	r3, [pc, #388]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a38:	ee07 3a90 	vmov	s15, r3
 8008a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a40:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a44:	eddf 5a60 	vldr	s11, [pc, #384]	; 8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008a48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a5c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008a60:	e087      	b.n	8008b72 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	ee07 3a90 	vmov	s15, r3
 8008a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8008bcc <HAL_RCC_GetSysClockFreq+0x2d8>
 8008a70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a74:	4b50      	ldr	r3, [pc, #320]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7c:	ee07 3a90 	vmov	s15, r3
 8008a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a84:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a88:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008a8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aa0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aa4:	e065      	b.n	8008b72 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	ee07 3a90 	vmov	s15, r3
 8008aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8008bd0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8008ab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ab8:	4b3f      	ldr	r3, [pc, #252]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac0:	ee07 3a90 	vmov	s15, r3
 8008ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ac8:	ed97 6a02 	vldr	s12, [r7, #8]
 8008acc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008ad0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ad4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ad8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008adc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ae8:	e043      	b.n	8008b72 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	ee07 3a90 	vmov	s15, r3
 8008af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008bd4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8008af8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008afc:	4b2e      	ldr	r3, [pc, #184]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b04:	ee07 3a90 	vmov	s15, r3
 8008b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b10:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008b14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b2c:	e021      	b.n	8008b72 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	ee07 3a90 	vmov	s15, r3
 8008b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b38:	eddf 6a25 	vldr	s13, [pc, #148]	; 8008bd0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8008b3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b40:	4b1d      	ldr	r3, [pc, #116]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b48:	ee07 3a90 	vmov	s15, r3
 8008b4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b50:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b54:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008b58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b70:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008b72:	4b11      	ldr	r3, [pc, #68]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b76:	0a5b      	lsrs	r3, r3, #9
 8008b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	ee07 3a90 	vmov	s15, r3
 8008b86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b96:	ee17 3a90 	vmov	r3, s15
 8008b9a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008b9c:	e005      	b.n	8008baa <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	61bb      	str	r3, [r7, #24]
    break;
 8008ba2:	e002      	b.n	8008baa <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8008ba4:	4b06      	ldr	r3, [pc, #24]	; (8008bc0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008ba6:	61bb      	str	r3, [r7, #24]
    break;
 8008ba8:	bf00      	nop
  }

  return sysclockfreq;
 8008baa:	69bb      	ldr	r3, [r7, #24]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3724      	adds	r7, #36	; 0x24
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	58024400 	.word	0x58024400
 8008bbc:	03d09000 	.word	0x03d09000
 8008bc0:	003d0900 	.word	0x003d0900
 8008bc4:	007a1200 	.word	0x007a1200
 8008bc8:	46000000 	.word	0x46000000
 8008bcc:	4c742400 	.word	0x4c742400
 8008bd0:	4a742400 	.word	0x4a742400
 8008bd4:	4af42400 	.word	0x4af42400

08008bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008bde:	f7ff fe89 	bl	80088f4 <HAL_RCC_GetSysClockFreq>
 8008be2:	4601      	mov	r1, r0
 8008be4:	4b10      	ldr	r3, [pc, #64]	; (8008c28 <HAL_RCC_GetHCLKFreq+0x50>)
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	0a1b      	lsrs	r3, r3, #8
 8008bea:	f003 030f 	and.w	r3, r3, #15
 8008bee:	4a0f      	ldr	r2, [pc, #60]	; (8008c2c <HAL_RCC_GetHCLKFreq+0x54>)
 8008bf0:	5cd3      	ldrb	r3, [r2, r3]
 8008bf2:	f003 031f 	and.w	r3, r3, #31
 8008bf6:	fa21 f303 	lsr.w	r3, r1, r3
 8008bfa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bfc:	4b0a      	ldr	r3, [pc, #40]	; (8008c28 <HAL_RCC_GetHCLKFreq+0x50>)
 8008bfe:	699b      	ldr	r3, [r3, #24]
 8008c00:	f003 030f 	and.w	r3, r3, #15
 8008c04:	4a09      	ldr	r2, [pc, #36]	; (8008c2c <HAL_RCC_GetHCLKFreq+0x54>)
 8008c06:	5cd3      	ldrb	r3, [r2, r3]
 8008c08:	f003 031f 	and.w	r3, r3, #31
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c12:	4a07      	ldr	r2, [pc, #28]	; (8008c30 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c16:	4a07      	ldr	r2, [pc, #28]	; (8008c34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008c1c:	4b04      	ldr	r3, [pc, #16]	; (8008c30 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	58024400 	.word	0x58024400
 8008c2c:	0800eb58 	.word	0x0800eb58
 8008c30:	2400003c 	.word	0x2400003c
 8008c34:	24000038 	.word	0x24000038

08008c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c3c:	f7ff ffcc 	bl	8008bd8 <HAL_RCC_GetHCLKFreq>
 8008c40:	4601      	mov	r1, r0
 8008c42:	4b06      	ldr	r3, [pc, #24]	; (8008c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c44:	69db      	ldr	r3, [r3, #28]
 8008c46:	091b      	lsrs	r3, r3, #4
 8008c48:	f003 0307 	and.w	r3, r3, #7
 8008c4c:	4a04      	ldr	r2, [pc, #16]	; (8008c60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c4e:	5cd3      	ldrb	r3, [r2, r3]
 8008c50:	f003 031f 	and.w	r3, r3, #31
 8008c54:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	58024400 	.word	0x58024400
 8008c60:	0800eb58 	.word	0x0800eb58

08008c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008c68:	f7ff ffb6 	bl	8008bd8 <HAL_RCC_GetHCLKFreq>
 8008c6c:	4601      	mov	r1, r0
 8008c6e:	4b06      	ldr	r3, [pc, #24]	; (8008c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	0a1b      	lsrs	r3, r3, #8
 8008c74:	f003 0307 	and.w	r3, r3, #7
 8008c78:	4a04      	ldr	r2, [pc, #16]	; (8008c8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c7a:	5cd3      	ldrb	r3, [r2, r3]
 8008c7c:	f003 031f 	and.w	r3, r3, #31
 8008c80:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	58024400 	.word	0x58024400
 8008c8c:	0800eb58 	.word	0x0800eb58

08008c90 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c98:	2300      	movs	r3, #0
 8008c9a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d03d      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cb4:	d013      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8008cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cba:	d802      	bhi.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d007      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8008cc0:	e01f      	b.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8008cc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cc6:	d013      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8008cc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ccc:	d01c      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8008cce:	e018      	b.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cd0:	4baf      	ldr	r3, [pc, #700]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd4:	4aae      	ldr	r2, [pc, #696]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008cdc:	e015      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	2102      	movs	r1, #2
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f001 f96f 	bl	8009fc8 <RCCEx_PLL2_Config>
 8008cea:	4603      	mov	r3, r0
 8008cec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008cee:	e00c      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	3324      	adds	r3, #36	; 0x24
 8008cf4:	2102      	movs	r1, #2
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f001 fa18 	bl	800a12c <RCCEx_PLL3_Config>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008d00:	e003      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	75fb      	strb	r3, [r7, #23]
      break;
 8008d06:	e000      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8008d08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d0a:	7dfb      	ldrb	r3, [r7, #23]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d109      	bne.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d10:	4b9f      	ldr	r3, [pc, #636]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d1c:	499c      	ldr	r1, [pc, #624]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	650b      	str	r3, [r1, #80]	; 0x50
 8008d22:	e001      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d24:	7dfb      	ldrb	r3, [r7, #23]
 8008d26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d03d      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d38:	2b04      	cmp	r3, #4
 8008d3a:	d826      	bhi.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8008d3c:	a201      	add	r2, pc, #4	; (adr r2, 8008d44 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8008d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d42:	bf00      	nop
 8008d44:	08008d59 	.word	0x08008d59
 8008d48:	08008d67 	.word	0x08008d67
 8008d4c:	08008d79 	.word	0x08008d79
 8008d50:	08008d91 	.word	0x08008d91
 8008d54:	08008d91 	.word	0x08008d91
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d58:	4b8d      	ldr	r3, [pc, #564]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5c:	4a8c      	ldr	r2, [pc, #560]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d64:	e015      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	3304      	adds	r3, #4
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f001 f92b 	bl	8009fc8 <RCCEx_PLL2_Config>
 8008d72:	4603      	mov	r3, r0
 8008d74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d76:	e00c      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	3324      	adds	r3, #36	; 0x24
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f001 f9d4 	bl	800a12c <RCCEx_PLL3_Config>
 8008d84:	4603      	mov	r3, r0
 8008d86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d88:	e003      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d8e:	e000      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8008d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d92:	7dfb      	ldrb	r3, [r7, #23]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d109      	bne.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d98:	4b7d      	ldr	r3, [pc, #500]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d9c:	f023 0207 	bic.w	r2, r3, #7
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008da4:	497a      	ldr	r1, [pc, #488]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	650b      	str	r3, [r1, #80]	; 0x50
 8008daa:	e001      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dac:	7dfb      	ldrb	r3, [r7, #23]
 8008dae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d03e      	beq.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dc0:	2b80      	cmp	r3, #128	; 0x80
 8008dc2:	d01c      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8008dc4:	2b80      	cmp	r3, #128	; 0x80
 8008dc6:	d804      	bhi.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d008      	beq.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008dcc:	2b40      	cmp	r3, #64	; 0x40
 8008dce:	d00d      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008dd0:	e01e      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008dd2:	2bc0      	cmp	r3, #192	; 0xc0
 8008dd4:	d01f      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dda:	d01e      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008ddc:	e018      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dde:	4b6c      	ldr	r3, [pc, #432]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de2:	4a6b      	ldr	r2, [pc, #428]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008de8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008dea:	e017      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3304      	adds	r3, #4
 8008df0:	2100      	movs	r1, #0
 8008df2:	4618      	mov	r0, r3
 8008df4:	f001 f8e8 	bl	8009fc8 <RCCEx_PLL2_Config>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008dfc:	e00e      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	3324      	adds	r3, #36	; 0x24
 8008e02:	2100      	movs	r1, #0
 8008e04:	4618      	mov	r0, r3
 8008e06:	f001 f991 	bl	800a12c <RCCEx_PLL3_Config>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008e0e:	e005      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	75fb      	strb	r3, [r7, #23]
      break;
 8008e14:	e002      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8008e16:	bf00      	nop
 8008e18:	e000      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8008e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d109      	bne.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008e22:	4b5b      	ldr	r3, [pc, #364]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e26:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2e:	4958      	ldr	r1, [pc, #352]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008e30:	4313      	orrs	r3, r2
 8008e32:	650b      	str	r3, [r1, #80]	; 0x50
 8008e34:	e001      	b.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e36:	7dfb      	ldrb	r3, [r7, #23]
 8008e38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d044      	beq.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e50:	d01f      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008e52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e56:	d805      	bhi.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00a      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008e5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e60:	d00e      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8008e62:	e01f      	b.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8008e64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e68:	d01f      	beq.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8008e6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e6e:	d01e      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008e70:	e018      	b.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e72:	4b47      	ldr	r3, [pc, #284]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e76:	4a46      	ldr	r2, [pc, #280]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e7e:	e017      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	3304      	adds	r3, #4
 8008e84:	2100      	movs	r1, #0
 8008e86:	4618      	mov	r0, r3
 8008e88:	f001 f89e 	bl	8009fc8 <RCCEx_PLL2_Config>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008e90:	e00e      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	3324      	adds	r3, #36	; 0x24
 8008e96:	2100      	movs	r1, #0
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f001 f947 	bl	800a12c <RCCEx_PLL3_Config>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ea2:	e005      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ea8:	e002      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8008eaa:	bf00      	nop
 8008eac:	e000      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8008eae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10a      	bne.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008eb6:	4b36      	ldr	r3, [pc, #216]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eba:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ec4:	4932      	ldr	r1, [pc, #200]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	658b      	str	r3, [r1, #88]	; 0x58
 8008eca:	e001      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ecc:	7dfb      	ldrb	r3, [r7, #23]
 8008ece:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d044      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008ee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ee6:	d01f      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008ee8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008eec:	d805      	bhi.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00a      	beq.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8008ef2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ef6:	d00e      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008ef8:	e01f      	b.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8008efa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008efe:	d01f      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008f00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f04:	d01e      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008f06:	e018      	b.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f08:	4b21      	ldr	r3, [pc, #132]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0c:	4a20      	ldr	r2, [pc, #128]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f14:	e017      	b.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	3304      	adds	r3, #4
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f001 f853 	bl	8009fc8 <RCCEx_PLL2_Config>
 8008f22:	4603      	mov	r3, r0
 8008f24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008f26:	e00e      	b.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3324      	adds	r3, #36	; 0x24
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f001 f8fc 	bl	800a12c <RCCEx_PLL3_Config>
 8008f34:	4603      	mov	r3, r0
 8008f36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f38:	e005      	b.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f3e:	e002      	b.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8008f40:	bf00      	nop
 8008f42:	e000      	b.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8008f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10a      	bne.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008f4c:	4b10      	ldr	r3, [pc, #64]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f50:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f5a:	490d      	ldr	r1, [pc, #52]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	658b      	str	r3, [r1, #88]	; 0x58
 8008f60:	e001      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
 8008f64:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d035      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f76:	2b10      	cmp	r3, #16
 8008f78:	d00c      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8008f7a:	2b10      	cmp	r3, #16
 8008f7c:	d802      	bhi.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d01b      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8008f82:	e017      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008f84:	2b20      	cmp	r3, #32
 8008f86:	d00c      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8008f88:	2b30      	cmp	r3, #48	; 0x30
 8008f8a:	d018      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8008f8c:	e012      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008f8e:	bf00      	nop
 8008f90:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f94:	4baf      	ldr	r3, [pc, #700]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f98:	4aae      	ldr	r2, [pc, #696]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008fa0:	e00e      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	2102      	movs	r1, #2
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f001 f80d 	bl	8009fc8 <RCCEx_PLL2_Config>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008fb2:	e005      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8008fb8:	e002      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008fba:	bf00      	nop
 8008fbc:	e000      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fc0:	7dfb      	ldrb	r3, [r7, #23]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d109      	bne.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008fc6:	4ba3      	ldr	r3, [pc, #652]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fd2:	49a0      	ldr	r1, [pc, #640]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008fd8:	e001      	b.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fda:	7dfb      	ldrb	r3, [r7, #23]
 8008fdc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d042      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ff2:	d01f      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8008ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ff8:	d805      	bhi.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00a      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8008ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009002:	d00e      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8009004:	e01f      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8009006:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800900a:	d01f      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800900c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009010:	d01e      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8009012:	e018      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009014:	4b8f      	ldr	r3, [pc, #572]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009018:	4a8e      	ldr	r2, [pc, #568]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800901a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800901e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009020:	e017      	b.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	3304      	adds	r3, #4
 8009026:	2100      	movs	r1, #0
 8009028:	4618      	mov	r0, r3
 800902a:	f000 ffcd 	bl	8009fc8 <RCCEx_PLL2_Config>
 800902e:	4603      	mov	r3, r0
 8009030:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009032:	e00e      	b.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3324      	adds	r3, #36	; 0x24
 8009038:	2100      	movs	r1, #0
 800903a:	4618      	mov	r0, r3
 800903c:	f001 f876 	bl	800a12c <RCCEx_PLL3_Config>
 8009040:	4603      	mov	r3, r0
 8009042:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009044:	e005      	b.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	75fb      	strb	r3, [r7, #23]
      break;
 800904a:	e002      	b.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800904c:	bf00      	nop
 800904e:	e000      	b.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009052:	7dfb      	ldrb	r3, [r7, #23]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d109      	bne.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009058:	4b7e      	ldr	r3, [pc, #504]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800905a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800905c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009064:	497b      	ldr	r1, [pc, #492]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009066:	4313      	orrs	r3, r2
 8009068:	650b      	str	r3, [r1, #80]	; 0x50
 800906a:	e001      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800906c:	7dfb      	ldrb	r3, [r7, #23]
 800906e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d042      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009084:	d01b      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800908a:	d805      	bhi.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800908c:	2b00      	cmp	r3, #0
 800908e:	d022      	beq.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8009090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009094:	d00a      	beq.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8009096:	e01b      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8009098:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800909c:	d01d      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800909e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80090a2:	d01c      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80090a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80090a8:	d01b      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80090aa:	e011      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	3304      	adds	r3, #4
 80090b0:	2101      	movs	r1, #1
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 ff88 	bl	8009fc8 <RCCEx_PLL2_Config>
 80090b8:	4603      	mov	r3, r0
 80090ba:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80090bc:	e012      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	3324      	adds	r3, #36	; 0x24
 80090c2:	2101      	movs	r1, #1
 80090c4:	4618      	mov	r0, r3
 80090c6:	f001 f831 	bl	800a12c <RCCEx_PLL3_Config>
 80090ca:	4603      	mov	r3, r0
 80090cc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80090ce:	e009      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	75fb      	strb	r3, [r7, #23]
      break;
 80090d4:	e006      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80090d6:	bf00      	nop
 80090d8:	e004      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80090da:	bf00      	nop
 80090dc:	e002      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80090de:	bf00      	nop
 80090e0:	e000      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80090e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090e4:	7dfb      	ldrb	r3, [r7, #23]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d109      	bne.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80090ea:	4b5a      	ldr	r3, [pc, #360]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80090ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ee:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090f6:	4957      	ldr	r1, [pc, #348]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80090f8:	4313      	orrs	r3, r2
 80090fa:	650b      	str	r3, [r1, #80]	; 0x50
 80090fc:	e001      	b.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800910a:	2b00      	cmp	r3, #0
 800910c:	d044      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009118:	d01b      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800911a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800911e:	d805      	bhi.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8009120:	2b00      	cmp	r3, #0
 8009122:	d022      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009124:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009128:	d00a      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800912a:	e01b      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800912c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009130:	d01d      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009132:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009136:	d01c      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8009138:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800913c:	d01b      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800913e:	e011      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	3304      	adds	r3, #4
 8009144:	2101      	movs	r1, #1
 8009146:	4618      	mov	r0, r3
 8009148:	f000 ff3e 	bl	8009fc8 <RCCEx_PLL2_Config>
 800914c:	4603      	mov	r3, r0
 800914e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009150:	e012      	b.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	3324      	adds	r3, #36	; 0x24
 8009156:	2101      	movs	r1, #1
 8009158:	4618      	mov	r0, r3
 800915a:	f000 ffe7 	bl	800a12c <RCCEx_PLL3_Config>
 800915e:	4603      	mov	r3, r0
 8009160:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009162:	e009      	b.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	75fb      	strb	r3, [r7, #23]
      break;
 8009168:	e006      	b.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800916a:	bf00      	nop
 800916c:	e004      	b.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800916e:	bf00      	nop
 8009170:	e002      	b.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009172:	bf00      	nop
 8009174:	e000      	b.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009176:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009178:	7dfb      	ldrb	r3, [r7, #23]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10a      	bne.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800917e:	4b35      	ldr	r3, [pc, #212]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009182:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800918c:	4931      	ldr	r1, [pc, #196]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800918e:	4313      	orrs	r3, r2
 8009190:	658b      	str	r3, [r1, #88]	; 0x58
 8009192:	e001      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009194:	7dfb      	ldrb	r3, [r7, #23]
 8009196:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d02d      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091ac:	d005      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80091ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091b2:	d009      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d013      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80091b8:	e00f      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091ba:	4b26      	ldr	r3, [pc, #152]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80091bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091be:	4a25      	ldr	r2, [pc, #148]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80091c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80091c6:	e00c      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	3304      	adds	r3, #4
 80091cc:	2101      	movs	r1, #1
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fefa 	bl	8009fc8 <RCCEx_PLL2_Config>
 80091d4:	4603      	mov	r3, r0
 80091d6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80091d8:	e003      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	75fb      	strb	r3, [r7, #23]
      break;
 80091de:	e000      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80091e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091e2:	7dfb      	ldrb	r3, [r7, #23]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d109      	bne.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80091e8:	4b1a      	ldr	r3, [pc, #104]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80091ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091f4:	4917      	ldr	r1, [pc, #92]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80091f6:	4313      	orrs	r3, r2
 80091f8:	650b      	str	r3, [r1, #80]	; 0x50
 80091fa:	e001      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091fc:	7dfb      	ldrb	r3, [r7, #23]
 80091fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d035      	beq.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009210:	2b03      	cmp	r3, #3
 8009212:	d81b      	bhi.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009214:	a201      	add	r2, pc, #4	; (adr r2, 800921c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8009216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921a:	bf00      	nop
 800921c:	08009259 	.word	0x08009259
 8009220:	0800922d 	.word	0x0800922d
 8009224:	0800923b 	.word	0x0800923b
 8009228:	08009259 	.word	0x08009259
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800922c:	4b09      	ldr	r3, [pc, #36]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009230:	4a08      	ldr	r2, [pc, #32]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009236:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009238:	e00f      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	3304      	adds	r3, #4
 800923e:	2102      	movs	r1, #2
 8009240:	4618      	mov	r0, r3
 8009242:	f000 fec1 	bl	8009fc8 <RCCEx_PLL2_Config>
 8009246:	4603      	mov	r3, r0
 8009248:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800924a:	e006      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	75fb      	strb	r3, [r7, #23]
      break;
 8009250:	e003      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8009252:	bf00      	nop
 8009254:	58024400 	.word	0x58024400
      break;
 8009258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800925a:	7dfb      	ldrb	r3, [r7, #23]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d109      	bne.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009260:	4bba      	ldr	r3, [pc, #744]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009264:	f023 0203 	bic.w	r2, r3, #3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800926c:	49b7      	ldr	r1, [pc, #732]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800926e:	4313      	orrs	r3, r2
 8009270:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009272:	e001      	b.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009274:	7dfb      	ldrb	r3, [r7, #23]
 8009276:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 8086 	beq.w	8009392 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009286:	4bb2      	ldr	r3, [pc, #712]	; (8009550 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4ab1      	ldr	r2, [pc, #708]	; (8009550 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800928c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009290:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009292:	f7f9 ff51 	bl	8003138 <HAL_GetTick>
 8009296:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009298:	e009      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800929a:	f7f9 ff4d 	bl	8003138 <HAL_GetTick>
 800929e:	4602      	mov	r2, r0
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	2b64      	cmp	r3, #100	; 0x64
 80092a6:	d902      	bls.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80092a8:	2303      	movs	r3, #3
 80092aa:	75fb      	strb	r3, [r7, #23]
        break;
 80092ac:	e005      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092ae:	4ba8      	ldr	r3, [pc, #672]	; (8009550 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d0ef      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d166      	bne.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80092c0:	4ba2      	ldr	r3, [pc, #648]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80092c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80092ca:	4053      	eors	r3, r2
 80092cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d013      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80092d4:	4b9d      	ldr	r3, [pc, #628]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80092d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092dc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80092de:	4b9b      	ldr	r3, [pc, #620]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80092e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e2:	4a9a      	ldr	r2, [pc, #616]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80092e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092e8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80092ea:	4b98      	ldr	r3, [pc, #608]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80092ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ee:	4a97      	ldr	r2, [pc, #604]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80092f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092f4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80092f6:	4a95      	ldr	r2, [pc, #596]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009306:	d115      	bne.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009308:	f7f9 ff16 	bl	8003138 <HAL_GetTick>
 800930c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800930e:	e00b      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009310:	f7f9 ff12 	bl	8003138 <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	f241 3288 	movw	r2, #5000	; 0x1388
 800931e:	4293      	cmp	r3, r2
 8009320:	d902      	bls.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	75fb      	strb	r3, [r7, #23]
            break;
 8009326:	e005      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009328:	4b88      	ldr	r3, [pc, #544]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800932a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800932c:	f003 0302 	and.w	r3, r3, #2
 8009330:	2b00      	cmp	r3, #0
 8009332:	d0ed      	beq.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8009334:	7dfb      	ldrb	r3, [r7, #23]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d126      	bne.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009344:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009348:	d10d      	bne.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800934a:	4b80      	ldr	r3, [pc, #512]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009358:	0919      	lsrs	r1, r3, #4
 800935a:	4b7e      	ldr	r3, [pc, #504]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800935c:	400b      	ands	r3, r1
 800935e:	497b      	ldr	r1, [pc, #492]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009360:	4313      	orrs	r3, r2
 8009362:	610b      	str	r3, [r1, #16]
 8009364:	e005      	b.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8009366:	4b79      	ldr	r3, [pc, #484]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	4a78      	ldr	r2, [pc, #480]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800936c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009370:	6113      	str	r3, [r2, #16]
 8009372:	4b76      	ldr	r3, [pc, #472]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009374:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800937c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009380:	4972      	ldr	r1, [pc, #456]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009382:	4313      	orrs	r3, r2
 8009384:	670b      	str	r3, [r1, #112]	; 0x70
 8009386:	e004      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009388:	7dfb      	ldrb	r3, [r7, #23]
 800938a:	75bb      	strb	r3, [r7, #22]
 800938c:	e001      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800938e:	7dfb      	ldrb	r3, [r7, #23]
 8009390:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0301 	and.w	r3, r3, #1
 800939a:	2b00      	cmp	r3, #0
 800939c:	d07d      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093a2:	2b28      	cmp	r3, #40	; 0x28
 80093a4:	d866      	bhi.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80093a6:	a201      	add	r2, pc, #4	; (adr r2, 80093ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80093a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ac:	0800947b 	.word	0x0800947b
 80093b0:	08009475 	.word	0x08009475
 80093b4:	08009475 	.word	0x08009475
 80093b8:	08009475 	.word	0x08009475
 80093bc:	08009475 	.word	0x08009475
 80093c0:	08009475 	.word	0x08009475
 80093c4:	08009475 	.word	0x08009475
 80093c8:	08009475 	.word	0x08009475
 80093cc:	08009451 	.word	0x08009451
 80093d0:	08009475 	.word	0x08009475
 80093d4:	08009475 	.word	0x08009475
 80093d8:	08009475 	.word	0x08009475
 80093dc:	08009475 	.word	0x08009475
 80093e0:	08009475 	.word	0x08009475
 80093e4:	08009475 	.word	0x08009475
 80093e8:	08009475 	.word	0x08009475
 80093ec:	08009463 	.word	0x08009463
 80093f0:	08009475 	.word	0x08009475
 80093f4:	08009475 	.word	0x08009475
 80093f8:	08009475 	.word	0x08009475
 80093fc:	08009475 	.word	0x08009475
 8009400:	08009475 	.word	0x08009475
 8009404:	08009475 	.word	0x08009475
 8009408:	08009475 	.word	0x08009475
 800940c:	0800947b 	.word	0x0800947b
 8009410:	08009475 	.word	0x08009475
 8009414:	08009475 	.word	0x08009475
 8009418:	08009475 	.word	0x08009475
 800941c:	08009475 	.word	0x08009475
 8009420:	08009475 	.word	0x08009475
 8009424:	08009475 	.word	0x08009475
 8009428:	08009475 	.word	0x08009475
 800942c:	0800947b 	.word	0x0800947b
 8009430:	08009475 	.word	0x08009475
 8009434:	08009475 	.word	0x08009475
 8009438:	08009475 	.word	0x08009475
 800943c:	08009475 	.word	0x08009475
 8009440:	08009475 	.word	0x08009475
 8009444:	08009475 	.word	0x08009475
 8009448:	08009475 	.word	0x08009475
 800944c:	0800947b 	.word	0x0800947b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	3304      	adds	r3, #4
 8009454:	2101      	movs	r1, #1
 8009456:	4618      	mov	r0, r3
 8009458:	f000 fdb6 	bl	8009fc8 <RCCEx_PLL2_Config>
 800945c:	4603      	mov	r3, r0
 800945e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009460:	e00c      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	3324      	adds	r3, #36	; 0x24
 8009466:	2101      	movs	r1, #1
 8009468:	4618      	mov	r0, r3
 800946a:	f000 fe5f 	bl	800a12c <RCCEx_PLL3_Config>
 800946e:	4603      	mov	r3, r0
 8009470:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009472:	e003      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	75fb      	strb	r3, [r7, #23]
      break;
 8009478:	e000      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800947a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800947c:	7dfb      	ldrb	r3, [r7, #23]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d109      	bne.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009482:	4b32      	ldr	r3, [pc, #200]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009486:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800948e:	492f      	ldr	r1, [pc, #188]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009490:	4313      	orrs	r3, r2
 8009492:	654b      	str	r3, [r1, #84]	; 0x54
 8009494:	e001      	b.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009496:	7dfb      	ldrb	r3, [r7, #23]
 8009498:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0302 	and.w	r3, r3, #2
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d037      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094aa:	2b05      	cmp	r3, #5
 80094ac:	d820      	bhi.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80094ae:	a201      	add	r2, pc, #4	; (adr r2, 80094b4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80094b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b4:	080094f7 	.word	0x080094f7
 80094b8:	080094cd 	.word	0x080094cd
 80094bc:	080094df 	.word	0x080094df
 80094c0:	080094f7 	.word	0x080094f7
 80094c4:	080094f7 	.word	0x080094f7
 80094c8:	080094f7 	.word	0x080094f7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	3304      	adds	r3, #4
 80094d0:	2101      	movs	r1, #1
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 fd78 	bl	8009fc8 <RCCEx_PLL2_Config>
 80094d8:	4603      	mov	r3, r0
 80094da:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80094dc:	e00c      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	3324      	adds	r3, #36	; 0x24
 80094e2:	2101      	movs	r1, #1
 80094e4:	4618      	mov	r0, r3
 80094e6:	f000 fe21 	bl	800a12c <RCCEx_PLL3_Config>
 80094ea:	4603      	mov	r3, r0
 80094ec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80094ee:	e003      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	75fb      	strb	r3, [r7, #23]
      break;
 80094f4:	e000      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80094f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094f8:	7dfb      	ldrb	r3, [r7, #23]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d109      	bne.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80094fe:	4b13      	ldr	r3, [pc, #76]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009502:	f023 0207 	bic.w	r2, r3, #7
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800950a:	4910      	ldr	r1, [pc, #64]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800950c:	4313      	orrs	r3, r2
 800950e:	654b      	str	r3, [r1, #84]	; 0x54
 8009510:	e001      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009512:	7dfb      	ldrb	r3, [r7, #23]
 8009514:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 0304 	and.w	r3, r3, #4
 800951e:	2b00      	cmp	r3, #0
 8009520:	d040      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009528:	2b05      	cmp	r3, #5
 800952a:	d827      	bhi.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800952c:	a201      	add	r2, pc, #4	; (adr r2, 8009534 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800952e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009532:	bf00      	nop
 8009534:	08009583 	.word	0x08009583
 8009538:	08009559 	.word	0x08009559
 800953c:	0800956b 	.word	0x0800956b
 8009540:	08009583 	.word	0x08009583
 8009544:	08009583 	.word	0x08009583
 8009548:	08009583 	.word	0x08009583
 800954c:	58024400 	.word	0x58024400
 8009550:	58024800 	.word	0x58024800
 8009554:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	3304      	adds	r3, #4
 800955c:	2101      	movs	r1, #1
 800955e:	4618      	mov	r0, r3
 8009560:	f000 fd32 	bl	8009fc8 <RCCEx_PLL2_Config>
 8009564:	4603      	mov	r3, r0
 8009566:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009568:	e00c      	b.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	3324      	adds	r3, #36	; 0x24
 800956e:	2101      	movs	r1, #1
 8009570:	4618      	mov	r0, r3
 8009572:	f000 fddb 	bl	800a12c <RCCEx_PLL3_Config>
 8009576:	4603      	mov	r3, r0
 8009578:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800957a:	e003      	b.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	75fb      	strb	r3, [r7, #23]
      break;
 8009580:	e000      	b.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8009582:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009584:	7dfb      	ldrb	r3, [r7, #23]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10a      	bne.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800958a:	4bb2      	ldr	r3, [pc, #712]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800958c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800958e:	f023 0207 	bic.w	r2, r3, #7
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009598:	49ae      	ldr	r1, [pc, #696]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800959a:	4313      	orrs	r3, r2
 800959c:	658b      	str	r3, [r1, #88]	; 0x58
 800959e:	e001      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a0:	7dfb      	ldrb	r3, [r7, #23]
 80095a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 0320 	and.w	r3, r3, #32
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d044      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095ba:	d01b      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80095bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095c0:	d805      	bhi.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d022      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80095c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095ca:	d00a      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80095cc:	e01b      	b.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80095ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095d2:	d01d      	beq.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80095d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095d8:	d01c      	beq.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80095da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095de:	d01b      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80095e0:	e011      	b.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	3304      	adds	r3, #4
 80095e6:	2100      	movs	r1, #0
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 fced 	bl	8009fc8 <RCCEx_PLL2_Config>
 80095ee:	4603      	mov	r3, r0
 80095f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80095f2:	e012      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3324      	adds	r3, #36	; 0x24
 80095f8:	2102      	movs	r1, #2
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 fd96 	bl	800a12c <RCCEx_PLL3_Config>
 8009600:	4603      	mov	r3, r0
 8009602:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009604:	e009      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	75fb      	strb	r3, [r7, #23]
      break;
 800960a:	e006      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800960c:	bf00      	nop
 800960e:	e004      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009610:	bf00      	nop
 8009612:	e002      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009614:	bf00      	nop
 8009616:	e000      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800961a:	7dfb      	ldrb	r3, [r7, #23]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10a      	bne.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009620:	4b8c      	ldr	r3, [pc, #560]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009624:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800962e:	4989      	ldr	r1, [pc, #548]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009630:	4313      	orrs	r3, r2
 8009632:	654b      	str	r3, [r1, #84]	; 0x54
 8009634:	e001      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009636:	7dfb      	ldrb	r3, [r7, #23]
 8009638:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009642:	2b00      	cmp	r3, #0
 8009644:	d044      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800964c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009650:	d01b      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8009652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009656:	d805      	bhi.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8009658:	2b00      	cmp	r3, #0
 800965a:	d022      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800965c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009660:	d00a      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8009662:	e01b      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8009664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009668:	d01d      	beq.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800966a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800966e:	d01c      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8009670:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009674:	d01b      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8009676:	e011      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	3304      	adds	r3, #4
 800967c:	2100      	movs	r1, #0
 800967e:	4618      	mov	r0, r3
 8009680:	f000 fca2 	bl	8009fc8 <RCCEx_PLL2_Config>
 8009684:	4603      	mov	r3, r0
 8009686:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009688:	e012      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	3324      	adds	r3, #36	; 0x24
 800968e:	2102      	movs	r1, #2
 8009690:	4618      	mov	r0, r3
 8009692:	f000 fd4b 	bl	800a12c <RCCEx_PLL3_Config>
 8009696:	4603      	mov	r3, r0
 8009698:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800969a:	e009      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	75fb      	strb	r3, [r7, #23]
      break;
 80096a0:	e006      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80096a2:	bf00      	nop
 80096a4:	e004      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80096a6:	bf00      	nop
 80096a8:	e002      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80096aa:	bf00      	nop
 80096ac:	e000      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80096ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096b0:	7dfb      	ldrb	r3, [r7, #23]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10a      	bne.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80096b6:	4b67      	ldr	r3, [pc, #412]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80096b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096c4:	4963      	ldr	r1, [pc, #396]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80096c6:	4313      	orrs	r3, r2
 80096c8:	658b      	str	r3, [r1, #88]	; 0x58
 80096ca:	e001      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096cc:	7dfb      	ldrb	r3, [r7, #23]
 80096ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d044      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80096e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096e6:	d01b      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80096e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096ec:	d805      	bhi.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d022      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80096f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096f6:	d00a      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80096f8:	e01b      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80096fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096fe:	d01d      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009700:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009704:	d01c      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8009706:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800970a:	d01b      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800970c:	e011      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	3304      	adds	r3, #4
 8009712:	2100      	movs	r1, #0
 8009714:	4618      	mov	r0, r3
 8009716:	f000 fc57 	bl	8009fc8 <RCCEx_PLL2_Config>
 800971a:	4603      	mov	r3, r0
 800971c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800971e:	e012      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	3324      	adds	r3, #36	; 0x24
 8009724:	2102      	movs	r1, #2
 8009726:	4618      	mov	r0, r3
 8009728:	f000 fd00 	bl	800a12c <RCCEx_PLL3_Config>
 800972c:	4603      	mov	r3, r0
 800972e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009730:	e009      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	75fb      	strb	r3, [r7, #23]
      break;
 8009736:	e006      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009738:	bf00      	nop
 800973a:	e004      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800973c:	bf00      	nop
 800973e:	e002      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009740:	bf00      	nop
 8009742:	e000      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10a      	bne.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800974c:	4b41      	ldr	r3, [pc, #260]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800974e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009750:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800975a:	493e      	ldr	r1, [pc, #248]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800975c:	4313      	orrs	r3, r2
 800975e:	658b      	str	r3, [r1, #88]	; 0x58
 8009760:	e001      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 0308 	and.w	r3, r3, #8
 800976e:	2b00      	cmp	r3, #0
 8009770:	d01a      	beq.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800977c:	d10a      	bne.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	3324      	adds	r3, #36	; 0x24
 8009782:	2102      	movs	r1, #2
 8009784:	4618      	mov	r0, r3
 8009786:	f000 fcd1 	bl	800a12c <RCCEx_PLL3_Config>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d001      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009794:	4b2f      	ldr	r3, [pc, #188]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009798:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097a2:	492c      	ldr	r1, [pc, #176]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80097a4:	4313      	orrs	r3, r2
 80097a6:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 0310 	and.w	r3, r3, #16
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d01a      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097be:	d10a      	bne.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	3324      	adds	r3, #36	; 0x24
 80097c4:	2102      	movs	r1, #2
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 fcb0 	bl	800a12c <RCCEx_PLL3_Config>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80097d6:	4b1f      	ldr	r3, [pc, #124]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80097d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097e4:	491b      	ldr	r1, [pc, #108]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80097e6:	4313      	orrs	r3, r2
 80097e8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d032      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80097fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009800:	d00d      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8009802:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009806:	d016      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8009808:	2b00      	cmp	r3, #0
 800980a:	d111      	bne.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	3304      	adds	r3, #4
 8009810:	2100      	movs	r1, #0
 8009812:	4618      	mov	r0, r3
 8009814:	f000 fbd8 	bl	8009fc8 <RCCEx_PLL2_Config>
 8009818:	4603      	mov	r3, r0
 800981a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800981c:	e00c      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	3324      	adds	r3, #36	; 0x24
 8009822:	2102      	movs	r1, #2
 8009824:	4618      	mov	r0, r3
 8009826:	f000 fc81 	bl	800a12c <RCCEx_PLL3_Config>
 800982a:	4603      	mov	r3, r0
 800982c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800982e:	e003      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	75fb      	strb	r3, [r7, #23]
      break;
 8009834:	e000      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8009836:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009838:	7dfb      	ldrb	r3, [r7, #23]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d10c      	bne.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800983e:	4b05      	ldr	r3, [pc, #20]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009842:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800984c:	4901      	ldr	r1, [pc, #4]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800984e:	4313      	orrs	r3, r2
 8009850:	658b      	str	r3, [r1, #88]	; 0x58
 8009852:	e003      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8009854:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009858:	7dfb      	ldrb	r3, [r7, #23]
 800985a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d02f      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800986e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009872:	d00c      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009874:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009878:	d015      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800987a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800987e:	d10f      	bne.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009880:	4b79      	ldr	r3, [pc, #484]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009884:	4a78      	ldr	r2, [pc, #480]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800988a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800988c:	e00c      	b.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	3324      	adds	r3, #36	; 0x24
 8009892:	2101      	movs	r1, #1
 8009894:	4618      	mov	r0, r3
 8009896:	f000 fc49 	bl	800a12c <RCCEx_PLL3_Config>
 800989a:	4603      	mov	r3, r0
 800989c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800989e:	e003      	b.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	75fb      	strb	r3, [r7, #23]
      break;
 80098a4:	e000      	b.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80098a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098a8:	7dfb      	ldrb	r3, [r7, #23]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d10a      	bne.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80098ae:	4b6e      	ldr	r3, [pc, #440]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80098b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098bc:	496a      	ldr	r1, [pc, #424]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80098be:	4313      	orrs	r3, r2
 80098c0:	654b      	str	r3, [r1, #84]	; 0x54
 80098c2:	e001      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098c4:	7dfb      	ldrb	r3, [r7, #23]
 80098c6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d029      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d003      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80098dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098e0:	d007      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80098e2:	e00f      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098e4:	4b60      	ldr	r3, [pc, #384]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80098e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e8:	4a5f      	ldr	r2, [pc, #380]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80098ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80098f0:	e00b      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	3304      	adds	r3, #4
 80098f6:	2102      	movs	r1, #2
 80098f8:	4618      	mov	r0, r3
 80098fa:	f000 fb65 	bl	8009fc8 <RCCEx_PLL2_Config>
 80098fe:	4603      	mov	r3, r0
 8009900:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009902:	e002      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	75fb      	strb	r3, [r7, #23]
      break;
 8009908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800990a:	7dfb      	ldrb	r3, [r7, #23]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d109      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009910:	4b55      	ldr	r3, [pc, #340]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009914:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800991c:	4952      	ldr	r1, [pc, #328]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800991e:	4313      	orrs	r3, r2
 8009920:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009922:	e001      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009924:	7dfb      	ldrb	r3, [r7, #23]
 8009926:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00a      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	3324      	adds	r3, #36	; 0x24
 8009938:	2102      	movs	r1, #2
 800993a:	4618      	mov	r0, r3
 800993c:	f000 fbf6 	bl	800a12c <RCCEx_PLL3_Config>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009952:	2b00      	cmp	r3, #0
 8009954:	d02f      	beq.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800995a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800995e:	d00c      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009964:	d802      	bhi.n	800996c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8009966:	2b00      	cmp	r3, #0
 8009968:	d011      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800996a:	e00d      	b.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800996c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009970:	d00f      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8009972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009976:	d00e      	beq.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8009978:	e006      	b.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800997a:	4b3b      	ldr	r3, [pc, #236]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800997c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997e:	4a3a      	ldr	r2, [pc, #232]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009984:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009986:	e007      	b.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	75fb      	strb	r3, [r7, #23]
      break;
 800998c:	e004      	b.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800998e:	bf00      	nop
 8009990:	e002      	b.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009992:	bf00      	nop
 8009994:	e000      	b.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009996:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009998:	7dfb      	ldrb	r3, [r7, #23]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d109      	bne.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800999e:	4b32      	ldr	r3, [pc, #200]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80099a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099aa:	492f      	ldr	r1, [pc, #188]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80099ac:	4313      	orrs	r3, r2
 80099ae:	654b      	str	r3, [r1, #84]	; 0x54
 80099b0:	e001      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
 80099b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d008      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80099c2:	4b29      	ldr	r3, [pc, #164]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80099c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ce:	4926      	ldr	r1, [pc, #152]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80099d0:	4313      	orrs	r3, r2
 80099d2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d009      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80099e0:	4b21      	ldr	r3, [pc, #132]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80099ee:	491e      	ldr	r1, [pc, #120]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d008      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009a00:	4b19      	ldr	r3, [pc, #100]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a0c:	4916      	ldr	r1, [pc, #88]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00d      	beq.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a1e:	4b12      	ldr	r3, [pc, #72]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	4a11      	ldr	r2, [pc, #68]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009a24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a28:	6113      	str	r3, [r2, #16]
 8009a2a:	4b0f      	ldr	r3, [pc, #60]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009a2c:	691a      	ldr	r2, [r3, #16]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009a34:	490c      	ldr	r1, [pc, #48]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009a36:	4313      	orrs	r3, r2
 8009a38:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	da08      	bge.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009a42:	4b09      	ldr	r3, [pc, #36]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a4e:	4906      	ldr	r1, [pc, #24]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009a50:	4313      	orrs	r3, r2
 8009a52:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8009a54:	7dbb      	ldrb	r3, [r7, #22]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	e000      	b.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3718      	adds	r7, #24
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	58024400 	.word	0x58024400

08009a6c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009a70:	f7ff f8b2 	bl	8008bd8 <HAL_RCC_GetHCLKFreq>
 8009a74:	4601      	mov	r1, r0
 8009a76:	4b06      	ldr	r3, [pc, #24]	; (8009a90 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	091b      	lsrs	r3, r3, #4
 8009a7c:	f003 0307 	and.w	r3, r3, #7
 8009a80:	4a04      	ldr	r2, [pc, #16]	; (8009a94 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009a82:	5cd3      	ldrb	r3, [r2, r3]
 8009a84:	f003 031f 	and.w	r3, r3, #31
 8009a88:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	58024400 	.word	0x58024400
 8009a94:	0800eb58 	.word	0x0800eb58

08009a98 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b089      	sub	sp, #36	; 0x24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009aa0:	4b9d      	ldr	r3, [pc, #628]	; (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa4:	f003 0303 	and.w	r3, r3, #3
 8009aa8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009aaa:	4b9b      	ldr	r3, [pc, #620]	; (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aae:	0b1b      	lsrs	r3, r3, #12
 8009ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ab4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009ab6:	4b98      	ldr	r3, [pc, #608]	; (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aba:	091b      	lsrs	r3, r3, #4
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009ac2:	4b95      	ldr	r3, [pc, #596]	; (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ac6:	08db      	lsrs	r3, r3, #3
 8009ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009acc:	693a      	ldr	r2, [r7, #16]
 8009ace:	fb02 f303 	mul.w	r3, r2, r3
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ada:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f000 810a 	beq.w	8009cfa <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d05a      	beq.n	8009ba2 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d302      	bcc.n	8009af6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d078      	beq.n	8009be6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8009af4:	e099      	b.n	8009c2a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009af6:	4b88      	ldr	r3, [pc, #544]	; (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 0320 	and.w	r3, r3, #32
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d02d      	beq.n	8009b5e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b02:	4b85      	ldr	r3, [pc, #532]	; (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	08db      	lsrs	r3, r3, #3
 8009b08:	f003 0303 	and.w	r3, r3, #3
 8009b0c:	4a83      	ldr	r2, [pc, #524]	; (8009d1c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8009b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b12:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	ee07 3a90 	vmov	s15, r3
 8009b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	ee07 3a90 	vmov	s15, r3
 8009b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b2c:	4b7a      	ldr	r3, [pc, #488]	; (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b34:	ee07 3a90 	vmov	s15, r3
 8009b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b40:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009b44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b58:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b5c:	e087      	b.n	8009c6e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	ee07 3a90 	vmov	s15, r3
 8009b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b68:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8009b6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b70:	4b69      	ldr	r3, [pc, #420]	; (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b78:	ee07 3a90 	vmov	s15, r3
 8009b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b80:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b84:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009b88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ba0:	e065      	b.n	8009c6e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	ee07 3a90 	vmov	s15, r3
 8009ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009bb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bb4:	4b58      	ldr	r3, [pc, #352]	; (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bbc:	ee07 3a90 	vmov	s15, r3
 8009bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bc8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009bcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009be4:	e043      	b.n	8009c6e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	ee07 3a90 	vmov	s15, r3
 8009bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009d2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8009bf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bf8:	4b47      	ldr	r3, [pc, #284]	; (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c00:	ee07 3a90 	vmov	s15, r3
 8009c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c08:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c0c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009c10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c28:	e021      	b.n	8009c6e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	ee07 3a90 	vmov	s15, r3
 8009c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c34:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009c38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c3c:	4b36      	ldr	r3, [pc, #216]	; (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c44:	ee07 3a90 	vmov	s15, r3
 8009c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c50:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009c54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c6c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009c6e:	4b2a      	ldr	r3, [pc, #168]	; (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c72:	0a5b      	lsrs	r3, r3, #9
 8009c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c78:	ee07 3a90 	vmov	s15, r3
 8009c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c88:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c94:	ee17 2a90 	vmov	r2, s15
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009c9c:	4b1e      	ldr	r3, [pc, #120]	; (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca0:	0c1b      	lsrs	r3, r3, #16
 8009ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ca6:	ee07 3a90 	vmov	s15, r3
 8009caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cc2:	ee17 2a90 	vmov	r2, s15
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009cca:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cce:	0e1b      	lsrs	r3, r3, #24
 8009cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cd4:	ee07 3a90 	vmov	s15, r3
 8009cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ce0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ce4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cf0:	ee17 2a90 	vmov	r2, s15
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009cf8:	e008      	b.n	8009d0c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	609a      	str	r2, [r3, #8]
}
 8009d0c:	bf00      	nop
 8009d0e:	3724      	adds	r7, #36	; 0x24
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	58024400 	.word	0x58024400
 8009d1c:	03d09000 	.word	0x03d09000
 8009d20:	46000000 	.word	0x46000000
 8009d24:	4c742400 	.word	0x4c742400
 8009d28:	4a742400 	.word	0x4a742400
 8009d2c:	4af42400 	.word	0x4af42400

08009d30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b089      	sub	sp, #36	; 0x24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d38:	4b9d      	ldr	r3, [pc, #628]	; (8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3c:	f003 0303 	and.w	r3, r3, #3
 8009d40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009d42:	4b9b      	ldr	r3, [pc, #620]	; (8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d46:	0d1b      	lsrs	r3, r3, #20
 8009d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009d4e:	4b98      	ldr	r3, [pc, #608]	; (8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d52:	0a1b      	lsrs	r3, r3, #8
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009d5a:	4b95      	ldr	r3, [pc, #596]	; (8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d5e:	08db      	lsrs	r3, r3, #3
 8009d60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	fb02 f303 	mul.w	r3, r2, r3
 8009d6a:	ee07 3a90 	vmov	s15, r3
 8009d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f000 810a 	beq.w	8009f92 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d05a      	beq.n	8009e3a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d302      	bcc.n	8009d8e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d078      	beq.n	8009e7e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8009d8c:	e099      	b.n	8009ec2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d8e:	4b88      	ldr	r3, [pc, #544]	; (8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 0320 	and.w	r3, r3, #32
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d02d      	beq.n	8009df6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d9a:	4b85      	ldr	r3, [pc, #532]	; (8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	08db      	lsrs	r3, r3, #3
 8009da0:	f003 0303 	and.w	r3, r3, #3
 8009da4:	4a83      	ldr	r2, [pc, #524]	; (8009fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8009da6:	fa22 f303 	lsr.w	r3, r2, r3
 8009daa:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	ee07 3a90 	vmov	s15, r3
 8009db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	ee07 3a90 	vmov	s15, r3
 8009dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc4:	4b7a      	ldr	r3, [pc, #488]	; (8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dcc:	ee07 3a90 	vmov	s15, r3
 8009dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dd8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009ddc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009de4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009de8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009df4:	e087      	b.n	8009f06 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	ee07 3a90 	vmov	s15, r3
 8009dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e00:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009fbc <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8009e04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e08:	4b69      	ldr	r3, [pc, #420]	; (8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e10:	ee07 3a90 	vmov	s15, r3
 8009e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e18:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e1c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009e20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e38:	e065      	b.n	8009f06 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	ee07 3a90 	vmov	s15, r3
 8009e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e44:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009e48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e4c:	4b58      	ldr	r3, [pc, #352]	; (8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e54:	ee07 3a90 	vmov	s15, r3
 8009e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e60:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009e64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e7c:	e043      	b.n	8009f06 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	ee07 3a90 	vmov	s15, r3
 8009e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e88:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8009e8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e90:	4b47      	ldr	r3, [pc, #284]	; (8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e98:	ee07 3a90 	vmov	s15, r3
 8009e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ea0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ea4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009ea8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ebc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ec0:	e021      	b.n	8009f06 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	ee07 3a90 	vmov	s15, r3
 8009ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ecc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009ed0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ed4:	4b36      	ldr	r3, [pc, #216]	; (8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009edc:	ee07 3a90 	vmov	s15, r3
 8009ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ee4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ee8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009eec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ef0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ef4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f04:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009f06:	4b2a      	ldr	r3, [pc, #168]	; (8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f0a:	0a5b      	lsrs	r3, r3, #9
 8009f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f10:	ee07 3a90 	vmov	s15, r3
 8009f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f2c:	ee17 2a90 	vmov	r2, s15
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009f34:	4b1e      	ldr	r3, [pc, #120]	; (8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f38:	0c1b      	lsrs	r3, r3, #16
 8009f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f3e:	ee07 3a90 	vmov	s15, r3
 8009f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f5a:	ee17 2a90 	vmov	r2, s15
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009f62:	4b13      	ldr	r3, [pc, #76]	; (8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f66:	0e1b      	lsrs	r3, r3, #24
 8009f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f6c:	ee07 3a90 	vmov	s15, r3
 8009f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f88:	ee17 2a90 	vmov	r2, s15
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009f90:	e008      	b.n	8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	609a      	str	r2, [r3, #8]
}
 8009fa4:	bf00      	nop
 8009fa6:	3724      	adds	r7, #36	; 0x24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr
 8009fb0:	58024400 	.word	0x58024400
 8009fb4:	03d09000 	.word	0x03d09000
 8009fb8:	46000000 	.word	0x46000000
 8009fbc:	4c742400 	.word	0x4c742400
 8009fc0:	4a742400 	.word	0x4a742400
 8009fc4:	4af42400 	.word	0x4af42400

08009fc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009fd6:	4b53      	ldr	r3, [pc, #332]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 8009fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fda:	f003 0303 	and.w	r3, r3, #3
 8009fde:	2b03      	cmp	r3, #3
 8009fe0:	d101      	bne.n	8009fe6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e099      	b.n	800a11a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009fe6:	4b4f      	ldr	r3, [pc, #316]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a4e      	ldr	r2, [pc, #312]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 8009fec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ff0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ff2:	f7f9 f8a1 	bl	8003138 <HAL_GetTick>
 8009ff6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ff8:	e008      	b.n	800a00c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009ffa:	f7f9 f89d 	bl	8003138 <HAL_GetTick>
 8009ffe:	4602      	mov	r2, r0
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	1ad3      	subs	r3, r2, r3
 800a004:	2b02      	cmp	r3, #2
 800a006:	d901      	bls.n	800a00c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a008:	2303      	movs	r3, #3
 800a00a:	e086      	b.n	800a11a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a00c:	4b45      	ldr	r3, [pc, #276]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a014:	2b00      	cmp	r3, #0
 800a016:	d1f0      	bne.n	8009ffa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a018:	4b42      	ldr	r3, [pc, #264]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a01a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a01c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	031b      	lsls	r3, r3, #12
 800a026:	493f      	ldr	r1, [pc, #252]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a028:	4313      	orrs	r3, r2
 800a02a:	628b      	str	r3, [r1, #40]	; 0x28
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	3b01      	subs	r3, #1
 800a032:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	3b01      	subs	r3, #1
 800a03c:	025b      	lsls	r3, r3, #9
 800a03e:	b29b      	uxth	r3, r3
 800a040:	431a      	orrs	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	3b01      	subs	r3, #1
 800a048:	041b      	lsls	r3, r3, #16
 800a04a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a04e:	431a      	orrs	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	3b01      	subs	r3, #1
 800a056:	061b      	lsls	r3, r3, #24
 800a058:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a05c:	4931      	ldr	r1, [pc, #196]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a05e:	4313      	orrs	r3, r2
 800a060:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a062:	4b30      	ldr	r3, [pc, #192]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a066:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	695b      	ldr	r3, [r3, #20]
 800a06e:	492d      	ldr	r1, [pc, #180]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a070:	4313      	orrs	r3, r2
 800a072:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a074:	4b2b      	ldr	r3, [pc, #172]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a078:	f023 0220 	bic.w	r2, r3, #32
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	699b      	ldr	r3, [r3, #24]
 800a080:	4928      	ldr	r1, [pc, #160]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a082:	4313      	orrs	r3, r2
 800a084:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a086:	4b27      	ldr	r3, [pc, #156]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08a:	4a26      	ldr	r2, [pc, #152]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a08c:	f023 0310 	bic.w	r3, r3, #16
 800a090:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a092:	4b24      	ldr	r3, [pc, #144]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a096:	4b24      	ldr	r3, [pc, #144]	; (800a128 <RCCEx_PLL2_Config+0x160>)
 800a098:	4013      	ands	r3, r2
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	69d2      	ldr	r2, [r2, #28]
 800a09e:	00d2      	lsls	r2, r2, #3
 800a0a0:	4920      	ldr	r1, [pc, #128]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a0a6:	4b1f      	ldr	r3, [pc, #124]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0aa:	4a1e      	ldr	r2, [pc, #120]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0ac:	f043 0310 	orr.w	r3, r3, #16
 800a0b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d106      	bne.n	800a0c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a0b8:	4b1a      	ldr	r3, [pc, #104]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0bc:	4a19      	ldr	r2, [pc, #100]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0c4:	e00f      	b.n	800a0e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d106      	bne.n	800a0da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a0cc:	4b15      	ldr	r3, [pc, #84]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d0:	4a14      	ldr	r2, [pc, #80]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0d8:	e005      	b.n	800a0e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a0da:	4b12      	ldr	r3, [pc, #72]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0de:	4a11      	ldr	r2, [pc, #68]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a0e6:	4b0f      	ldr	r3, [pc, #60]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a0e      	ldr	r2, [pc, #56]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a0f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0f2:	f7f9 f821 	bl	8003138 <HAL_GetTick>
 800a0f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0f8:	e008      	b.n	800a10c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a0fa:	f7f9 f81d 	bl	8003138 <HAL_GetTick>
 800a0fe:	4602      	mov	r2, r0
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	2b02      	cmp	r3, #2
 800a106:	d901      	bls.n	800a10c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e006      	b.n	800a11a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a10c:	4b05      	ldr	r3, [pc, #20]	; (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a114:	2b00      	cmp	r3, #0
 800a116:	d0f0      	beq.n	800a0fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a118:	7bfb      	ldrb	r3, [r7, #15]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	58024400 	.word	0x58024400
 800a128:	ffff0007 	.word	0xffff0007

0800a12c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a136:	2300      	movs	r3, #0
 800a138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a13a:	4b53      	ldr	r3, [pc, #332]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a13e:	f003 0303 	and.w	r3, r3, #3
 800a142:	2b03      	cmp	r3, #3
 800a144:	d101      	bne.n	800a14a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	e099      	b.n	800a27e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a14a:	4b4f      	ldr	r3, [pc, #316]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a4e      	ldr	r2, [pc, #312]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a156:	f7f8 ffef 	bl	8003138 <HAL_GetTick>
 800a15a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a15c:	e008      	b.n	800a170 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a15e:	f7f8 ffeb 	bl	8003138 <HAL_GetTick>
 800a162:	4602      	mov	r2, r0
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d901      	bls.n	800a170 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a16c:	2303      	movs	r3, #3
 800a16e:	e086      	b.n	800a27e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a170:	4b45      	ldr	r3, [pc, #276]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1f0      	bne.n	800a15e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a17c:	4b42      	ldr	r3, [pc, #264]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a17e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a180:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	051b      	lsls	r3, r3, #20
 800a18a:	493f      	ldr	r1, [pc, #252]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a18c:	4313      	orrs	r3, r2
 800a18e:	628b      	str	r3, [r1, #40]	; 0x28
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	3b01      	subs	r3, #1
 800a196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	025b      	lsls	r3, r3, #9
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	431a      	orrs	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	041b      	lsls	r3, r3, #16
 800a1ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1b2:	431a      	orrs	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	061b      	lsls	r3, r3, #24
 800a1bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1c0:	4931      	ldr	r1, [pc, #196]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a1c6:	4b30      	ldr	r3, [pc, #192]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	695b      	ldr	r3, [r3, #20]
 800a1d2:	492d      	ldr	r1, [pc, #180]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a1d8:	4b2b      	ldr	r3, [pc, #172]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	4928      	ldr	r1, [pc, #160]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a1ea:	4b27      	ldr	r3, [pc, #156]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ee:	4a26      	ldr	r2, [pc, #152]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a1f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a1f6:	4b24      	ldr	r3, [pc, #144]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a1f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1fa:	4b24      	ldr	r3, [pc, #144]	; (800a28c <RCCEx_PLL3_Config+0x160>)
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	69d2      	ldr	r2, [r2, #28]
 800a202:	00d2      	lsls	r2, r2, #3
 800a204:	4920      	ldr	r1, [pc, #128]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a206:	4313      	orrs	r3, r2
 800a208:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a20a:	4b1f      	ldr	r3, [pc, #124]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20e:	4a1e      	ldr	r2, [pc, #120]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a214:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d106      	bne.n	800a22a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a21c:	4b1a      	ldr	r3, [pc, #104]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a220:	4a19      	ldr	r2, [pc, #100]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a222:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a226:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a228:	e00f      	b.n	800a24a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d106      	bne.n	800a23e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a230:	4b15      	ldr	r3, [pc, #84]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a234:	4a14      	ldr	r2, [pc, #80]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a236:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a23a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a23c:	e005      	b.n	800a24a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a23e:	4b12      	ldr	r3, [pc, #72]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a242:	4a11      	ldr	r2, [pc, #68]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a244:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a248:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a24a:	4b0f      	ldr	r3, [pc, #60]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a0e      	ldr	r2, [pc, #56]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a256:	f7f8 ff6f 	bl	8003138 <HAL_GetTick>
 800a25a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a25c:	e008      	b.n	800a270 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a25e:	f7f8 ff6b 	bl	8003138 <HAL_GetTick>
 800a262:	4602      	mov	r2, r0
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d901      	bls.n	800a270 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e006      	b.n	800a27e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a270:	4b05      	ldr	r3, [pc, #20]	; (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d0f0      	beq.n	800a25e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	58024400 	.word	0x58024400
 800a28c:	ffff0007 	.word	0xffff0007

0800a290 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800a298:	2300      	movs	r3, #0
 800a29a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d101      	bne.n	800a2a6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e0e2      	b.n	800a46c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a70      	ldr	r2, [pc, #448]	; (800a474 <HAL_SPI_Init+0x1e4>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d00f      	beq.n	800a2d6 <HAL_SPI_Init+0x46>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a6f      	ldr	r2, [pc, #444]	; (800a478 <HAL_SPI_Init+0x1e8>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d00a      	beq.n	800a2d6 <HAL_SPI_Init+0x46>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a6d      	ldr	r2, [pc, #436]	; (800a47c <HAL_SPI_Init+0x1ec>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d005      	beq.n	800a2d6 <HAL_SPI_Init+0x46>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	2b0f      	cmp	r3, #15
 800a2d0:	d901      	bls.n	800a2d6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e0ca      	b.n	800a46c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f8d2 	bl	800a480 <SPI_GetPacketSize>
 800a2dc:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a64      	ldr	r2, [pc, #400]	; (800a474 <HAL_SPI_Init+0x1e4>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d00c      	beq.n	800a302 <HAL_SPI_Init+0x72>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a62      	ldr	r2, [pc, #392]	; (800a478 <HAL_SPI_Init+0x1e8>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d007      	beq.n	800a302 <HAL_SPI_Init+0x72>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a61      	ldr	r2, [pc, #388]	; (800a47c <HAL_SPI_Init+0x1ec>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d002      	beq.n	800a302 <HAL_SPI_Init+0x72>
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	2b08      	cmp	r3, #8
 800a300:	d811      	bhi.n	800a326 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a306:	4a5b      	ldr	r2, [pc, #364]	; (800a474 <HAL_SPI_Init+0x1e4>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d009      	beq.n	800a320 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a59      	ldr	r2, [pc, #356]	; (800a478 <HAL_SPI_Init+0x1e8>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d004      	beq.n	800a320 <HAL_SPI_Init+0x90>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a58      	ldr	r2, [pc, #352]	; (800a47c <HAL_SPI_Init+0x1ec>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d104      	bne.n	800a32a <HAL_SPI_Init+0x9a>
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	2b10      	cmp	r3, #16
 800a324:	d901      	bls.n	800a32a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e0a0      	b.n	800a46c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a330:	b2db      	uxtb	r3, r3
 800a332:	2b00      	cmp	r3, #0
 800a334:	d106      	bne.n	800a344 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f7f8 f980 	bl	8002644 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2202      	movs	r2, #2
 800a348:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f022 0201 	bic.w	r2, r2, #1
 800a35a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	699b      	ldr	r3, [r3, #24]
 800a360:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a364:	d110      	bne.n	800a388 <HAL_SPI_Init+0xf8>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a36e:	d10b      	bne.n	800a388 <HAL_SPI_Init+0xf8>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a374:	2b00      	cmp	r3, #0
 800a376:	d107      	bne.n	800a388 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a386:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	69da      	ldr	r2, [r3, #28]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a390:	431a      	orrs	r2, r3
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	431a      	orrs	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a39a:	ea42 0103 	orr.w	r1, r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	68da      	ldr	r2, [r3, #12]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b2:	431a      	orrs	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b8:	431a      	orrs	r2, r3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	431a      	orrs	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	431a      	orrs	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	695b      	ldr	r3, [r3, #20]
 800a3ca:	431a      	orrs	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a1b      	ldr	r3, [r3, #32]
 800a3d0:	431a      	orrs	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	431a      	orrs	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3dc:	431a      	orrs	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	431a      	orrs	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3e8:	ea42 0103 	orr.w	r1, r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	430a      	orrs	r2, r1
 800a3f6:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d113      	bne.n	800a428 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a412:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a426:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f022 0201 	bic.w	r2, r2, #1
 800a436:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00a      	beq.n	800a45a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	430a      	orrs	r2, r1
 800a458:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2201      	movs	r2, #1
 800a466:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	40013000 	.word	0x40013000
 800a478:	40003800 	.word	0x40003800
 800a47c:	40003c00 	.word	0x40003c00

0800a480 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a48c:	095b      	lsrs	r3, r3, #5
 800a48e:	3301      	adds	r3, #1
 800a490:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	3301      	adds	r3, #1
 800a498:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	3307      	adds	r3, #7
 800a49e:	08db      	lsrs	r3, r3, #3
 800a4a0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	fb02 f303 	mul.w	r3, r2, r3
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3714      	adds	r7, #20
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
	...

0800a4b8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d101      	bne.n	800a4ce <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e03e      	b.n	800a54c <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d106      	bne.n	800a4e8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f7f8 fae4 	bl	8002ab0 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	3308      	adds	r3, #8
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	4610      	mov	r0, r2
 800a4f4:	f002 f8c6 	bl	800c684 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6818      	ldr	r0, [r3, #0]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	461a      	mov	r2, r3
 800a502:	68b9      	ldr	r1, [r7, #8]
 800a504:	f002 f94e 	bl	800c7a4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6858      	ldr	r0, [r3, #4]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	689a      	ldr	r2, [r3, #8]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a514:	6879      	ldr	r1, [r7, #4]
 800a516:	f002 f995 	bl	800c844 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	6892      	ldr	r2, [r2, #8]
 800a522:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	6892      	ldr	r2, [r2, #8]
 800a52e:	f041 0101 	orr.w	r1, r1, #1
 800a532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a536:	4b07      	ldr	r3, [pc, #28]	; (800a554 <HAL_SRAM_Init+0x9c>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a06      	ldr	r2, [pc, #24]	; (800a554 <HAL_SRAM_Init+0x9c>)
 800a53c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a540:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2201      	movs	r2, #1
 800a546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	52004000 	.word	0x52004000

0800a558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d101      	bne.n	800a56a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e049      	b.n	800a5fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a570:	b2db      	uxtb	r3, r3
 800a572:	2b00      	cmp	r3, #0
 800a574:	d106      	bne.n	800a584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f7f8 f8aa 	bl	80026d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2202      	movs	r2, #2
 800a588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	3304      	adds	r3, #4
 800a594:	4619      	mov	r1, r3
 800a596:	4610      	mov	r0, r2
 800a598:	f000 f906 	bl	800a7a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
	...

0800a608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d101      	bne.n	800a620 <HAL_TIM_ConfigClockSource+0x18>
 800a61c:	2302      	movs	r3, #2
 800a61e:	e0b7      	b.n	800a790 <HAL_TIM_ConfigClockSource+0x188>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2202      	movs	r2, #2
 800a62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	4b57      	ldr	r3, [pc, #348]	; (800a798 <HAL_TIM_ConfigClockSource+0x190>)
 800a63c:	4013      	ands	r3, r2
 800a63e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a646:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b70      	cmp	r3, #112	; 0x70
 800a656:	d02e      	beq.n	800a6b6 <HAL_TIM_ConfigClockSource+0xae>
 800a658:	2b70      	cmp	r3, #112	; 0x70
 800a65a:	d812      	bhi.n	800a682 <HAL_TIM_ConfigClockSource+0x7a>
 800a65c:	2b30      	cmp	r3, #48	; 0x30
 800a65e:	f000 8084 	beq.w	800a76a <HAL_TIM_ConfigClockSource+0x162>
 800a662:	2b30      	cmp	r3, #48	; 0x30
 800a664:	d806      	bhi.n	800a674 <HAL_TIM_ConfigClockSource+0x6c>
 800a666:	2b10      	cmp	r3, #16
 800a668:	d07f      	beq.n	800a76a <HAL_TIM_ConfigClockSource+0x162>
 800a66a:	2b20      	cmp	r3, #32
 800a66c:	d07d      	beq.n	800a76a <HAL_TIM_ConfigClockSource+0x162>
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d07b      	beq.n	800a76a <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a672:	e084      	b.n	800a77e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800a674:	2b50      	cmp	r3, #80	; 0x50
 800a676:	d048      	beq.n	800a70a <HAL_TIM_ConfigClockSource+0x102>
 800a678:	2b60      	cmp	r3, #96	; 0x60
 800a67a:	d056      	beq.n	800a72a <HAL_TIM_ConfigClockSource+0x122>
 800a67c:	2b40      	cmp	r3, #64	; 0x40
 800a67e:	d064      	beq.n	800a74a <HAL_TIM_ConfigClockSource+0x142>
      break;
 800a680:	e07d      	b.n	800a77e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800a682:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a686:	d070      	beq.n	800a76a <HAL_TIM_ConfigClockSource+0x162>
 800a688:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a68c:	d809      	bhi.n	800a6a2 <HAL_TIM_ConfigClockSource+0x9a>
 800a68e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a692:	d027      	beq.n	800a6e4 <HAL_TIM_ConfigClockSource+0xdc>
 800a694:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a698:	d067      	beq.n	800a76a <HAL_TIM_ConfigClockSource+0x162>
 800a69a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a69e:	d06d      	beq.n	800a77c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a6a0:	e06d      	b.n	800a77e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800a6a2:	4a3e      	ldr	r2, [pc, #248]	; (800a79c <HAL_TIM_ConfigClockSource+0x194>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d060      	beq.n	800a76a <HAL_TIM_ConfigClockSource+0x162>
 800a6a8:	4a3d      	ldr	r2, [pc, #244]	; (800a7a0 <HAL_TIM_ConfigClockSource+0x198>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d05d      	beq.n	800a76a <HAL_TIM_ConfigClockSource+0x162>
 800a6ae:	4a3d      	ldr	r2, [pc, #244]	; (800a7a4 <HAL_TIM_ConfigClockSource+0x19c>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d05a      	beq.n	800a76a <HAL_TIM_ConfigClockSource+0x162>
      break;
 800a6b4:	e063      	b.n	800a77e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6818      	ldr	r0, [r3, #0]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	6899      	ldr	r1, [r3, #8]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	685a      	ldr	r2, [r3, #4]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	f000 f987 	bl	800a9d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a6d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	609a      	str	r2, [r3, #8]
      break;
 800a6e2:	e04c      	b.n	800a77e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6818      	ldr	r0, [r3, #0]
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	6899      	ldr	r1, [r3, #8]
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	f000 f970 	bl	800a9d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	689a      	ldr	r2, [r3, #8]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a706:	609a      	str	r2, [r3, #8]
      break;
 800a708:	e039      	b.n	800a77e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6818      	ldr	r0, [r3, #0]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	6859      	ldr	r1, [r3, #4]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	461a      	mov	r2, r3
 800a718:	f000 f8e0 	bl	800a8dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2150      	movs	r1, #80	; 0x50
 800a722:	4618      	mov	r0, r3
 800a724:	f000 f93a 	bl	800a99c <TIM_ITRx_SetConfig>
      break;
 800a728:	e029      	b.n	800a77e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6818      	ldr	r0, [r3, #0]
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	6859      	ldr	r1, [r3, #4]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	461a      	mov	r2, r3
 800a738:	f000 f8ff 	bl	800a93a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2160      	movs	r1, #96	; 0x60
 800a742:	4618      	mov	r0, r3
 800a744:	f000 f92a 	bl	800a99c <TIM_ITRx_SetConfig>
      break;
 800a748:	e019      	b.n	800a77e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6818      	ldr	r0, [r3, #0]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	6859      	ldr	r1, [r3, #4]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	461a      	mov	r2, r3
 800a758:	f000 f8c0 	bl	800a8dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2140      	movs	r1, #64	; 0x40
 800a762:	4618      	mov	r0, r3
 800a764:	f000 f91a 	bl	800a99c <TIM_ITRx_SetConfig>
      break;
 800a768:	e009      	b.n	800a77e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4619      	mov	r1, r3
 800a774:	4610      	mov	r0, r2
 800a776:	f000 f911 	bl	800a99c <TIM_ITRx_SetConfig>
      break;
 800a77a:	e000      	b.n	800a77e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800a77c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2201      	movs	r2, #1
 800a782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	ffceff88 	.word	0xffceff88
 800a79c:	00100030 	.word	0x00100030
 800a7a0:	00100040 	.word	0x00100040
 800a7a4:	00100020 	.word	0x00100020

0800a7a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a40      	ldr	r2, [pc, #256]	; (800a8bc <TIM_Base_SetConfig+0x114>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d013      	beq.n	800a7e8 <TIM_Base_SetConfig+0x40>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7c6:	d00f      	beq.n	800a7e8 <TIM_Base_SetConfig+0x40>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a3d      	ldr	r2, [pc, #244]	; (800a8c0 <TIM_Base_SetConfig+0x118>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d00b      	beq.n	800a7e8 <TIM_Base_SetConfig+0x40>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a3c      	ldr	r2, [pc, #240]	; (800a8c4 <TIM_Base_SetConfig+0x11c>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d007      	beq.n	800a7e8 <TIM_Base_SetConfig+0x40>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a3b      	ldr	r2, [pc, #236]	; (800a8c8 <TIM_Base_SetConfig+0x120>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d003      	beq.n	800a7e8 <TIM_Base_SetConfig+0x40>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a3a      	ldr	r2, [pc, #232]	; (800a8cc <TIM_Base_SetConfig+0x124>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d108      	bne.n	800a7fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a2f      	ldr	r2, [pc, #188]	; (800a8bc <TIM_Base_SetConfig+0x114>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d01f      	beq.n	800a842 <TIM_Base_SetConfig+0x9a>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a808:	d01b      	beq.n	800a842 <TIM_Base_SetConfig+0x9a>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a2c      	ldr	r2, [pc, #176]	; (800a8c0 <TIM_Base_SetConfig+0x118>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d017      	beq.n	800a842 <TIM_Base_SetConfig+0x9a>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a2b      	ldr	r2, [pc, #172]	; (800a8c4 <TIM_Base_SetConfig+0x11c>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d013      	beq.n	800a842 <TIM_Base_SetConfig+0x9a>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a2a      	ldr	r2, [pc, #168]	; (800a8c8 <TIM_Base_SetConfig+0x120>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d00f      	beq.n	800a842 <TIM_Base_SetConfig+0x9a>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a29      	ldr	r2, [pc, #164]	; (800a8cc <TIM_Base_SetConfig+0x124>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d00b      	beq.n	800a842 <TIM_Base_SetConfig+0x9a>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a28      	ldr	r2, [pc, #160]	; (800a8d0 <TIM_Base_SetConfig+0x128>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d007      	beq.n	800a842 <TIM_Base_SetConfig+0x9a>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a27      	ldr	r2, [pc, #156]	; (800a8d4 <TIM_Base_SetConfig+0x12c>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d003      	beq.n	800a842 <TIM_Base_SetConfig+0x9a>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a26      	ldr	r2, [pc, #152]	; (800a8d8 <TIM_Base_SetConfig+0x130>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d108      	bne.n	800a854 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	4313      	orrs	r3, r2
 800a852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	695b      	ldr	r3, [r3, #20]
 800a85e:	4313      	orrs	r3, r2
 800a860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	689a      	ldr	r2, [r3, #8]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a10      	ldr	r2, [pc, #64]	; (800a8bc <TIM_Base_SetConfig+0x114>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d00f      	beq.n	800a8a0 <TIM_Base_SetConfig+0xf8>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a12      	ldr	r2, [pc, #72]	; (800a8cc <TIM_Base_SetConfig+0x124>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d00b      	beq.n	800a8a0 <TIM_Base_SetConfig+0xf8>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a11      	ldr	r2, [pc, #68]	; (800a8d0 <TIM_Base_SetConfig+0x128>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d007      	beq.n	800a8a0 <TIM_Base_SetConfig+0xf8>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a10      	ldr	r2, [pc, #64]	; (800a8d4 <TIM_Base_SetConfig+0x12c>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d003      	beq.n	800a8a0 <TIM_Base_SetConfig+0xf8>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a0f      	ldr	r2, [pc, #60]	; (800a8d8 <TIM_Base_SetConfig+0x130>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d103      	bne.n	800a8a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	691a      	ldr	r2, [r3, #16]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	615a      	str	r2, [r3, #20]
}
 800a8ae:	bf00      	nop
 800a8b0:	3714      	adds	r7, #20
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	40010000 	.word	0x40010000
 800a8c0:	40000400 	.word	0x40000400
 800a8c4:	40000800 	.word	0x40000800
 800a8c8:	40000c00 	.word	0x40000c00
 800a8cc:	40010400 	.word	0x40010400
 800a8d0:	40014000 	.word	0x40014000
 800a8d4:	40014400 	.word	0x40014400
 800a8d8:	40014800 	.word	0x40014800

0800a8dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b087      	sub	sp, #28
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6a1b      	ldr	r3, [r3, #32]
 800a8ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	f023 0201 	bic.w	r2, r3, #1
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	011b      	lsls	r3, r3, #4
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	4313      	orrs	r3, r2
 800a910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f023 030a 	bic.w	r3, r3, #10
 800a918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	4313      	orrs	r3, r2
 800a920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	693a      	ldr	r2, [r7, #16]
 800a926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	697a      	ldr	r2, [r7, #20]
 800a92c:	621a      	str	r2, [r3, #32]
}
 800a92e:	bf00      	nop
 800a930:	371c      	adds	r7, #28
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr

0800a93a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a93a:	b480      	push	{r7}
 800a93c:	b087      	sub	sp, #28
 800a93e:	af00      	add	r7, sp, #0
 800a940:	60f8      	str	r0, [r7, #12]
 800a942:	60b9      	str	r1, [r7, #8]
 800a944:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6a1b      	ldr	r3, [r3, #32]
 800a94a:	f023 0210 	bic.w	r2, r3, #16
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6a1b      	ldr	r3, [r3, #32]
 800a95c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a964:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	031b      	lsls	r3, r3, #12
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a976:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	011b      	lsls	r3, r3, #4
 800a97c:	693a      	ldr	r2, [r7, #16]
 800a97e:	4313      	orrs	r3, r2
 800a980:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	697a      	ldr	r2, [r7, #20]
 800a986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	693a      	ldr	r2, [r7, #16]
 800a98c:	621a      	str	r2, [r3, #32]
}
 800a98e:	bf00      	nop
 800a990:	371c      	adds	r7, #28
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
	...

0800a99c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9ac:	68fa      	ldr	r2, [r7, #12]
 800a9ae:	4b09      	ldr	r3, [pc, #36]	; (800a9d4 <TIM_ITRx_SetConfig+0x38>)
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a9b4:	683a      	ldr	r2, [r7, #0]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	f043 0307 	orr.w	r3, r3, #7
 800a9be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	609a      	str	r2, [r3, #8]
}
 800a9c6:	bf00      	nop
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	ffcfff8f 	.word	0xffcfff8f

0800a9d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b087      	sub	sp, #28
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
 800a9e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	021a      	lsls	r2, r3, #8
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	431a      	orrs	r2, r3
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	609a      	str	r2, [r3, #8]
}
 800aa0c:	bf00      	nop
 800aa0e:	371c      	adds	r7, #28
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d101      	bne.n	800aa30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa2c:	2302      	movs	r3, #2
 800aa2e:	e068      	b.n	800ab02 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2202      	movs	r2, #2
 800aa3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a2e      	ldr	r2, [pc, #184]	; (800ab10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d004      	beq.n	800aa64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a2d      	ldr	r2, [pc, #180]	; (800ab14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d108      	bne.n	800aa76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aa6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	4313      	orrs	r3, r2
 800aa86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a1e      	ldr	r2, [pc, #120]	; (800ab10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d01d      	beq.n	800aad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaa2:	d018      	beq.n	800aad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a1b      	ldr	r2, [pc, #108]	; (800ab18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d013      	beq.n	800aad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a1a      	ldr	r2, [pc, #104]	; (800ab1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d00e      	beq.n	800aad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a18      	ldr	r2, [pc, #96]	; (800ab20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d009      	beq.n	800aad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a13      	ldr	r2, [pc, #76]	; (800ab14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d004      	beq.n	800aad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a14      	ldr	r2, [pc, #80]	; (800ab24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d10c      	bne.n	800aaf0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aadc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3714      	adds	r7, #20
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	40010000 	.word	0x40010000
 800ab14:	40010400 	.word	0x40010400
 800ab18:	40000400 	.word	0x40000400
 800ab1c:	40000800 	.word	0x40000800
 800ab20:	40000c00 	.word	0x40000c00
 800ab24:	40001800 	.word	0x40001800

0800ab28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d101      	bne.n	800ab3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab36:	2301      	movs	r3, #1
 800ab38:	e042      	b.n	800abc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d106      	bne.n	800ab52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f7f7 fde3 	bl	8002718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2224      	movs	r2, #36	; 0x24
 800ab56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f022 0201 	bic.w	r2, r2, #1
 800ab68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 fb2e 	bl	800b1cc <UART_SetConfig>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d101      	bne.n	800ab7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ab76:	2301      	movs	r3, #1
 800ab78:	e022      	b.n	800abc0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d002      	beq.n	800ab88 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f001 f8d2 	bl	800bd2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	689a      	ldr	r2, [r3, #8]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aba6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f042 0201 	orr.w	r2, r2, #1
 800abb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f001 f959 	bl	800be70 <UART_CheckIdleState>
 800abbe:	4603      	mov	r3, r0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b08a      	sub	sp, #40	; 0x28
 800abcc:	af02      	add	r7, sp, #8
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	603b      	str	r3, [r7, #0]
 800abd4:	4613      	mov	r3, r2
 800abd6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abde:	2b20      	cmp	r3, #32
 800abe0:	f040 8083 	bne.w	800acea <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d002      	beq.n	800abf0 <HAL_UART_Transmit+0x28>
 800abea:	88fb      	ldrh	r3, [r7, #6]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d101      	bne.n	800abf4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	e07b      	b.n	800acec <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d101      	bne.n	800ac02 <HAL_UART_Transmit+0x3a>
 800abfe:	2302      	movs	r3, #2
 800ac00:	e074      	b.n	800acec <HAL_UART_Transmit+0x124>
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2201      	movs	r2, #1
 800ac06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2221      	movs	r2, #33	; 0x21
 800ac16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800ac1a:	f7f8 fa8d 	bl	8003138 <HAL_GetTick>
 800ac1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	88fa      	ldrh	r2, [r7, #6]
 800ac24:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	88fa      	ldrh	r2, [r7, #6]
 800ac2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac38:	d108      	bne.n	800ac4c <HAL_UART_Transmit+0x84>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d104      	bne.n	800ac4c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ac42:	2300      	movs	r3, #0
 800ac44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	61bb      	str	r3, [r7, #24]
 800ac4a:	e003      	b.n	800ac54 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ac50:	2300      	movs	r3, #0
 800ac52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800ac5c:	e02c      	b.n	800acb8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	9300      	str	r3, [sp, #0]
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	2200      	movs	r2, #0
 800ac66:	2180      	movs	r1, #128	; 0x80
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f001 f949 	bl	800bf00 <UART_WaitOnFlagUntilTimeout>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d001      	beq.n	800ac78 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ac74:	2303      	movs	r3, #3
 800ac76:	e039      	b.n	800acec <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10b      	bne.n	800ac96 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	881b      	ldrh	r3, [r3, #0]
 800ac82:	461a      	mov	r2, r3
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac8c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	3302      	adds	r3, #2
 800ac92:	61bb      	str	r3, [r7, #24]
 800ac94:	e007      	b.n	800aca6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	781a      	ldrb	r2, [r3, #0]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	3301      	adds	r3, #1
 800aca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800acac:	b29b      	uxth	r3, r3
 800acae:	3b01      	subs	r3, #1
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d1cc      	bne.n	800ac5e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	2200      	movs	r2, #0
 800accc:	2140      	movs	r1, #64	; 0x40
 800acce:	68f8      	ldr	r0, [r7, #12]
 800acd0:	f001 f916 	bl	800bf00 <UART_WaitOnFlagUntilTimeout>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d001      	beq.n	800acde <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800acda:	2303      	movs	r3, #3
 800acdc:	e006      	b.n	800acec <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2220      	movs	r2, #32
 800ace2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800ace6:	2300      	movs	r3, #0
 800ace8:	e000      	b.n	800acec <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800acea:	2302      	movs	r3, #2
  }
}
 800acec:	4618      	mov	r0, r3
 800acee:	3720      	adds	r7, #32
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	4613      	mov	r3, r2
 800ad00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad08:	2b20      	cmp	r3, #32
 800ad0a:	f040 80bc 	bne.w	800ae86 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d002      	beq.n	800ad1a <HAL_UART_Receive_IT+0x26>
 800ad14:	88fb      	ldrh	r3, [r7, #6]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d101      	bne.n	800ad1e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e0b4      	b.n	800ae88 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d101      	bne.n	800ad2c <HAL_UART_Receive_IT+0x38>
 800ad28:	2302      	movs	r3, #2
 800ad2a:	e0ad      	b.n	800ae88 <HAL_UART_Receive_IT+0x194>
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	68ba      	ldr	r2, [r7, #8]
 800ad38:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	88fa      	ldrh	r2, [r7, #6]
 800ad3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	88fa      	ldrh	r2, [r7, #6]
 800ad46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad58:	d10e      	bne.n	800ad78 <HAL_UART_Receive_IT+0x84>
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d105      	bne.n	800ad6e <HAL_UART_Receive_IT+0x7a>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ad68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ad6c:	e02d      	b.n	800adca <HAL_UART_Receive_IT+0xd6>
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	22ff      	movs	r2, #255	; 0xff
 800ad72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ad76:	e028      	b.n	800adca <HAL_UART_Receive_IT+0xd6>
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d10d      	bne.n	800ad9c <HAL_UART_Receive_IT+0xa8>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	691b      	ldr	r3, [r3, #16]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d104      	bne.n	800ad92 <HAL_UART_Receive_IT+0x9e>
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	22ff      	movs	r2, #255	; 0xff
 800ad8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ad90:	e01b      	b.n	800adca <HAL_UART_Receive_IT+0xd6>
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	227f      	movs	r2, #127	; 0x7f
 800ad96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ad9a:	e016      	b.n	800adca <HAL_UART_Receive_IT+0xd6>
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ada4:	d10d      	bne.n	800adc2 <HAL_UART_Receive_IT+0xce>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d104      	bne.n	800adb8 <HAL_UART_Receive_IT+0xc4>
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	227f      	movs	r2, #127	; 0x7f
 800adb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800adb6:	e008      	b.n	800adca <HAL_UART_Receive_IT+0xd6>
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	223f      	movs	r2, #63	; 0x3f
 800adbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800adc0:	e003      	b.n	800adca <HAL_UART_Receive_IT+0xd6>
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2200      	movs	r2, #0
 800adce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2222      	movs	r2, #34	; 0x22
 800add6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	689a      	ldr	r2, [r3, #8]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f042 0201 	orr.w	r2, r2, #1
 800ade8:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adf2:	d12a      	bne.n	800ae4a <HAL_UART_Receive_IT+0x156>
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800adfa:	88fa      	ldrh	r2, [r7, #6]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d324      	bcc.n	800ae4a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae08:	d107      	bne.n	800ae1a <HAL_UART_Receive_IT+0x126>
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d103      	bne.n	800ae1a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	4a1f      	ldr	r2, [pc, #124]	; (800ae94 <HAL_UART_Receive_IT+0x1a0>)
 800ae16:	66da      	str	r2, [r3, #108]	; 0x6c
 800ae18:	e002      	b.n	800ae20 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	4a1e      	ldr	r2, [pc, #120]	; (800ae98 <HAL_UART_Receive_IT+0x1a4>)
 800ae1e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae36:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	689a      	ldr	r2, [r3, #8]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ae46:	609a      	str	r2, [r3, #8]
 800ae48:	e01b      	b.n	800ae82 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae52:	d107      	bne.n	800ae64 <HAL_UART_Receive_IT+0x170>
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d103      	bne.n	800ae64 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	4a0f      	ldr	r2, [pc, #60]	; (800ae9c <HAL_UART_Receive_IT+0x1a8>)
 800ae60:	66da      	str	r2, [r3, #108]	; 0x6c
 800ae62:	e002      	b.n	800ae6a <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	4a0e      	ldr	r2, [pc, #56]	; (800aea0 <HAL_UART_Receive_IT+0x1ac>)
 800ae68:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800ae80:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	e000      	b.n	800ae88 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800ae86:	2302      	movs	r3, #2
  }
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3714      	adds	r7, #20
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr
 800ae94:	0800c305 	.word	0x0800c305
 800ae98:	0800c1fd 	.word	0x0800c1fd
 800ae9c:	0800c153 	.word	0x0800c153
 800aea0:	0800c0a9 	.word	0x0800c0a9

0800aea4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b088      	sub	sp, #32
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	69db      	ldr	r3, [r3, #28]
 800aeb2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aec4:	69fa      	ldr	r2, [r7, #28]
 800aec6:	f640 030f 	movw	r3, #2063	; 0x80f
 800aeca:	4013      	ands	r3, r2
 800aecc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d118      	bne.n	800af06 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	f003 0320 	and.w	r3, r3, #32
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d013      	beq.n	800af06 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	f003 0320 	and.w	r3, r3, #32
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d104      	bne.n	800aef2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d009      	beq.n	800af06 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f000 8145 	beq.w	800b186 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	4798      	blx	r3
      }
      return;
 800af04:	e13f      	b.n	800b186 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f000 80e8 	beq.w	800b0de <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	4ba1      	ldr	r3, [pc, #644]	; (800b198 <HAL_UART_IRQHandler+0x2f4>)
 800af12:	4013      	ands	r3, r2
 800af14:	2b00      	cmp	r3, #0
 800af16:	d105      	bne.n	800af24 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800af18:	69ba      	ldr	r2, [r7, #24]
 800af1a:	4ba0      	ldr	r3, [pc, #640]	; (800b19c <HAL_UART_IRQHandler+0x2f8>)
 800af1c:	4013      	ands	r3, r2
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f000 80dd 	beq.w	800b0de <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	f003 0301 	and.w	r3, r3, #1
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d010      	beq.n	800af50 <HAL_UART_IRQHandler+0xac>
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00b      	beq.n	800af50 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2201      	movs	r2, #1
 800af3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af46:	f043 0201 	orr.w	r2, r3, #1
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	f003 0302 	and.w	r3, r3, #2
 800af56:	2b00      	cmp	r3, #0
 800af58:	d010      	beq.n	800af7c <HAL_UART_IRQHandler+0xd8>
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	f003 0301 	and.w	r3, r3, #1
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00b      	beq.n	800af7c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2202      	movs	r2, #2
 800af6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af72:	f043 0204 	orr.w	r2, r3, #4
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	f003 0304 	and.w	r3, r3, #4
 800af82:	2b00      	cmp	r3, #0
 800af84:	d010      	beq.n	800afa8 <HAL_UART_IRQHandler+0x104>
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00b      	beq.n	800afa8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2204      	movs	r2, #4
 800af96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af9e:	f043 0202 	orr.w	r2, r3, #2
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	f003 0308 	and.w	r3, r3, #8
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d015      	beq.n	800afde <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	f003 0320 	and.w	r3, r3, #32
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d104      	bne.n	800afc6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800afbc:	697a      	ldr	r2, [r7, #20]
 800afbe:	4b76      	ldr	r3, [pc, #472]	; (800b198 <HAL_UART_IRQHandler+0x2f4>)
 800afc0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00b      	beq.n	800afde <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2208      	movs	r2, #8
 800afcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afd4:	f043 0208 	orr.w	r2, r3, #8
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d011      	beq.n	800b00c <HAL_UART_IRQHandler+0x168>
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00c      	beq.n	800b00c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800affa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b002:	f043 0220 	orr.w	r2, r3, #32
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 80b9 	beq.w	800b18a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	f003 0320 	and.w	r3, r3, #32
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d011      	beq.n	800b046 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	f003 0320 	and.w	r3, r3, #32
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d104      	bne.n	800b036 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b032:	2b00      	cmp	r3, #0
 800b034:	d007      	beq.n	800b046 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d003      	beq.n	800b046 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b04c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b058:	2b40      	cmp	r3, #64	; 0x40
 800b05a:	d004      	beq.n	800b066 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b062:	2b00      	cmp	r3, #0
 800b064:	d031      	beq.n	800b0ca <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 ffca 	bl	800c000 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b076:	2b40      	cmp	r3, #64	; 0x40
 800b078:	d123      	bne.n	800b0c2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	689a      	ldr	r2, [r3, #8]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b088:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d013      	beq.n	800b0ba <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b096:	4a42      	ldr	r2, [pc, #264]	; (800b1a0 <HAL_UART_IRQHandler+0x2fc>)
 800b098:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7f9 fdd2 	bl	8004c48 <HAL_DMA_Abort_IT>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d017      	beq.n	800b0da <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800b0b4:	4610      	mov	r0, r2
 800b0b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0b8:	e00f      	b.n	800b0da <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 f87c 	bl	800b1b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0c0:	e00b      	b.n	800b0da <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 f878 	bl	800b1b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0c8:	e007      	b.n	800b0da <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 f874 	bl	800b1b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800b0d8:	e057      	b.n	800b18a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0da:	bf00      	nop
    return;
 800b0dc:	e055      	b.n	800b18a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00d      	beq.n	800b104 <HAL_UART_IRQHandler+0x260>
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d008      	beq.n	800b104 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b0fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f001 f985 	bl	800c40c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b102:	e045      	b.n	800b190 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d012      	beq.n	800b134 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b114:	2b00      	cmp	r3, #0
 800b116:	d104      	bne.n	800b122 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d008      	beq.n	800b134 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b126:	2b00      	cmp	r3, #0
 800b128:	d031      	beq.n	800b18e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	4798      	blx	r3
    }
    return;
 800b132:	e02c      	b.n	800b18e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d008      	beq.n	800b150 <HAL_UART_IRQHandler+0x2ac>
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b144:	2b00      	cmp	r3, #0
 800b146:	d003      	beq.n	800b150 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 ff93 	bl	800c074 <UART_EndTransmit_IT>
    return;
 800b14e:	e01f      	b.n	800b190 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b156:	2b00      	cmp	r3, #0
 800b158:	d008      	beq.n	800b16c <HAL_UART_IRQHandler+0x2c8>
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b160:	2b00      	cmp	r3, #0
 800b162:	d003      	beq.n	800b16c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f001 f965 	bl	800c434 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b16a:	e011      	b.n	800b190 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00c      	beq.n	800b190 <HAL_UART_IRQHandler+0x2ec>
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	da09      	bge.n	800b190 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f001 f94f 	bl	800c420 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b182:	bf00      	nop
 800b184:	e004      	b.n	800b190 <HAL_UART_IRQHandler+0x2ec>
      return;
 800b186:	bf00      	nop
 800b188:	e002      	b.n	800b190 <HAL_UART_IRQHandler+0x2ec>
    return;
 800b18a:	bf00      	nop
 800b18c:	e000      	b.n	800b190 <HAL_UART_IRQHandler+0x2ec>
    return;
 800b18e:	bf00      	nop
  }
}
 800b190:	3720      	adds	r7, #32
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	10000001 	.word	0x10000001
 800b19c:	04000120 	.word	0x04000120
 800b1a0:	0800c049 	.word	0x0800c049

0800b1a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b1c0:	bf00      	nop
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1cc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b1d0:	b08e      	sub	sp, #56	; 0x38
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	689a      	ldr	r2, [r3, #8]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	691b      	ldr	r3, [r3, #16]
 800b1e4:	431a      	orrs	r2, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	695b      	ldr	r3, [r3, #20]
 800b1ea:	431a      	orrs	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	69db      	ldr	r3, [r3, #28]
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	4bc1      	ldr	r3, [pc, #772]	; (800b50c <UART_SetConfig+0x340>)
 800b206:	4013      	ands	r3, r2
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	6812      	ldr	r2, [r2, #0]
 800b20c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b20e:	430b      	orrs	r3, r1
 800b210:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	68da      	ldr	r2, [r3, #12]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	430a      	orrs	r2, r1
 800b226:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	699b      	ldr	r3, [r3, #24]
 800b22c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4ab7      	ldr	r2, [pc, #732]	; (800b510 <UART_SetConfig+0x344>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d004      	beq.n	800b242 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6a1b      	ldr	r3, [r3, #32]
 800b23c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b23e:	4313      	orrs	r3, r2
 800b240:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	689a      	ldr	r2, [r3, #8]
 800b248:	4bb2      	ldr	r3, [pc, #712]	; (800b514 <UART_SetConfig+0x348>)
 800b24a:	4013      	ands	r3, r2
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	6812      	ldr	r2, [r2, #0]
 800b250:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b252:	430b      	orrs	r3, r1
 800b254:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25c:	f023 010f 	bic.w	r1, r3, #15
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	430a      	orrs	r2, r1
 800b26a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4aa9      	ldr	r2, [pc, #676]	; (800b518 <UART_SetConfig+0x34c>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d177      	bne.n	800b366 <UART_SetConfig+0x19a>
 800b276:	4ba9      	ldr	r3, [pc, #676]	; (800b51c <UART_SetConfig+0x350>)
 800b278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b27a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b27e:	2b28      	cmp	r3, #40	; 0x28
 800b280:	d86c      	bhi.n	800b35c <UART_SetConfig+0x190>
 800b282:	a201      	add	r2, pc, #4	; (adr r2, 800b288 <UART_SetConfig+0xbc>)
 800b284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b288:	0800b32d 	.word	0x0800b32d
 800b28c:	0800b35d 	.word	0x0800b35d
 800b290:	0800b35d 	.word	0x0800b35d
 800b294:	0800b35d 	.word	0x0800b35d
 800b298:	0800b35d 	.word	0x0800b35d
 800b29c:	0800b35d 	.word	0x0800b35d
 800b2a0:	0800b35d 	.word	0x0800b35d
 800b2a4:	0800b35d 	.word	0x0800b35d
 800b2a8:	0800b335 	.word	0x0800b335
 800b2ac:	0800b35d 	.word	0x0800b35d
 800b2b0:	0800b35d 	.word	0x0800b35d
 800b2b4:	0800b35d 	.word	0x0800b35d
 800b2b8:	0800b35d 	.word	0x0800b35d
 800b2bc:	0800b35d 	.word	0x0800b35d
 800b2c0:	0800b35d 	.word	0x0800b35d
 800b2c4:	0800b35d 	.word	0x0800b35d
 800b2c8:	0800b33d 	.word	0x0800b33d
 800b2cc:	0800b35d 	.word	0x0800b35d
 800b2d0:	0800b35d 	.word	0x0800b35d
 800b2d4:	0800b35d 	.word	0x0800b35d
 800b2d8:	0800b35d 	.word	0x0800b35d
 800b2dc:	0800b35d 	.word	0x0800b35d
 800b2e0:	0800b35d 	.word	0x0800b35d
 800b2e4:	0800b35d 	.word	0x0800b35d
 800b2e8:	0800b345 	.word	0x0800b345
 800b2ec:	0800b35d 	.word	0x0800b35d
 800b2f0:	0800b35d 	.word	0x0800b35d
 800b2f4:	0800b35d 	.word	0x0800b35d
 800b2f8:	0800b35d 	.word	0x0800b35d
 800b2fc:	0800b35d 	.word	0x0800b35d
 800b300:	0800b35d 	.word	0x0800b35d
 800b304:	0800b35d 	.word	0x0800b35d
 800b308:	0800b34d 	.word	0x0800b34d
 800b30c:	0800b35d 	.word	0x0800b35d
 800b310:	0800b35d 	.word	0x0800b35d
 800b314:	0800b35d 	.word	0x0800b35d
 800b318:	0800b35d 	.word	0x0800b35d
 800b31c:	0800b35d 	.word	0x0800b35d
 800b320:	0800b35d 	.word	0x0800b35d
 800b324:	0800b35d 	.word	0x0800b35d
 800b328:	0800b355 	.word	0x0800b355
 800b32c:	2301      	movs	r3, #1
 800b32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b332:	e233      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b334:	2304      	movs	r3, #4
 800b336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b33a:	e22f      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b33c:	2308      	movs	r3, #8
 800b33e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b342:	e22b      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b344:	2310      	movs	r3, #16
 800b346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b34a:	e227      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b34c:	2320      	movs	r3, #32
 800b34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b352:	e223      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b354:	2340      	movs	r3, #64	; 0x40
 800b356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b35a:	e21f      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b35c:	2380      	movs	r3, #128	; 0x80
 800b35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b362:	bf00      	nop
 800b364:	e21a      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a6d      	ldr	r2, [pc, #436]	; (800b520 <UART_SetConfig+0x354>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d132      	bne.n	800b3d6 <UART_SetConfig+0x20a>
 800b370:	4b6a      	ldr	r3, [pc, #424]	; (800b51c <UART_SetConfig+0x350>)
 800b372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b374:	f003 0307 	and.w	r3, r3, #7
 800b378:	2b05      	cmp	r3, #5
 800b37a:	d827      	bhi.n	800b3cc <UART_SetConfig+0x200>
 800b37c:	a201      	add	r2, pc, #4	; (adr r2, 800b384 <UART_SetConfig+0x1b8>)
 800b37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b382:	bf00      	nop
 800b384:	0800b39d 	.word	0x0800b39d
 800b388:	0800b3a5 	.word	0x0800b3a5
 800b38c:	0800b3ad 	.word	0x0800b3ad
 800b390:	0800b3b5 	.word	0x0800b3b5
 800b394:	0800b3bd 	.word	0x0800b3bd
 800b398:	0800b3c5 	.word	0x0800b3c5
 800b39c:	2300      	movs	r3, #0
 800b39e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3a2:	e1fb      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b3a4:	2304      	movs	r3, #4
 800b3a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3aa:	e1f7      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b3ac:	2308      	movs	r3, #8
 800b3ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3b2:	e1f3      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b3b4:	2310      	movs	r3, #16
 800b3b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ba:	e1ef      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b3bc:	2320      	movs	r3, #32
 800b3be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3c2:	e1eb      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b3c4:	2340      	movs	r3, #64	; 0x40
 800b3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ca:	e1e7      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b3cc:	2380      	movs	r3, #128	; 0x80
 800b3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3d2:	bf00      	nop
 800b3d4:	e1e2      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a52      	ldr	r2, [pc, #328]	; (800b524 <UART_SetConfig+0x358>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d132      	bne.n	800b446 <UART_SetConfig+0x27a>
 800b3e0:	4b4e      	ldr	r3, [pc, #312]	; (800b51c <UART_SetConfig+0x350>)
 800b3e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3e4:	f003 0307 	and.w	r3, r3, #7
 800b3e8:	2b05      	cmp	r3, #5
 800b3ea:	d827      	bhi.n	800b43c <UART_SetConfig+0x270>
 800b3ec:	a201      	add	r2, pc, #4	; (adr r2, 800b3f4 <UART_SetConfig+0x228>)
 800b3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f2:	bf00      	nop
 800b3f4:	0800b40d 	.word	0x0800b40d
 800b3f8:	0800b415 	.word	0x0800b415
 800b3fc:	0800b41d 	.word	0x0800b41d
 800b400:	0800b425 	.word	0x0800b425
 800b404:	0800b42d 	.word	0x0800b42d
 800b408:	0800b435 	.word	0x0800b435
 800b40c:	2300      	movs	r3, #0
 800b40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b412:	e1c3      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b414:	2304      	movs	r3, #4
 800b416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b41a:	e1bf      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b41c:	2308      	movs	r3, #8
 800b41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b422:	e1bb      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b424:	2310      	movs	r3, #16
 800b426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b42a:	e1b7      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b42c:	2320      	movs	r3, #32
 800b42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b432:	e1b3      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b434:	2340      	movs	r3, #64	; 0x40
 800b436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b43a:	e1af      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b43c:	2380      	movs	r3, #128	; 0x80
 800b43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b442:	bf00      	nop
 800b444:	e1aa      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a37      	ldr	r2, [pc, #220]	; (800b528 <UART_SetConfig+0x35c>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d132      	bne.n	800b4b6 <UART_SetConfig+0x2ea>
 800b450:	4b32      	ldr	r3, [pc, #200]	; (800b51c <UART_SetConfig+0x350>)
 800b452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b454:	f003 0307 	and.w	r3, r3, #7
 800b458:	2b05      	cmp	r3, #5
 800b45a:	d827      	bhi.n	800b4ac <UART_SetConfig+0x2e0>
 800b45c:	a201      	add	r2, pc, #4	; (adr r2, 800b464 <UART_SetConfig+0x298>)
 800b45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b462:	bf00      	nop
 800b464:	0800b47d 	.word	0x0800b47d
 800b468:	0800b485 	.word	0x0800b485
 800b46c:	0800b48d 	.word	0x0800b48d
 800b470:	0800b495 	.word	0x0800b495
 800b474:	0800b49d 	.word	0x0800b49d
 800b478:	0800b4a5 	.word	0x0800b4a5
 800b47c:	2300      	movs	r3, #0
 800b47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b482:	e18b      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b484:	2304      	movs	r3, #4
 800b486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b48a:	e187      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b48c:	2308      	movs	r3, #8
 800b48e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b492:	e183      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b494:	2310      	movs	r3, #16
 800b496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b49a:	e17f      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b49c:	2320      	movs	r3, #32
 800b49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4a2:	e17b      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b4a4:	2340      	movs	r3, #64	; 0x40
 800b4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4aa:	e177      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b4ac:	2380      	movs	r3, #128	; 0x80
 800b4ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4b2:	bf00      	nop
 800b4b4:	e172      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a1c      	ldr	r2, [pc, #112]	; (800b52c <UART_SetConfig+0x360>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d144      	bne.n	800b54a <UART_SetConfig+0x37e>
 800b4c0:	4b16      	ldr	r3, [pc, #88]	; (800b51c <UART_SetConfig+0x350>)
 800b4c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4c4:	f003 0307 	and.w	r3, r3, #7
 800b4c8:	2b05      	cmp	r3, #5
 800b4ca:	d839      	bhi.n	800b540 <UART_SetConfig+0x374>
 800b4cc:	a201      	add	r2, pc, #4	; (adr r2, 800b4d4 <UART_SetConfig+0x308>)
 800b4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d2:	bf00      	nop
 800b4d4:	0800b4ed 	.word	0x0800b4ed
 800b4d8:	0800b4f5 	.word	0x0800b4f5
 800b4dc:	0800b4fd 	.word	0x0800b4fd
 800b4e0:	0800b505 	.word	0x0800b505
 800b4e4:	0800b531 	.word	0x0800b531
 800b4e8:	0800b539 	.word	0x0800b539
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4f2:	e153      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b4f4:	2304      	movs	r3, #4
 800b4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4fa:	e14f      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b4fc:	2308      	movs	r3, #8
 800b4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b502:	e14b      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b504:	2310      	movs	r3, #16
 800b506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b50a:	e147      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b50c:	cfff69f3 	.word	0xcfff69f3
 800b510:	58000c00 	.word	0x58000c00
 800b514:	11fff4ff 	.word	0x11fff4ff
 800b518:	40011000 	.word	0x40011000
 800b51c:	58024400 	.word	0x58024400
 800b520:	40004400 	.word	0x40004400
 800b524:	40004800 	.word	0x40004800
 800b528:	40004c00 	.word	0x40004c00
 800b52c:	40005000 	.word	0x40005000
 800b530:	2320      	movs	r3, #32
 800b532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b536:	e131      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b538:	2340      	movs	r3, #64	; 0x40
 800b53a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b53e:	e12d      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b540:	2380      	movs	r3, #128	; 0x80
 800b542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b546:	bf00      	nop
 800b548:	e128      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4ab6      	ldr	r2, [pc, #728]	; (800b828 <UART_SetConfig+0x65c>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d178      	bne.n	800b646 <UART_SetConfig+0x47a>
 800b554:	4bb5      	ldr	r3, [pc, #724]	; (800b82c <UART_SetConfig+0x660>)
 800b556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b558:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b55c:	2b28      	cmp	r3, #40	; 0x28
 800b55e:	d86d      	bhi.n	800b63c <UART_SetConfig+0x470>
 800b560:	a201      	add	r2, pc, #4	; (adr r2, 800b568 <UART_SetConfig+0x39c>)
 800b562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b566:	bf00      	nop
 800b568:	0800b60d 	.word	0x0800b60d
 800b56c:	0800b63d 	.word	0x0800b63d
 800b570:	0800b63d 	.word	0x0800b63d
 800b574:	0800b63d 	.word	0x0800b63d
 800b578:	0800b63d 	.word	0x0800b63d
 800b57c:	0800b63d 	.word	0x0800b63d
 800b580:	0800b63d 	.word	0x0800b63d
 800b584:	0800b63d 	.word	0x0800b63d
 800b588:	0800b615 	.word	0x0800b615
 800b58c:	0800b63d 	.word	0x0800b63d
 800b590:	0800b63d 	.word	0x0800b63d
 800b594:	0800b63d 	.word	0x0800b63d
 800b598:	0800b63d 	.word	0x0800b63d
 800b59c:	0800b63d 	.word	0x0800b63d
 800b5a0:	0800b63d 	.word	0x0800b63d
 800b5a4:	0800b63d 	.word	0x0800b63d
 800b5a8:	0800b61d 	.word	0x0800b61d
 800b5ac:	0800b63d 	.word	0x0800b63d
 800b5b0:	0800b63d 	.word	0x0800b63d
 800b5b4:	0800b63d 	.word	0x0800b63d
 800b5b8:	0800b63d 	.word	0x0800b63d
 800b5bc:	0800b63d 	.word	0x0800b63d
 800b5c0:	0800b63d 	.word	0x0800b63d
 800b5c4:	0800b63d 	.word	0x0800b63d
 800b5c8:	0800b625 	.word	0x0800b625
 800b5cc:	0800b63d 	.word	0x0800b63d
 800b5d0:	0800b63d 	.word	0x0800b63d
 800b5d4:	0800b63d 	.word	0x0800b63d
 800b5d8:	0800b63d 	.word	0x0800b63d
 800b5dc:	0800b63d 	.word	0x0800b63d
 800b5e0:	0800b63d 	.word	0x0800b63d
 800b5e4:	0800b63d 	.word	0x0800b63d
 800b5e8:	0800b62d 	.word	0x0800b62d
 800b5ec:	0800b63d 	.word	0x0800b63d
 800b5f0:	0800b63d 	.word	0x0800b63d
 800b5f4:	0800b63d 	.word	0x0800b63d
 800b5f8:	0800b63d 	.word	0x0800b63d
 800b5fc:	0800b63d 	.word	0x0800b63d
 800b600:	0800b63d 	.word	0x0800b63d
 800b604:	0800b63d 	.word	0x0800b63d
 800b608:	0800b635 	.word	0x0800b635
 800b60c:	2301      	movs	r3, #1
 800b60e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b612:	e0c3      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b614:	2304      	movs	r3, #4
 800b616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b61a:	e0bf      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b61c:	2308      	movs	r3, #8
 800b61e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b622:	e0bb      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b624:	2310      	movs	r3, #16
 800b626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b62a:	e0b7      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b62c:	2320      	movs	r3, #32
 800b62e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b632:	e0b3      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b634:	2340      	movs	r3, #64	; 0x40
 800b636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b63a:	e0af      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b63c:	2380      	movs	r3, #128	; 0x80
 800b63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b642:	bf00      	nop
 800b644:	e0aa      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a79      	ldr	r2, [pc, #484]	; (800b830 <UART_SetConfig+0x664>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d132      	bne.n	800b6b6 <UART_SetConfig+0x4ea>
 800b650:	4b76      	ldr	r3, [pc, #472]	; (800b82c <UART_SetConfig+0x660>)
 800b652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b654:	f003 0307 	and.w	r3, r3, #7
 800b658:	2b05      	cmp	r3, #5
 800b65a:	d827      	bhi.n	800b6ac <UART_SetConfig+0x4e0>
 800b65c:	a201      	add	r2, pc, #4	; (adr r2, 800b664 <UART_SetConfig+0x498>)
 800b65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b662:	bf00      	nop
 800b664:	0800b67d 	.word	0x0800b67d
 800b668:	0800b685 	.word	0x0800b685
 800b66c:	0800b68d 	.word	0x0800b68d
 800b670:	0800b695 	.word	0x0800b695
 800b674:	0800b69d 	.word	0x0800b69d
 800b678:	0800b6a5 	.word	0x0800b6a5
 800b67c:	2300      	movs	r3, #0
 800b67e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b682:	e08b      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b684:	2304      	movs	r3, #4
 800b686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b68a:	e087      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b68c:	2308      	movs	r3, #8
 800b68e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b692:	e083      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b694:	2310      	movs	r3, #16
 800b696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b69a:	e07f      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b69c:	2320      	movs	r3, #32
 800b69e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6a2:	e07b      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b6a4:	2340      	movs	r3, #64	; 0x40
 800b6a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6aa:	e077      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b6ac:	2380      	movs	r3, #128	; 0x80
 800b6ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6b2:	bf00      	nop
 800b6b4:	e072      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a5e      	ldr	r2, [pc, #376]	; (800b834 <UART_SetConfig+0x668>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d132      	bne.n	800b726 <UART_SetConfig+0x55a>
 800b6c0:	4b5a      	ldr	r3, [pc, #360]	; (800b82c <UART_SetConfig+0x660>)
 800b6c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6c4:	f003 0307 	and.w	r3, r3, #7
 800b6c8:	2b05      	cmp	r3, #5
 800b6ca:	d827      	bhi.n	800b71c <UART_SetConfig+0x550>
 800b6cc:	a201      	add	r2, pc, #4	; (adr r2, 800b6d4 <UART_SetConfig+0x508>)
 800b6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d2:	bf00      	nop
 800b6d4:	0800b6ed 	.word	0x0800b6ed
 800b6d8:	0800b6f5 	.word	0x0800b6f5
 800b6dc:	0800b6fd 	.word	0x0800b6fd
 800b6e0:	0800b705 	.word	0x0800b705
 800b6e4:	0800b70d 	.word	0x0800b70d
 800b6e8:	0800b715 	.word	0x0800b715
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6f2:	e053      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b6f4:	2304      	movs	r3, #4
 800b6f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6fa:	e04f      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b6fc:	2308      	movs	r3, #8
 800b6fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b702:	e04b      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b704:	2310      	movs	r3, #16
 800b706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b70a:	e047      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b70c:	2320      	movs	r3, #32
 800b70e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b712:	e043      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b714:	2340      	movs	r3, #64	; 0x40
 800b716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b71a:	e03f      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b71c:	2380      	movs	r3, #128	; 0x80
 800b71e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b722:	bf00      	nop
 800b724:	e03a      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a43      	ldr	r2, [pc, #268]	; (800b838 <UART_SetConfig+0x66c>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d132      	bne.n	800b796 <UART_SetConfig+0x5ca>
 800b730:	4b3e      	ldr	r3, [pc, #248]	; (800b82c <UART_SetConfig+0x660>)
 800b732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b734:	f003 0307 	and.w	r3, r3, #7
 800b738:	2b05      	cmp	r3, #5
 800b73a:	d827      	bhi.n	800b78c <UART_SetConfig+0x5c0>
 800b73c:	a201      	add	r2, pc, #4	; (adr r2, 800b744 <UART_SetConfig+0x578>)
 800b73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b742:	bf00      	nop
 800b744:	0800b75d 	.word	0x0800b75d
 800b748:	0800b765 	.word	0x0800b765
 800b74c:	0800b76d 	.word	0x0800b76d
 800b750:	0800b775 	.word	0x0800b775
 800b754:	0800b77d 	.word	0x0800b77d
 800b758:	0800b785 	.word	0x0800b785
 800b75c:	2302      	movs	r3, #2
 800b75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b762:	e01b      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b764:	2304      	movs	r3, #4
 800b766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b76a:	e017      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b76c:	2308      	movs	r3, #8
 800b76e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b772:	e013      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b774:	2310      	movs	r3, #16
 800b776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b77a:	e00f      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b77c:	2320      	movs	r3, #32
 800b77e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b782:	e00b      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b784:	2340      	movs	r3, #64	; 0x40
 800b786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b78a:	e007      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b78c:	2380      	movs	r3, #128	; 0x80
 800b78e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b792:	bf00      	nop
 800b794:	e002      	b.n	800b79c <UART_SetConfig+0x5d0>
 800b796:	2380      	movs	r3, #128	; 0x80
 800b798:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a25      	ldr	r2, [pc, #148]	; (800b838 <UART_SetConfig+0x66c>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	f040 80b8 	bne.w	800b918 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b7a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b7ac:	2b08      	cmp	r3, #8
 800b7ae:	d019      	beq.n	800b7e4 <UART_SetConfig+0x618>
 800b7b0:	2b08      	cmp	r3, #8
 800b7b2:	dc04      	bgt.n	800b7be <UART_SetConfig+0x5f2>
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	d009      	beq.n	800b7cc <UART_SetConfig+0x600>
 800b7b8:	2b04      	cmp	r3, #4
 800b7ba:	d00b      	beq.n	800b7d4 <UART_SetConfig+0x608>
 800b7bc:	e042      	b.n	800b844 <UART_SetConfig+0x678>
 800b7be:	2b20      	cmp	r3, #32
 800b7c0:	d02b      	beq.n	800b81a <UART_SetConfig+0x64e>
 800b7c2:	2b40      	cmp	r3, #64	; 0x40
 800b7c4:	d02c      	beq.n	800b820 <UART_SetConfig+0x654>
 800b7c6:	2b10      	cmp	r3, #16
 800b7c8:	d014      	beq.n	800b7f4 <UART_SetConfig+0x628>
 800b7ca:	e03b      	b.n	800b844 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b7cc:	f7fe f94e 	bl	8009a6c <HAL_RCCEx_GetD3PCLK1Freq>
 800b7d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b7d2:	e03d      	b.n	800b850 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7d4:	f107 0314 	add.w	r3, r7, #20
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7fe f95d 	bl	8009a98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7e2:	e035      	b.n	800b850 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7e4:	f107 0308 	add.w	r3, r7, #8
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fe faa1 	bl	8009d30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7f2:	e02d      	b.n	800b850 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7f4:	4b0d      	ldr	r3, [pc, #52]	; (800b82c <UART_SetConfig+0x660>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 0320 	and.w	r3, r3, #32
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d009      	beq.n	800b814 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b800:	4b0a      	ldr	r3, [pc, #40]	; (800b82c <UART_SetConfig+0x660>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	08db      	lsrs	r3, r3, #3
 800b806:	f003 0303 	and.w	r3, r3, #3
 800b80a:	4a0c      	ldr	r2, [pc, #48]	; (800b83c <UART_SetConfig+0x670>)
 800b80c:	fa22 f303 	lsr.w	r3, r2, r3
 800b810:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b812:	e01d      	b.n	800b850 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800b814:	4b09      	ldr	r3, [pc, #36]	; (800b83c <UART_SetConfig+0x670>)
 800b816:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b818:	e01a      	b.n	800b850 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b81a:	4b09      	ldr	r3, [pc, #36]	; (800b840 <UART_SetConfig+0x674>)
 800b81c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b81e:	e017      	b.n	800b850 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b824:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b826:	e013      	b.n	800b850 <UART_SetConfig+0x684>
 800b828:	40011400 	.word	0x40011400
 800b82c:	58024400 	.word	0x58024400
 800b830:	40007800 	.word	0x40007800
 800b834:	40007c00 	.word	0x40007c00
 800b838:	58000c00 	.word	0x58000c00
 800b83c:	03d09000 	.word	0x03d09000
 800b840:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b844:	2300      	movs	r3, #0
 800b846:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b84e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b852:	2b00      	cmp	r3, #0
 800b854:	f000 824d 	beq.w	800bcf2 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85c:	4aad      	ldr	r2, [pc, #692]	; (800bb14 <UART_SetConfig+0x948>)
 800b85e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b862:	461a      	mov	r2, r3
 800b864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b866:	fbb3 f3f2 	udiv	r3, r3, r2
 800b86a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	685a      	ldr	r2, [r3, #4]
 800b870:	4613      	mov	r3, r2
 800b872:	005b      	lsls	r3, r3, #1
 800b874:	4413      	add	r3, r2
 800b876:	6a3a      	ldr	r2, [r7, #32]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d305      	bcc.n	800b888 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b882:	6a3a      	ldr	r2, [r7, #32]
 800b884:	429a      	cmp	r2, r3
 800b886:	d903      	bls.n	800b890 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800b888:	2301      	movs	r3, #1
 800b88a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b88e:	e230      	b.n	800bcf2 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b892:	4618      	mov	r0, r3
 800b894:	f04f 0100 	mov.w	r1, #0
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89c:	4a9d      	ldr	r2, [pc, #628]	; (800bb14 <UART_SetConfig+0x948>)
 800b89e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	f04f 0400 	mov.w	r4, #0
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	4623      	mov	r3, r4
 800b8ac:	f7f4 fd1c 	bl	80002e8 <__aeabi_uldivmod>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	4622      	mov	r2, r4
 800b8b8:	f04f 0300 	mov.w	r3, #0
 800b8bc:	f04f 0400 	mov.w	r4, #0
 800b8c0:	0214      	lsls	r4, r2, #8
 800b8c2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b8c6:	020b      	lsls	r3, r1, #8
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	6852      	ldr	r2, [r2, #4]
 800b8cc:	0852      	lsrs	r2, r2, #1
 800b8ce:	4611      	mov	r1, r2
 800b8d0:	f04f 0200 	mov.w	r2, #0
 800b8d4:	eb13 0b01 	adds.w	fp, r3, r1
 800b8d8:	eb44 0c02 	adc.w	ip, r4, r2
 800b8dc:	4658      	mov	r0, fp
 800b8de:	4661      	mov	r1, ip
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	f04f 0400 	mov.w	r4, #0
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	4623      	mov	r3, r4
 800b8ec:	f7f4 fcfc 	bl	80002e8 <__aeabi_uldivmod>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	460c      	mov	r4, r1
 800b8f4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8fc:	d308      	bcc.n	800b910 <UART_SetConfig+0x744>
 800b8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b904:	d204      	bcs.n	800b910 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b90c:	60da      	str	r2, [r3, #12]
 800b90e:	e1f0      	b.n	800bcf2 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800b910:	2301      	movs	r3, #1
 800b912:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b916:	e1ec      	b.n	800bcf2 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	69db      	ldr	r3, [r3, #28]
 800b91c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b920:	f040 8100 	bne.w	800bb24 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800b924:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b928:	2b40      	cmp	r3, #64	; 0x40
 800b92a:	f200 80b7 	bhi.w	800ba9c <UART_SetConfig+0x8d0>
 800b92e:	a201      	add	r2, pc, #4	; (adr r2, 800b934 <UART_SetConfig+0x768>)
 800b930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b934:	0800ba39 	.word	0x0800ba39
 800b938:	0800ba41 	.word	0x0800ba41
 800b93c:	0800ba9d 	.word	0x0800ba9d
 800b940:	0800ba9d 	.word	0x0800ba9d
 800b944:	0800ba49 	.word	0x0800ba49
 800b948:	0800ba9d 	.word	0x0800ba9d
 800b94c:	0800ba9d 	.word	0x0800ba9d
 800b950:	0800ba9d 	.word	0x0800ba9d
 800b954:	0800ba59 	.word	0x0800ba59
 800b958:	0800ba9d 	.word	0x0800ba9d
 800b95c:	0800ba9d 	.word	0x0800ba9d
 800b960:	0800ba9d 	.word	0x0800ba9d
 800b964:	0800ba9d 	.word	0x0800ba9d
 800b968:	0800ba9d 	.word	0x0800ba9d
 800b96c:	0800ba9d 	.word	0x0800ba9d
 800b970:	0800ba9d 	.word	0x0800ba9d
 800b974:	0800ba69 	.word	0x0800ba69
 800b978:	0800ba9d 	.word	0x0800ba9d
 800b97c:	0800ba9d 	.word	0x0800ba9d
 800b980:	0800ba9d 	.word	0x0800ba9d
 800b984:	0800ba9d 	.word	0x0800ba9d
 800b988:	0800ba9d 	.word	0x0800ba9d
 800b98c:	0800ba9d 	.word	0x0800ba9d
 800b990:	0800ba9d 	.word	0x0800ba9d
 800b994:	0800ba9d 	.word	0x0800ba9d
 800b998:	0800ba9d 	.word	0x0800ba9d
 800b99c:	0800ba9d 	.word	0x0800ba9d
 800b9a0:	0800ba9d 	.word	0x0800ba9d
 800b9a4:	0800ba9d 	.word	0x0800ba9d
 800b9a8:	0800ba9d 	.word	0x0800ba9d
 800b9ac:	0800ba9d 	.word	0x0800ba9d
 800b9b0:	0800ba9d 	.word	0x0800ba9d
 800b9b4:	0800ba8f 	.word	0x0800ba8f
 800b9b8:	0800ba9d 	.word	0x0800ba9d
 800b9bc:	0800ba9d 	.word	0x0800ba9d
 800b9c0:	0800ba9d 	.word	0x0800ba9d
 800b9c4:	0800ba9d 	.word	0x0800ba9d
 800b9c8:	0800ba9d 	.word	0x0800ba9d
 800b9cc:	0800ba9d 	.word	0x0800ba9d
 800b9d0:	0800ba9d 	.word	0x0800ba9d
 800b9d4:	0800ba9d 	.word	0x0800ba9d
 800b9d8:	0800ba9d 	.word	0x0800ba9d
 800b9dc:	0800ba9d 	.word	0x0800ba9d
 800b9e0:	0800ba9d 	.word	0x0800ba9d
 800b9e4:	0800ba9d 	.word	0x0800ba9d
 800b9e8:	0800ba9d 	.word	0x0800ba9d
 800b9ec:	0800ba9d 	.word	0x0800ba9d
 800b9f0:	0800ba9d 	.word	0x0800ba9d
 800b9f4:	0800ba9d 	.word	0x0800ba9d
 800b9f8:	0800ba9d 	.word	0x0800ba9d
 800b9fc:	0800ba9d 	.word	0x0800ba9d
 800ba00:	0800ba9d 	.word	0x0800ba9d
 800ba04:	0800ba9d 	.word	0x0800ba9d
 800ba08:	0800ba9d 	.word	0x0800ba9d
 800ba0c:	0800ba9d 	.word	0x0800ba9d
 800ba10:	0800ba9d 	.word	0x0800ba9d
 800ba14:	0800ba9d 	.word	0x0800ba9d
 800ba18:	0800ba9d 	.word	0x0800ba9d
 800ba1c:	0800ba9d 	.word	0x0800ba9d
 800ba20:	0800ba9d 	.word	0x0800ba9d
 800ba24:	0800ba9d 	.word	0x0800ba9d
 800ba28:	0800ba9d 	.word	0x0800ba9d
 800ba2c:	0800ba9d 	.word	0x0800ba9d
 800ba30:	0800ba9d 	.word	0x0800ba9d
 800ba34:	0800ba95 	.word	0x0800ba95
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba38:	f7fd f8fe 	bl	8008c38 <HAL_RCC_GetPCLK1Freq>
 800ba3c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ba3e:	e033      	b.n	800baa8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba40:	f7fd f910 	bl	8008c64 <HAL_RCC_GetPCLK2Freq>
 800ba44:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ba46:	e02f      	b.n	800baa8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba48:	f107 0314 	add.w	r3, r7, #20
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7fe f823 	bl	8009a98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba56:	e027      	b.n	800baa8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba58:	f107 0308 	add.w	r3, r7, #8
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7fe f967 	bl	8009d30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba66:	e01f      	b.n	800baa8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba68:	4b2b      	ldr	r3, [pc, #172]	; (800bb18 <UART_SetConfig+0x94c>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f003 0320 	and.w	r3, r3, #32
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d009      	beq.n	800ba88 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba74:	4b28      	ldr	r3, [pc, #160]	; (800bb18 <UART_SetConfig+0x94c>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	08db      	lsrs	r3, r3, #3
 800ba7a:	f003 0303 	and.w	r3, r3, #3
 800ba7e:	4a27      	ldr	r2, [pc, #156]	; (800bb1c <UART_SetConfig+0x950>)
 800ba80:	fa22 f303 	lsr.w	r3, r2, r3
 800ba84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba86:	e00f      	b.n	800baa8 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800ba88:	4b24      	ldr	r3, [pc, #144]	; (800bb1c <UART_SetConfig+0x950>)
 800ba8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba8c:	e00c      	b.n	800baa8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba8e:	4b24      	ldr	r3, [pc, #144]	; (800bb20 <UART_SetConfig+0x954>)
 800ba90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba92:	e009      	b.n	800baa8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba9a:	e005      	b.n	800baa8 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800baa6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800baa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f000 8121 	beq.w	800bcf2 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab4:	4a17      	ldr	r2, [pc, #92]	; (800bb14 <UART_SetConfig+0x948>)
 800bab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800baba:	461a      	mov	r2, r3
 800babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babe:	fbb3 f3f2 	udiv	r3, r3, r2
 800bac2:	005a      	lsls	r2, r3, #1
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	085b      	lsrs	r3, r3, #1
 800baca:	441a      	add	r2, r3
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bada:	2b0f      	cmp	r3, #15
 800badc:	d916      	bls.n	800bb0c <UART_SetConfig+0x940>
 800bade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bae4:	d212      	bcs.n	800bb0c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae8:	b29b      	uxth	r3, r3
 800baea:	f023 030f 	bic.w	r3, r3, #15
 800baee:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800baf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf2:	085b      	lsrs	r3, r3, #1
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	f003 0307 	and.w	r3, r3, #7
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bafe:	4313      	orrs	r3, r2
 800bb00:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bb08:	60da      	str	r2, [r3, #12]
 800bb0a:	e0f2      	b.n	800bcf2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bb12:	e0ee      	b.n	800bcf2 <UART_SetConfig+0xb26>
 800bb14:	0800ebcc 	.word	0x0800ebcc
 800bb18:	58024400 	.word	0x58024400
 800bb1c:	03d09000 	.word	0x03d09000
 800bb20:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bb28:	2b40      	cmp	r3, #64	; 0x40
 800bb2a:	f200 80b7 	bhi.w	800bc9c <UART_SetConfig+0xad0>
 800bb2e:	a201      	add	r2, pc, #4	; (adr r2, 800bb34 <UART_SetConfig+0x968>)
 800bb30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb34:	0800bc39 	.word	0x0800bc39
 800bb38:	0800bc41 	.word	0x0800bc41
 800bb3c:	0800bc9d 	.word	0x0800bc9d
 800bb40:	0800bc9d 	.word	0x0800bc9d
 800bb44:	0800bc49 	.word	0x0800bc49
 800bb48:	0800bc9d 	.word	0x0800bc9d
 800bb4c:	0800bc9d 	.word	0x0800bc9d
 800bb50:	0800bc9d 	.word	0x0800bc9d
 800bb54:	0800bc59 	.word	0x0800bc59
 800bb58:	0800bc9d 	.word	0x0800bc9d
 800bb5c:	0800bc9d 	.word	0x0800bc9d
 800bb60:	0800bc9d 	.word	0x0800bc9d
 800bb64:	0800bc9d 	.word	0x0800bc9d
 800bb68:	0800bc9d 	.word	0x0800bc9d
 800bb6c:	0800bc9d 	.word	0x0800bc9d
 800bb70:	0800bc9d 	.word	0x0800bc9d
 800bb74:	0800bc69 	.word	0x0800bc69
 800bb78:	0800bc9d 	.word	0x0800bc9d
 800bb7c:	0800bc9d 	.word	0x0800bc9d
 800bb80:	0800bc9d 	.word	0x0800bc9d
 800bb84:	0800bc9d 	.word	0x0800bc9d
 800bb88:	0800bc9d 	.word	0x0800bc9d
 800bb8c:	0800bc9d 	.word	0x0800bc9d
 800bb90:	0800bc9d 	.word	0x0800bc9d
 800bb94:	0800bc9d 	.word	0x0800bc9d
 800bb98:	0800bc9d 	.word	0x0800bc9d
 800bb9c:	0800bc9d 	.word	0x0800bc9d
 800bba0:	0800bc9d 	.word	0x0800bc9d
 800bba4:	0800bc9d 	.word	0x0800bc9d
 800bba8:	0800bc9d 	.word	0x0800bc9d
 800bbac:	0800bc9d 	.word	0x0800bc9d
 800bbb0:	0800bc9d 	.word	0x0800bc9d
 800bbb4:	0800bc8f 	.word	0x0800bc8f
 800bbb8:	0800bc9d 	.word	0x0800bc9d
 800bbbc:	0800bc9d 	.word	0x0800bc9d
 800bbc0:	0800bc9d 	.word	0x0800bc9d
 800bbc4:	0800bc9d 	.word	0x0800bc9d
 800bbc8:	0800bc9d 	.word	0x0800bc9d
 800bbcc:	0800bc9d 	.word	0x0800bc9d
 800bbd0:	0800bc9d 	.word	0x0800bc9d
 800bbd4:	0800bc9d 	.word	0x0800bc9d
 800bbd8:	0800bc9d 	.word	0x0800bc9d
 800bbdc:	0800bc9d 	.word	0x0800bc9d
 800bbe0:	0800bc9d 	.word	0x0800bc9d
 800bbe4:	0800bc9d 	.word	0x0800bc9d
 800bbe8:	0800bc9d 	.word	0x0800bc9d
 800bbec:	0800bc9d 	.word	0x0800bc9d
 800bbf0:	0800bc9d 	.word	0x0800bc9d
 800bbf4:	0800bc9d 	.word	0x0800bc9d
 800bbf8:	0800bc9d 	.word	0x0800bc9d
 800bbfc:	0800bc9d 	.word	0x0800bc9d
 800bc00:	0800bc9d 	.word	0x0800bc9d
 800bc04:	0800bc9d 	.word	0x0800bc9d
 800bc08:	0800bc9d 	.word	0x0800bc9d
 800bc0c:	0800bc9d 	.word	0x0800bc9d
 800bc10:	0800bc9d 	.word	0x0800bc9d
 800bc14:	0800bc9d 	.word	0x0800bc9d
 800bc18:	0800bc9d 	.word	0x0800bc9d
 800bc1c:	0800bc9d 	.word	0x0800bc9d
 800bc20:	0800bc9d 	.word	0x0800bc9d
 800bc24:	0800bc9d 	.word	0x0800bc9d
 800bc28:	0800bc9d 	.word	0x0800bc9d
 800bc2c:	0800bc9d 	.word	0x0800bc9d
 800bc30:	0800bc9d 	.word	0x0800bc9d
 800bc34:	0800bc95 	.word	0x0800bc95
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc38:	f7fc fffe 	bl	8008c38 <HAL_RCC_GetPCLK1Freq>
 800bc3c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bc3e:	e033      	b.n	800bca8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc40:	f7fd f810 	bl	8008c64 <HAL_RCC_GetPCLK2Freq>
 800bc44:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bc46:	e02f      	b.n	800bca8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc48:	f107 0314 	add.w	r3, r7, #20
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7fd ff23 	bl	8009a98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bc56:	e027      	b.n	800bca8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc58:	f107 0308 	add.w	r3, r7, #8
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fe f867 	bl	8009d30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bc66:	e01f      	b.n	800bca8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc68:	4b2c      	ldr	r3, [pc, #176]	; (800bd1c <UART_SetConfig+0xb50>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f003 0320 	and.w	r3, r3, #32
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d009      	beq.n	800bc88 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc74:	4b29      	ldr	r3, [pc, #164]	; (800bd1c <UART_SetConfig+0xb50>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	08db      	lsrs	r3, r3, #3
 800bc7a:	f003 0303 	and.w	r3, r3, #3
 800bc7e:	4a28      	ldr	r2, [pc, #160]	; (800bd20 <UART_SetConfig+0xb54>)
 800bc80:	fa22 f303 	lsr.w	r3, r2, r3
 800bc84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc86:	e00f      	b.n	800bca8 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800bc88:	4b25      	ldr	r3, [pc, #148]	; (800bd20 <UART_SetConfig+0xb54>)
 800bc8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bc8c:	e00c      	b.n	800bca8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc8e:	4b25      	ldr	r3, [pc, #148]	; (800bd24 <UART_SetConfig+0xb58>)
 800bc90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bc92:	e009      	b.n	800bca8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bc9a:	e005      	b.n	800bca8 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bca0:	2301      	movs	r3, #1
 800bca2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bca6:	bf00      	nop
    }

    if (pclk != 0U)
 800bca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d021      	beq.n	800bcf2 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb2:	4a1d      	ldr	r2, [pc, #116]	; (800bd28 <UART_SetConfig+0xb5c>)
 800bcb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcb8:	461a      	mov	r2, r3
 800bcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcbc:	fbb3 f2f2 	udiv	r2, r3, r2
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	085b      	lsrs	r3, r3, #1
 800bcc6:	441a      	add	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd6:	2b0f      	cmp	r3, #15
 800bcd8:	d908      	bls.n	800bcec <UART_SetConfig+0xb20>
 800bcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bce0:	d204      	bcs.n	800bcec <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bce8:	60da      	str	r2, [r3, #12]
 800bcea:	e002      	b.n	800bcf2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2200      	movs	r2, #0
 800bd06:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bd0e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3738      	adds	r7, #56	; 0x38
 800bd16:	46bd      	mov	sp, r7
 800bd18:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800bd1c:	58024400 	.word	0x58024400
 800bd20:	03d09000 	.word	0x03d09000
 800bd24:	003d0900 	.word	0x003d0900
 800bd28:	0800ebcc 	.word	0x0800ebcc

0800bd2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd38:	f003 0301 	and.w	r3, r3, #1
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00a      	beq.n	800bd56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	430a      	orrs	r2, r1
 800bd54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd5a:	f003 0302 	and.w	r3, r3, #2
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d00a      	beq.n	800bd78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	430a      	orrs	r2, r1
 800bd76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd7c:	f003 0304 	and.w	r3, r3, #4
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d00a      	beq.n	800bd9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	430a      	orrs	r2, r1
 800bd98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd9e:	f003 0308 	and.w	r3, r3, #8
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00a      	beq.n	800bdbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	430a      	orrs	r2, r1
 800bdba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdc0:	f003 0310 	and.w	r3, r3, #16
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00a      	beq.n	800bdde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	430a      	orrs	r2, r1
 800bddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde2:	f003 0320 	and.w	r3, r3, #32
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00a      	beq.n	800be00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	689b      	ldr	r3, [r3, #8]
 800bdf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	430a      	orrs	r2, r1
 800bdfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d01a      	beq.n	800be42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	430a      	orrs	r2, r1
 800be20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be2a:	d10a      	bne.n	800be42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	430a      	orrs	r2, r1
 800be40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00a      	beq.n	800be64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	430a      	orrs	r2, r1
 800be62:	605a      	str	r2, [r3, #4]
  }
}
 800be64:	bf00      	nop
 800be66:	370c      	adds	r7, #12
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr

0800be70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b086      	sub	sp, #24
 800be74:	af02      	add	r7, sp, #8
 800be76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800be80:	f7f7 f95a 	bl	8003138 <HAL_GetTick>
 800be84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f003 0308 	and.w	r3, r3, #8
 800be90:	2b08      	cmp	r3, #8
 800be92:	d10e      	bne.n	800beb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be98:	9300      	str	r3, [sp, #0]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2200      	movs	r2, #0
 800be9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f82c 	bl	800bf00 <UART_WaitOnFlagUntilTimeout>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d001      	beq.n	800beb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800beae:	2303      	movs	r3, #3
 800beb0:	e022      	b.n	800bef8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f003 0304 	and.w	r3, r3, #4
 800bebc:	2b04      	cmp	r3, #4
 800bebe:	d10e      	bne.n	800bede <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bec0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 f816 	bl	800bf00 <UART_WaitOnFlagUntilTimeout>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d001      	beq.n	800bede <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800beda:	2303      	movs	r3, #3
 800bedc:	e00c      	b.n	800bef8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2220      	movs	r2, #32
 800bee2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2220      	movs	r2, #32
 800beea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3710      	adds	r7, #16
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	603b      	str	r3, [r7, #0]
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf10:	e062      	b.n	800bfd8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf18:	d05e      	beq.n	800bfd8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf1a:	f7f7 f90d 	bl	8003138 <HAL_GetTick>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	1ad3      	subs	r3, r2, r3
 800bf24:	69ba      	ldr	r2, [r7, #24]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d302      	bcc.n	800bf30 <UART_WaitOnFlagUntilTimeout+0x30>
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d11d      	bne.n	800bf6c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	681a      	ldr	r2, [r3, #0]
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bf3e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	689a      	ldr	r2, [r3, #8]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f022 0201 	bic.w	r2, r2, #1
 800bf4e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2220      	movs	r2, #32
 800bf54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2220      	movs	r2, #32
 800bf5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800bf68:	2303      	movs	r3, #3
 800bf6a:	e045      	b.n	800bff8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f003 0304 	and.w	r3, r3, #4
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d02e      	beq.n	800bfd8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	69db      	ldr	r3, [r3, #28]
 800bf80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf88:	d126      	bne.n	800bfd8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf92:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bfa2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	689a      	ldr	r2, [r3, #8]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f022 0201 	bic.w	r2, r2, #1
 800bfb2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2220      	movs	r2, #32
 800bfb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2220      	movs	r2, #32
 800bfc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2220      	movs	r2, #32
 800bfc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	e00f      	b.n	800bff8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	69da      	ldr	r2, [r3, #28]
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	4013      	ands	r3, r2
 800bfe2:	68ba      	ldr	r2, [r7, #8]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	bf0c      	ite	eq
 800bfe8:	2301      	moveq	r3, #1
 800bfea:	2300      	movne	r3, #0
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	461a      	mov	r2, r3
 800bff0:	79fb      	ldrb	r3, [r7, #7]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d08d      	beq.n	800bf12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c016:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	6899      	ldr	r1, [r3, #8]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	4b08      	ldr	r3, [pc, #32]	; (800c044 <UART_EndRxTransfer+0x44>)
 800c024:	400b      	ands	r3, r1
 800c026:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2220      	movs	r2, #32
 800c02c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800c036:	bf00      	nop
 800c038:	370c      	adds	r7, #12
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	effffffe 	.word	0xeffffffe

0800c048 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c054:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2200      	movs	r2, #0
 800c05a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2200      	movs	r2, #0
 800c062:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c066:	68f8      	ldr	r0, [r7, #12]
 800c068:	f7ff f8a6 	bl	800b1b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c06c:	bf00      	nop
 800c06e:	3710      	adds	r7, #16
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	681a      	ldr	r2, [r3, #0]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c08a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2220      	movs	r2, #32
 800c090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f7ff f882 	bl	800b1a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0a0:	bf00      	nop
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c0b6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0be:	2b22      	cmp	r3, #34	; 0x22
 800c0c0:	d13b      	bne.n	800c13a <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c0ca:	89bb      	ldrh	r3, [r7, #12]
 800c0cc:	b2d9      	uxtb	r1, r3
 800c0ce:	89fb      	ldrh	r3, [r7, #14]
 800c0d0:	b2da      	uxtb	r2, r3
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0d6:	400a      	ands	r2, r1
 800c0d8:	b2d2      	uxtb	r2, r2
 800c0da:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0e0:	1c5a      	adds	r2, r3, #1
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	3b01      	subs	r3, #1
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	2b00      	cmp	r3, #0
 800c102:	d122      	bne.n	800c14a <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c112:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	689a      	ldr	r2, [r3, #8]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f022 0201 	bic.w	r2, r2, #1
 800c122:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2220      	movs	r2, #32
 800c128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f7f5 ff58 	bl	8001fe8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c138:	e007      	b.n	800c14a <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	699a      	ldr	r2, [r3, #24]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f042 0208 	orr.w	r2, r2, #8
 800c148:	619a      	str	r2, [r3, #24]
}
 800c14a:	bf00      	nop
 800c14c:	3710      	adds	r7, #16
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b084      	sub	sp, #16
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c160:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c168:	2b22      	cmp	r3, #34	; 0x22
 800c16a:	d13b      	bne.n	800c1e4 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c172:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c178:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c17a:	89ba      	ldrh	r2, [r7, #12]
 800c17c:	89fb      	ldrh	r3, [r7, #14]
 800c17e:	4013      	ands	r3, r2
 800c180:	b29a      	uxth	r2, r3
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c18a:	1c9a      	adds	r2, r3, #2
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c196:	b29b      	uxth	r3, r3
 800c198:	3b01      	subs	r3, #1
 800c19a:	b29a      	uxth	r2, r3
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d122      	bne.n	800c1f4 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c1bc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	689a      	ldr	r2, [r3, #8]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f022 0201 	bic.w	r2, r2, #1
 800c1cc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2220      	movs	r2, #32
 800c1d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f7f5 ff03 	bl	8001fe8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c1e2:	e007      	b.n	800c1f4 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	699a      	ldr	r2, [r3, #24]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f042 0208 	orr.w	r2, r2, #8
 800c1f2:	619a      	str	r2, [r3, #24]
}
 800c1f4:	bf00      	nop
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c20a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c212:	2b22      	cmp	r3, #34	; 0x22
 800c214:	d166      	bne.n	800c2e4 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c21c:	81fb      	strh	r3, [r7, #14]
 800c21e:	e03d      	b.n	800c29c <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c226:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c228:	893b      	ldrh	r3, [r7, #8]
 800c22a:	b2d9      	uxtb	r1, r3
 800c22c:	89bb      	ldrh	r3, [r7, #12]
 800c22e:	b2da      	uxtb	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c234:	400a      	ands	r2, r1
 800c236:	b2d2      	uxtb	r2, r2
 800c238:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c23e:	1c5a      	adds	r2, r3, #1
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	3b01      	subs	r3, #1
 800c24e:	b29a      	uxth	r2, r3
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d119      	bne.n	800c296 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c270:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	6899      	ldr	r1, [r3, #8]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681a      	ldr	r2, [r3, #0]
 800c27c:	4b1f      	ldr	r3, [pc, #124]	; (800c2fc <UART_RxISR_8BIT_FIFOEN+0x100>)
 800c27e:	400b      	ands	r3, r1
 800c280:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2220      	movs	r2, #32
 800c286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2200      	movs	r2, #0
 800c28e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f7f5 fea9 	bl	8001fe8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c296:	89fb      	ldrh	r3, [r7, #14]
 800c298:	3b01      	subs	r3, #1
 800c29a:	81fb      	strh	r3, [r7, #14]
 800c29c:	89fb      	ldrh	r3, [r7, #14]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1be      	bne.n	800c220 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2a8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c2aa:	897b      	ldrh	r3, [r7, #10]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d021      	beq.n	800c2f4 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c2b6:	897a      	ldrh	r2, [r7, #10]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d21b      	bcs.n	800c2f4 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	689a      	ldr	r2, [r3, #8]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c2ca:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	4a0c      	ldr	r2, [pc, #48]	; (800c300 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800c2d0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f042 0220 	orr.w	r2, r2, #32
 800c2e0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c2e2:	e007      	b.n	800c2f4 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	699a      	ldr	r2, [r3, #24]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f042 0208 	orr.w	r2, r2, #8
 800c2f2:	619a      	str	r2, [r3, #24]
}
 800c2f4:	bf00      	nop
 800c2f6:	3710      	adds	r7, #16
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	effffffe 	.word	0xeffffffe
 800c300:	0800c0a9 	.word	0x0800c0a9

0800c304 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b086      	sub	sp, #24
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c312:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c31a:	2b22      	cmp	r3, #34	; 0x22
 800c31c:	d166      	bne.n	800c3ec <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c324:	82fb      	strh	r3, [r7, #22]
 800c326:	e03d      	b.n	800c3a4 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c32e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c334:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800c336:	8a3a      	ldrh	r2, [r7, #16]
 800c338:	8abb      	ldrh	r3, [r7, #20]
 800c33a:	4013      	ands	r3, r2
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c346:	1c9a      	adds	r2, r3, #2
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c352:	b29b      	uxth	r3, r3
 800c354:	3b01      	subs	r3, #1
 800c356:	b29a      	uxth	r2, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c364:	b29b      	uxth	r3, r3
 800c366:	2b00      	cmp	r3, #0
 800c368:	d119      	bne.n	800c39e <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c378:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	6899      	ldr	r1, [r3, #8]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	4b1f      	ldr	r3, [pc, #124]	; (800c404 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800c386:	400b      	ands	r3, r1
 800c388:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2220      	movs	r2, #32
 800c38e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2200      	movs	r2, #0
 800c396:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f7f5 fe25 	bl	8001fe8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c39e:	8afb      	ldrh	r3, [r7, #22]
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	82fb      	strh	r3, [r7, #22]
 800c3a4:	8afb      	ldrh	r3, [r7, #22]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d1be      	bne.n	800c328 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3b0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c3b2:	8a7b      	ldrh	r3, [r7, #18]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d021      	beq.n	800c3fc <UART_RxISR_16BIT_FIFOEN+0xf8>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c3be:	8a7a      	ldrh	r2, [r7, #18]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d21b      	bcs.n	800c3fc <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	689a      	ldr	r2, [r3, #8]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c3d2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4a0c      	ldr	r2, [pc, #48]	; (800c408 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800c3d8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f042 0220 	orr.w	r2, r2, #32
 800c3e8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c3ea:	e007      	b.n	800c3fc <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	699a      	ldr	r2, [r3, #24]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f042 0208 	orr.w	r2, r2, #8
 800c3fa:	619a      	str	r2, [r3, #24]
}
 800c3fc:	bf00      	nop
 800c3fe:	3718      	adds	r7, #24
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	effffffe 	.word	0xeffffffe
 800c408:	0800c153 	.word	0x0800c153

0800c40c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c428:	bf00      	nop
 800c42a:	370c      	adds	r7, #12
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c43c:	bf00      	nop
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c448:	b480      	push	{r7}
 800c44a:	b085      	sub	sp, #20
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c456:	2b01      	cmp	r3, #1
 800c458:	d101      	bne.n	800c45e <HAL_UARTEx_DisableFifoMode+0x16>
 800c45a:	2302      	movs	r3, #2
 800c45c:	e027      	b.n	800c4ae <HAL_UARTEx_DisableFifoMode+0x66>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2201      	movs	r2, #1
 800c462:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2224      	movs	r2, #36	; 0x24
 800c46a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f022 0201 	bic.w	r2, r2, #1
 800c484:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c48c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	68fa      	ldr	r2, [r7, #12]
 800c49a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2220      	movs	r2, #32
 800c4a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3714      	adds	r7, #20
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr

0800c4ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b084      	sub	sp, #16
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
 800c4c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d101      	bne.n	800c4d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c4ce:	2302      	movs	r3, #2
 800c4d0:	e02d      	b.n	800c52e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2224      	movs	r2, #36	; 0x24
 800c4de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f022 0201 	bic.w	r2, r2, #1
 800c4f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	683a      	ldr	r2, [r7, #0]
 800c50a:	430a      	orrs	r2, r1
 800c50c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 f850 	bl	800c5b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2220      	movs	r2, #32
 800c520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c52c:	2300      	movs	r3, #0
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b084      	sub	sp, #16
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
 800c53e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c546:	2b01      	cmp	r3, #1
 800c548:	d101      	bne.n	800c54e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c54a:	2302      	movs	r3, #2
 800c54c:	e02d      	b.n	800c5aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2201      	movs	r2, #1
 800c552:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2224      	movs	r2, #36	; 0x24
 800c55a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f022 0201 	bic.w	r2, r2, #1
 800c574:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	683a      	ldr	r2, [r7, #0]
 800c586:	430a      	orrs	r2, r1
 800c588:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 f812 	bl	800c5b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2220      	movs	r2, #32
 800c59c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
	...

0800c5b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b089      	sub	sp, #36	; 0x24
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c5bc:	4a2f      	ldr	r2, [pc, #188]	; (800c67c <UARTEx_SetNbDataToProcess+0xc8>)
 800c5be:	f107 0314 	add.w	r3, r7, #20
 800c5c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c5c6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c5ca:	4a2d      	ldr	r2, [pc, #180]	; (800c680 <UARTEx_SetNbDataToProcess+0xcc>)
 800c5cc:	f107 030c 	add.w	r3, r7, #12
 800c5d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c5d4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d108      	bne.n	800c5f2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c5f0:	e03d      	b.n	800c66e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c5f2:	2310      	movs	r3, #16
 800c5f4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c5f6:	2310      	movs	r3, #16
 800c5f8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	0e5b      	lsrs	r3, r3, #25
 800c602:	b2db      	uxtb	r3, r3
 800c604:	f003 0307 	and.w	r3, r3, #7
 800c608:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	0f5b      	lsrs	r3, r3, #29
 800c612:	b2db      	uxtb	r3, r3
 800c614:	f003 0307 	and.w	r3, r3, #7
 800c618:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c61a:	7fbb      	ldrb	r3, [r7, #30]
 800c61c:	7f3a      	ldrb	r2, [r7, #28]
 800c61e:	f107 0120 	add.w	r1, r7, #32
 800c622:	440a      	add	r2, r1
 800c624:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c628:	fb02 f303 	mul.w	r3, r2, r3
 800c62c:	7f3a      	ldrb	r2, [r7, #28]
 800c62e:	f107 0120 	add.w	r1, r7, #32
 800c632:	440a      	add	r2, r1
 800c634:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c638:	fb93 f3f2 	sdiv	r3, r3, r2
 800c63c:	b29a      	uxth	r2, r3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c644:	7ffb      	ldrb	r3, [r7, #31]
 800c646:	7f7a      	ldrb	r2, [r7, #29]
 800c648:	f107 0120 	add.w	r1, r7, #32
 800c64c:	440a      	add	r2, r1
 800c64e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c652:	fb02 f303 	mul.w	r3, r2, r3
 800c656:	7f7a      	ldrb	r2, [r7, #29]
 800c658:	f107 0120 	add.w	r1, r7, #32
 800c65c:	440a      	add	r2, r1
 800c65e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c662:	fb93 f3f2 	sdiv	r3, r3, r2
 800c666:	b29a      	uxth	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c66e:	bf00      	nop
 800c670:	3724      	adds	r7, #36	; 0x24
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr
 800c67a:	bf00      	nop
 800c67c:	0800e558 	.word	0x0800e558
 800c680:	0800e560 	.word	0x0800e560

0800c684 <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef *Init)
{
 800c684:	b480      	push	{r7}
 800c686:	b087      	sub	sp, #28
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c698:	683a      	ldr	r2, [r7, #0]
 800c69a:	6812      	ldr	r2, [r2, #0]
 800c69c:	f023 0101 	bic.w	r1, r3, #1
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	2b08      	cmp	r3, #8
 800c6ac:	d102      	bne.n	800c6b4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800c6ae:	2340      	movs	r3, #64	; 0x40
 800c6b0:	617b      	str	r3, [r7, #20]
 800c6b2:	e001      	b.n	800c6b8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800c6c4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800c6ca:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800c6d0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800c6d6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800c6dc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800c6e2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800c6e8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800c6ee:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800c6f4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c702:	693a      	ldr	r2, [r7, #16]
 800c704:	4313      	orrs	r3, r2
 800c706:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c70c:	693a      	ldr	r2, [r7, #16]
 800c70e:	4313      	orrs	r3, r2
 800c710:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c716:	693a      	ldr	r2, [r7, #16]
 800c718:	4313      	orrs	r3, r2
 800c71a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800c71c:	4b20      	ldr	r3, [pc, #128]	; (800c7a0 <FMC_NORSRAM_Init+0x11c>)
 800c71e:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c726:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c72e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800c736:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	43db      	mvns	r3, r3
 800c746:	ea02 0103 	and.w	r1, r2, r3
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	4319      	orrs	r1, r3
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c75c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c760:	d10c      	bne.n	800c77c <FMC_NORSRAM_Init+0xf8>
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d008      	beq.n	800c77c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c776:	431a      	orrs	r2, r3
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d006      	beq.n	800c792 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681a      	ldr	r2, [r3, #0]
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c78c:	431a      	orrs	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c792:	2300      	movs	r3, #0
}
 800c794:	4618      	mov	r0, r3
 800c796:	371c      	adds	r7, #28
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr
 800c7a0:	0008fb7f 	.word	0x0008fb7f

0800c7a4 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b087      	sub	sp, #28
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	60f8      	str	r0, [r7, #12]
 800c7ac:	60b9      	str	r1, [r7, #8]
 800c7ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	1c5a      	adds	r2, r3, #1
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ba:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	011b      	lsls	r3, r3, #4
 800c7c8:	431a      	orrs	r2, r3
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	021b      	lsls	r3, r3, #8
 800c7d0:	431a      	orrs	r2, r3
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	041b      	lsls	r3, r3, #16
 800c7d8:	431a      	orrs	r2, r3
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	691b      	ldr	r3, [r3, #16]
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	051b      	lsls	r3, r3, #20
 800c7e2:	431a      	orrs	r2, r3
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	695b      	ldr	r3, [r3, #20]
 800c7e8:	3b02      	subs	r3, #2
 800c7ea:	061b      	lsls	r3, r3, #24
 800c7ec:	431a      	orrs	r2, r3
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	699b      	ldr	r3, [r3, #24]
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	3201      	adds	r2, #1
 800c7f8:	4319      	orrs	r1, r3
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                      (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                      (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                      (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c80c:	d113      	bne.n	800c836 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(((uint32_t)0x0F) << FMC_BTRx_CLKDIV_Pos));
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c816:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	3b01      	subs	r3, #1
 800c81e:	051b      	lsls	r3, r3, #20
 800c820:	697a      	ldr	r2, [r7, #20]
 800c822:	4313      	orrs	r3, r2
 800c824:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	431a      	orrs	r2, r3
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c836:	2300      	movs	r3, #0
}
 800c838:	4618      	mov	r0, r3
 800c83a:	371c      	adds	r7, #28
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <FMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FMC_EXTENDED_MODE_DISABLE
  *            @arg FMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800c844:	b480      	push	{r7}
 800c846:	b085      	sub	sp, #20
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
 800c850:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c858:	d11d      	bne.n	800c896 <FMC_NORSRAM_Extended_Timing_Init+0x52>
#endif /* FMC_BWTRx_BUSTURN */
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c862:	4b13      	ldr	r3, [pc, #76]	; (800c8b0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800c864:	4013      	ands	r3, r2
 800c866:	68ba      	ldr	r2, [r7, #8]
 800c868:	6811      	ldr	r1, [r2, #0]
 800c86a:	68ba      	ldr	r2, [r7, #8]
 800c86c:	6852      	ldr	r2, [r2, #4]
 800c86e:	0112      	lsls	r2, r2, #4
 800c870:	4311      	orrs	r1, r2
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	6892      	ldr	r2, [r2, #8]
 800c876:	0212      	lsls	r2, r2, #8
 800c878:	4311      	orrs	r1, r2
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	6992      	ldr	r2, [r2, #24]
 800c87e:	4311      	orrs	r1, r2
 800c880:	68ba      	ldr	r2, [r7, #8]
 800c882:	68d2      	ldr	r2, [r2, #12]
 800c884:	0412      	lsls	r2, r2, #16
 800c886:	430a      	orrs	r2, r1
 800c888:	ea43 0102 	orr.w	r1, r3, r2
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c894:	e005      	b.n	800c8a2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode));
#endif /* FMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c89e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3714      	adds	r7, #20
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr
 800c8b0:	cff00000 	.word	0xcff00000

0800c8b4 <__errno>:
 800c8b4:	4b01      	ldr	r3, [pc, #4]	; (800c8bc <__errno+0x8>)
 800c8b6:	6818      	ldr	r0, [r3, #0]
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop
 800c8bc:	2400004c 	.word	0x2400004c

0800c8c0 <__libc_init_array>:
 800c8c0:	b570      	push	{r4, r5, r6, lr}
 800c8c2:	4e0d      	ldr	r6, [pc, #52]	; (800c8f8 <__libc_init_array+0x38>)
 800c8c4:	4c0d      	ldr	r4, [pc, #52]	; (800c8fc <__libc_init_array+0x3c>)
 800c8c6:	1ba4      	subs	r4, r4, r6
 800c8c8:	10a4      	asrs	r4, r4, #2
 800c8ca:	2500      	movs	r5, #0
 800c8cc:	42a5      	cmp	r5, r4
 800c8ce:	d109      	bne.n	800c8e4 <__libc_init_array+0x24>
 800c8d0:	4e0b      	ldr	r6, [pc, #44]	; (800c900 <__libc_init_array+0x40>)
 800c8d2:	4c0c      	ldr	r4, [pc, #48]	; (800c904 <__libc_init_array+0x44>)
 800c8d4:	f001 fd9a 	bl	800e40c <_init>
 800c8d8:	1ba4      	subs	r4, r4, r6
 800c8da:	10a4      	asrs	r4, r4, #2
 800c8dc:	2500      	movs	r5, #0
 800c8de:	42a5      	cmp	r5, r4
 800c8e0:	d105      	bne.n	800c8ee <__libc_init_array+0x2e>
 800c8e2:	bd70      	pop	{r4, r5, r6, pc}
 800c8e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c8e8:	4798      	blx	r3
 800c8ea:	3501      	adds	r5, #1
 800c8ec:	e7ee      	b.n	800c8cc <__libc_init_array+0xc>
 800c8ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c8f2:	4798      	blx	r3
 800c8f4:	3501      	adds	r5, #1
 800c8f6:	e7f2      	b.n	800c8de <__libc_init_array+0x1e>
 800c8f8:	0800ee38 	.word	0x0800ee38
 800c8fc:	0800ee38 	.word	0x0800ee38
 800c900:	0800ee38 	.word	0x0800ee38
 800c904:	0800ee3c 	.word	0x0800ee3c

0800c908 <__itoa>:
 800c908:	1e93      	subs	r3, r2, #2
 800c90a:	2b22      	cmp	r3, #34	; 0x22
 800c90c:	b510      	push	{r4, lr}
 800c90e:	460c      	mov	r4, r1
 800c910:	d904      	bls.n	800c91c <__itoa+0x14>
 800c912:	2300      	movs	r3, #0
 800c914:	700b      	strb	r3, [r1, #0]
 800c916:	461c      	mov	r4, r3
 800c918:	4620      	mov	r0, r4
 800c91a:	bd10      	pop	{r4, pc}
 800c91c:	2a0a      	cmp	r2, #10
 800c91e:	d109      	bne.n	800c934 <__itoa+0x2c>
 800c920:	2800      	cmp	r0, #0
 800c922:	da07      	bge.n	800c934 <__itoa+0x2c>
 800c924:	232d      	movs	r3, #45	; 0x2d
 800c926:	700b      	strb	r3, [r1, #0]
 800c928:	4240      	negs	r0, r0
 800c92a:	2101      	movs	r1, #1
 800c92c:	4421      	add	r1, r4
 800c92e:	f000 fc3b 	bl	800d1a8 <__utoa>
 800c932:	e7f1      	b.n	800c918 <__itoa+0x10>
 800c934:	2100      	movs	r1, #0
 800c936:	e7f9      	b.n	800c92c <__itoa+0x24>

0800c938 <itoa>:
 800c938:	f7ff bfe6 	b.w	800c908 <__itoa>

0800c93c <malloc>:
 800c93c:	4b02      	ldr	r3, [pc, #8]	; (800c948 <malloc+0xc>)
 800c93e:	4601      	mov	r1, r0
 800c940:	6818      	ldr	r0, [r3, #0]
 800c942:	f000 b86d 	b.w	800ca20 <_malloc_r>
 800c946:	bf00      	nop
 800c948:	2400004c 	.word	0x2400004c

0800c94c <free>:
 800c94c:	4b02      	ldr	r3, [pc, #8]	; (800c958 <free+0xc>)
 800c94e:	4601      	mov	r1, r0
 800c950:	6818      	ldr	r0, [r3, #0]
 800c952:	f000 b817 	b.w	800c984 <_free_r>
 800c956:	bf00      	nop
 800c958:	2400004c 	.word	0x2400004c

0800c95c <memcpy>:
 800c95c:	b510      	push	{r4, lr}
 800c95e:	1e43      	subs	r3, r0, #1
 800c960:	440a      	add	r2, r1
 800c962:	4291      	cmp	r1, r2
 800c964:	d100      	bne.n	800c968 <memcpy+0xc>
 800c966:	bd10      	pop	{r4, pc}
 800c968:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c96c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c970:	e7f7      	b.n	800c962 <memcpy+0x6>

0800c972 <memset>:
 800c972:	4402      	add	r2, r0
 800c974:	4603      	mov	r3, r0
 800c976:	4293      	cmp	r3, r2
 800c978:	d100      	bne.n	800c97c <memset+0xa>
 800c97a:	4770      	bx	lr
 800c97c:	f803 1b01 	strb.w	r1, [r3], #1
 800c980:	e7f9      	b.n	800c976 <memset+0x4>
	...

0800c984 <_free_r>:
 800c984:	b538      	push	{r3, r4, r5, lr}
 800c986:	4605      	mov	r5, r0
 800c988:	2900      	cmp	r1, #0
 800c98a:	d045      	beq.n	800ca18 <_free_r+0x94>
 800c98c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c990:	1f0c      	subs	r4, r1, #4
 800c992:	2b00      	cmp	r3, #0
 800c994:	bfb8      	it	lt
 800c996:	18e4      	addlt	r4, r4, r3
 800c998:	f001 fa2c 	bl	800ddf4 <__malloc_lock>
 800c99c:	4a1f      	ldr	r2, [pc, #124]	; (800ca1c <_free_r+0x98>)
 800c99e:	6813      	ldr	r3, [r2, #0]
 800c9a0:	4610      	mov	r0, r2
 800c9a2:	b933      	cbnz	r3, 800c9b2 <_free_r+0x2e>
 800c9a4:	6063      	str	r3, [r4, #4]
 800c9a6:	6014      	str	r4, [r2, #0]
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9ae:	f001 ba22 	b.w	800ddf6 <__malloc_unlock>
 800c9b2:	42a3      	cmp	r3, r4
 800c9b4:	d90c      	bls.n	800c9d0 <_free_r+0x4c>
 800c9b6:	6821      	ldr	r1, [r4, #0]
 800c9b8:	1862      	adds	r2, r4, r1
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	bf04      	itt	eq
 800c9be:	681a      	ldreq	r2, [r3, #0]
 800c9c0:	685b      	ldreq	r3, [r3, #4]
 800c9c2:	6063      	str	r3, [r4, #4]
 800c9c4:	bf04      	itt	eq
 800c9c6:	1852      	addeq	r2, r2, r1
 800c9c8:	6022      	streq	r2, [r4, #0]
 800c9ca:	6004      	str	r4, [r0, #0]
 800c9cc:	e7ec      	b.n	800c9a8 <_free_r+0x24>
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	685a      	ldr	r2, [r3, #4]
 800c9d2:	b10a      	cbz	r2, 800c9d8 <_free_r+0x54>
 800c9d4:	42a2      	cmp	r2, r4
 800c9d6:	d9fa      	bls.n	800c9ce <_free_r+0x4a>
 800c9d8:	6819      	ldr	r1, [r3, #0]
 800c9da:	1858      	adds	r0, r3, r1
 800c9dc:	42a0      	cmp	r0, r4
 800c9de:	d10b      	bne.n	800c9f8 <_free_r+0x74>
 800c9e0:	6820      	ldr	r0, [r4, #0]
 800c9e2:	4401      	add	r1, r0
 800c9e4:	1858      	adds	r0, r3, r1
 800c9e6:	4282      	cmp	r2, r0
 800c9e8:	6019      	str	r1, [r3, #0]
 800c9ea:	d1dd      	bne.n	800c9a8 <_free_r+0x24>
 800c9ec:	6810      	ldr	r0, [r2, #0]
 800c9ee:	6852      	ldr	r2, [r2, #4]
 800c9f0:	605a      	str	r2, [r3, #4]
 800c9f2:	4401      	add	r1, r0
 800c9f4:	6019      	str	r1, [r3, #0]
 800c9f6:	e7d7      	b.n	800c9a8 <_free_r+0x24>
 800c9f8:	d902      	bls.n	800ca00 <_free_r+0x7c>
 800c9fa:	230c      	movs	r3, #12
 800c9fc:	602b      	str	r3, [r5, #0]
 800c9fe:	e7d3      	b.n	800c9a8 <_free_r+0x24>
 800ca00:	6820      	ldr	r0, [r4, #0]
 800ca02:	1821      	adds	r1, r4, r0
 800ca04:	428a      	cmp	r2, r1
 800ca06:	bf04      	itt	eq
 800ca08:	6811      	ldreq	r1, [r2, #0]
 800ca0a:	6852      	ldreq	r2, [r2, #4]
 800ca0c:	6062      	str	r2, [r4, #4]
 800ca0e:	bf04      	itt	eq
 800ca10:	1809      	addeq	r1, r1, r0
 800ca12:	6021      	streq	r1, [r4, #0]
 800ca14:	605c      	str	r4, [r3, #4]
 800ca16:	e7c7      	b.n	800c9a8 <_free_r+0x24>
 800ca18:	bd38      	pop	{r3, r4, r5, pc}
 800ca1a:	bf00      	nop
 800ca1c:	24000278 	.word	0x24000278

0800ca20 <_malloc_r>:
 800ca20:	b570      	push	{r4, r5, r6, lr}
 800ca22:	1ccd      	adds	r5, r1, #3
 800ca24:	f025 0503 	bic.w	r5, r5, #3
 800ca28:	3508      	adds	r5, #8
 800ca2a:	2d0c      	cmp	r5, #12
 800ca2c:	bf38      	it	cc
 800ca2e:	250c      	movcc	r5, #12
 800ca30:	2d00      	cmp	r5, #0
 800ca32:	4606      	mov	r6, r0
 800ca34:	db01      	blt.n	800ca3a <_malloc_r+0x1a>
 800ca36:	42a9      	cmp	r1, r5
 800ca38:	d903      	bls.n	800ca42 <_malloc_r+0x22>
 800ca3a:	230c      	movs	r3, #12
 800ca3c:	6033      	str	r3, [r6, #0]
 800ca3e:	2000      	movs	r0, #0
 800ca40:	bd70      	pop	{r4, r5, r6, pc}
 800ca42:	f001 f9d7 	bl	800ddf4 <__malloc_lock>
 800ca46:	4a21      	ldr	r2, [pc, #132]	; (800cacc <_malloc_r+0xac>)
 800ca48:	6814      	ldr	r4, [r2, #0]
 800ca4a:	4621      	mov	r1, r4
 800ca4c:	b991      	cbnz	r1, 800ca74 <_malloc_r+0x54>
 800ca4e:	4c20      	ldr	r4, [pc, #128]	; (800cad0 <_malloc_r+0xb0>)
 800ca50:	6823      	ldr	r3, [r4, #0]
 800ca52:	b91b      	cbnz	r3, 800ca5c <_malloc_r+0x3c>
 800ca54:	4630      	mov	r0, r6
 800ca56:	f000 fb65 	bl	800d124 <_sbrk_r>
 800ca5a:	6020      	str	r0, [r4, #0]
 800ca5c:	4629      	mov	r1, r5
 800ca5e:	4630      	mov	r0, r6
 800ca60:	f000 fb60 	bl	800d124 <_sbrk_r>
 800ca64:	1c43      	adds	r3, r0, #1
 800ca66:	d124      	bne.n	800cab2 <_malloc_r+0x92>
 800ca68:	230c      	movs	r3, #12
 800ca6a:	6033      	str	r3, [r6, #0]
 800ca6c:	4630      	mov	r0, r6
 800ca6e:	f001 f9c2 	bl	800ddf6 <__malloc_unlock>
 800ca72:	e7e4      	b.n	800ca3e <_malloc_r+0x1e>
 800ca74:	680b      	ldr	r3, [r1, #0]
 800ca76:	1b5b      	subs	r3, r3, r5
 800ca78:	d418      	bmi.n	800caac <_malloc_r+0x8c>
 800ca7a:	2b0b      	cmp	r3, #11
 800ca7c:	d90f      	bls.n	800ca9e <_malloc_r+0x7e>
 800ca7e:	600b      	str	r3, [r1, #0]
 800ca80:	50cd      	str	r5, [r1, r3]
 800ca82:	18cc      	adds	r4, r1, r3
 800ca84:	4630      	mov	r0, r6
 800ca86:	f001 f9b6 	bl	800ddf6 <__malloc_unlock>
 800ca8a:	f104 000b 	add.w	r0, r4, #11
 800ca8e:	1d23      	adds	r3, r4, #4
 800ca90:	f020 0007 	bic.w	r0, r0, #7
 800ca94:	1ac3      	subs	r3, r0, r3
 800ca96:	d0d3      	beq.n	800ca40 <_malloc_r+0x20>
 800ca98:	425a      	negs	r2, r3
 800ca9a:	50e2      	str	r2, [r4, r3]
 800ca9c:	e7d0      	b.n	800ca40 <_malloc_r+0x20>
 800ca9e:	428c      	cmp	r4, r1
 800caa0:	684b      	ldr	r3, [r1, #4]
 800caa2:	bf16      	itet	ne
 800caa4:	6063      	strne	r3, [r4, #4]
 800caa6:	6013      	streq	r3, [r2, #0]
 800caa8:	460c      	movne	r4, r1
 800caaa:	e7eb      	b.n	800ca84 <_malloc_r+0x64>
 800caac:	460c      	mov	r4, r1
 800caae:	6849      	ldr	r1, [r1, #4]
 800cab0:	e7cc      	b.n	800ca4c <_malloc_r+0x2c>
 800cab2:	1cc4      	adds	r4, r0, #3
 800cab4:	f024 0403 	bic.w	r4, r4, #3
 800cab8:	42a0      	cmp	r0, r4
 800caba:	d005      	beq.n	800cac8 <_malloc_r+0xa8>
 800cabc:	1a21      	subs	r1, r4, r0
 800cabe:	4630      	mov	r0, r6
 800cac0:	f000 fb30 	bl	800d124 <_sbrk_r>
 800cac4:	3001      	adds	r0, #1
 800cac6:	d0cf      	beq.n	800ca68 <_malloc_r+0x48>
 800cac8:	6025      	str	r5, [r4, #0]
 800caca:	e7db      	b.n	800ca84 <_malloc_r+0x64>
 800cacc:	24000278 	.word	0x24000278
 800cad0:	2400027c 	.word	0x2400027c

0800cad4 <__cvt>:
 800cad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cad6:	ed2d 8b02 	vpush	{d8}
 800cada:	eeb0 8b40 	vmov.f64	d8, d0
 800cade:	b085      	sub	sp, #20
 800cae0:	4617      	mov	r7, r2
 800cae2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cae4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cae6:	ee18 2a90 	vmov	r2, s17
 800caea:	f025 0520 	bic.w	r5, r5, #32
 800caee:	2a00      	cmp	r2, #0
 800caf0:	bfb6      	itet	lt
 800caf2:	222d      	movlt	r2, #45	; 0x2d
 800caf4:	2200      	movge	r2, #0
 800caf6:	eeb1 8b40 	vneglt.f64	d8, d0
 800cafa:	2d46      	cmp	r5, #70	; 0x46
 800cafc:	460c      	mov	r4, r1
 800cafe:	701a      	strb	r2, [r3, #0]
 800cb00:	d004      	beq.n	800cb0c <__cvt+0x38>
 800cb02:	2d45      	cmp	r5, #69	; 0x45
 800cb04:	d100      	bne.n	800cb08 <__cvt+0x34>
 800cb06:	3401      	adds	r4, #1
 800cb08:	2102      	movs	r1, #2
 800cb0a:	e000      	b.n	800cb0e <__cvt+0x3a>
 800cb0c:	2103      	movs	r1, #3
 800cb0e:	ab03      	add	r3, sp, #12
 800cb10:	9301      	str	r3, [sp, #4]
 800cb12:	ab02      	add	r3, sp, #8
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	4622      	mov	r2, r4
 800cb18:	4633      	mov	r3, r6
 800cb1a:	eeb0 0b48 	vmov.f64	d0, d8
 800cb1e:	f000 fc0f 	bl	800d340 <_dtoa_r>
 800cb22:	2d47      	cmp	r5, #71	; 0x47
 800cb24:	d101      	bne.n	800cb2a <__cvt+0x56>
 800cb26:	07fb      	lsls	r3, r7, #31
 800cb28:	d51e      	bpl.n	800cb68 <__cvt+0x94>
 800cb2a:	2d46      	cmp	r5, #70	; 0x46
 800cb2c:	eb00 0304 	add.w	r3, r0, r4
 800cb30:	d10c      	bne.n	800cb4c <__cvt+0x78>
 800cb32:	7802      	ldrb	r2, [r0, #0]
 800cb34:	2a30      	cmp	r2, #48	; 0x30
 800cb36:	d107      	bne.n	800cb48 <__cvt+0x74>
 800cb38:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cb3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb40:	bf1c      	itt	ne
 800cb42:	f1c4 0401 	rsbne	r4, r4, #1
 800cb46:	6034      	strne	r4, [r6, #0]
 800cb48:	6832      	ldr	r2, [r6, #0]
 800cb4a:	4413      	add	r3, r2
 800cb4c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb54:	d007      	beq.n	800cb66 <__cvt+0x92>
 800cb56:	2130      	movs	r1, #48	; 0x30
 800cb58:	9a03      	ldr	r2, [sp, #12]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d204      	bcs.n	800cb68 <__cvt+0x94>
 800cb5e:	1c54      	adds	r4, r2, #1
 800cb60:	9403      	str	r4, [sp, #12]
 800cb62:	7011      	strb	r1, [r2, #0]
 800cb64:	e7f8      	b.n	800cb58 <__cvt+0x84>
 800cb66:	9303      	str	r3, [sp, #12]
 800cb68:	9b03      	ldr	r3, [sp, #12]
 800cb6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb6c:	1a1b      	subs	r3, r3, r0
 800cb6e:	6013      	str	r3, [r2, #0]
 800cb70:	b005      	add	sp, #20
 800cb72:	ecbd 8b02 	vpop	{d8}
 800cb76:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb78 <__exponent>:
 800cb78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb7a:	2900      	cmp	r1, #0
 800cb7c:	4604      	mov	r4, r0
 800cb7e:	bfba      	itte	lt
 800cb80:	4249      	neglt	r1, r1
 800cb82:	232d      	movlt	r3, #45	; 0x2d
 800cb84:	232b      	movge	r3, #43	; 0x2b
 800cb86:	2909      	cmp	r1, #9
 800cb88:	f804 2b02 	strb.w	r2, [r4], #2
 800cb8c:	7043      	strb	r3, [r0, #1]
 800cb8e:	dd20      	ble.n	800cbd2 <__exponent+0x5a>
 800cb90:	f10d 0307 	add.w	r3, sp, #7
 800cb94:	461f      	mov	r7, r3
 800cb96:	260a      	movs	r6, #10
 800cb98:	fb91 f5f6 	sdiv	r5, r1, r6
 800cb9c:	fb06 1115 	mls	r1, r6, r5, r1
 800cba0:	3130      	adds	r1, #48	; 0x30
 800cba2:	2d09      	cmp	r5, #9
 800cba4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cba8:	f103 32ff 	add.w	r2, r3, #4294967295
 800cbac:	4629      	mov	r1, r5
 800cbae:	dc09      	bgt.n	800cbc4 <__exponent+0x4c>
 800cbb0:	3130      	adds	r1, #48	; 0x30
 800cbb2:	3b02      	subs	r3, #2
 800cbb4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cbb8:	42bb      	cmp	r3, r7
 800cbba:	4622      	mov	r2, r4
 800cbbc:	d304      	bcc.n	800cbc8 <__exponent+0x50>
 800cbbe:	1a10      	subs	r0, r2, r0
 800cbc0:	b003      	add	sp, #12
 800cbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	e7e7      	b.n	800cb98 <__exponent+0x20>
 800cbc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbcc:	f804 2b01 	strb.w	r2, [r4], #1
 800cbd0:	e7f2      	b.n	800cbb8 <__exponent+0x40>
 800cbd2:	2330      	movs	r3, #48	; 0x30
 800cbd4:	4419      	add	r1, r3
 800cbd6:	7083      	strb	r3, [r0, #2]
 800cbd8:	1d02      	adds	r2, r0, #4
 800cbda:	70c1      	strb	r1, [r0, #3]
 800cbdc:	e7ef      	b.n	800cbbe <__exponent+0x46>
	...

0800cbe0 <_printf_float>:
 800cbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe4:	b08d      	sub	sp, #52	; 0x34
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	4616      	mov	r6, r2
 800cbea:	461f      	mov	r7, r3
 800cbec:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800cbf0:	4605      	mov	r5, r0
 800cbf2:	f001 f8f1 	bl	800ddd8 <_localeconv_r>
 800cbf6:	f8d0 b000 	ldr.w	fp, [r0]
 800cbfa:	4658      	mov	r0, fp
 800cbfc:	f7f3 fb6c 	bl	80002d8 <strlen>
 800cc00:	2300      	movs	r3, #0
 800cc02:	930a      	str	r3, [sp, #40]	; 0x28
 800cc04:	f8d8 3000 	ldr.w	r3, [r8]
 800cc08:	9005      	str	r0, [sp, #20]
 800cc0a:	3307      	adds	r3, #7
 800cc0c:	f023 0307 	bic.w	r3, r3, #7
 800cc10:	f103 0108 	add.w	r1, r3, #8
 800cc14:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cc18:	6822      	ldr	r2, [r4, #0]
 800cc1a:	f8c8 1000 	str.w	r1, [r8]
 800cc1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc22:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800cc26:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800ceb0 <_printf_float+0x2d0>
 800cc2a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800cc2e:	eeb0 6bc0 	vabs.f64	d6, d0
 800cc32:	eeb4 6b47 	vcmp.f64	d6, d7
 800cc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc3a:	dd24      	ble.n	800cc86 <_printf_float+0xa6>
 800cc3c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cc40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc44:	d502      	bpl.n	800cc4c <_printf_float+0x6c>
 800cc46:	232d      	movs	r3, #45	; 0x2d
 800cc48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc4c:	499a      	ldr	r1, [pc, #616]	; (800ceb8 <_printf_float+0x2d8>)
 800cc4e:	4b9b      	ldr	r3, [pc, #620]	; (800cebc <_printf_float+0x2dc>)
 800cc50:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cc54:	bf8c      	ite	hi
 800cc56:	4688      	movhi	r8, r1
 800cc58:	4698      	movls	r8, r3
 800cc5a:	f022 0204 	bic.w	r2, r2, #4
 800cc5e:	2303      	movs	r3, #3
 800cc60:	6123      	str	r3, [r4, #16]
 800cc62:	6022      	str	r2, [r4, #0]
 800cc64:	f04f 0a00 	mov.w	sl, #0
 800cc68:	9700      	str	r7, [sp, #0]
 800cc6a:	4633      	mov	r3, r6
 800cc6c:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc6e:	4621      	mov	r1, r4
 800cc70:	4628      	mov	r0, r5
 800cc72:	f000 f9e1 	bl	800d038 <_printf_common>
 800cc76:	3001      	adds	r0, #1
 800cc78:	f040 8089 	bne.w	800cd8e <_printf_float+0x1ae>
 800cc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc80:	b00d      	add	sp, #52	; 0x34
 800cc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc86:	eeb4 0b40 	vcmp.f64	d0, d0
 800cc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc8e:	d702      	bvc.n	800cc96 <_printf_float+0xb6>
 800cc90:	498b      	ldr	r1, [pc, #556]	; (800cec0 <_printf_float+0x2e0>)
 800cc92:	4b8c      	ldr	r3, [pc, #560]	; (800cec4 <_printf_float+0x2e4>)
 800cc94:	e7dc      	b.n	800cc50 <_printf_float+0x70>
 800cc96:	6861      	ldr	r1, [r4, #4]
 800cc98:	1c4b      	adds	r3, r1, #1
 800cc9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cc9e:	ab0a      	add	r3, sp, #40	; 0x28
 800cca0:	a809      	add	r0, sp, #36	; 0x24
 800cca2:	d13b      	bne.n	800cd1c <_printf_float+0x13c>
 800cca4:	2106      	movs	r1, #6
 800cca6:	6061      	str	r1, [r4, #4]
 800cca8:	f04f 0c00 	mov.w	ip, #0
 800ccac:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800ccb0:	e9cd 0900 	strd	r0, r9, [sp]
 800ccb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ccb8:	6022      	str	r2, [r4, #0]
 800ccba:	6861      	ldr	r1, [r4, #4]
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	f7ff ff09 	bl	800cad4 <__cvt>
 800ccc2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800ccc6:	2b47      	cmp	r3, #71	; 0x47
 800ccc8:	4680      	mov	r8, r0
 800ccca:	d109      	bne.n	800cce0 <_printf_float+0x100>
 800cccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccce:	1cd8      	adds	r0, r3, #3
 800ccd0:	db02      	blt.n	800ccd8 <_printf_float+0xf8>
 800ccd2:	6862      	ldr	r2, [r4, #4]
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	dd47      	ble.n	800cd68 <_printf_float+0x188>
 800ccd8:	f1a9 0902 	sub.w	r9, r9, #2
 800ccdc:	fa5f f989 	uxtb.w	r9, r9
 800cce0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cce4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cce6:	d824      	bhi.n	800cd32 <_printf_float+0x152>
 800cce8:	3901      	subs	r1, #1
 800ccea:	464a      	mov	r2, r9
 800ccec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ccf0:	9109      	str	r1, [sp, #36]	; 0x24
 800ccf2:	f7ff ff41 	bl	800cb78 <__exponent>
 800ccf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccf8:	1813      	adds	r3, r2, r0
 800ccfa:	2a01      	cmp	r2, #1
 800ccfc:	4682      	mov	sl, r0
 800ccfe:	6123      	str	r3, [r4, #16]
 800cd00:	dc02      	bgt.n	800cd08 <_printf_float+0x128>
 800cd02:	6822      	ldr	r2, [r4, #0]
 800cd04:	07d1      	lsls	r1, r2, #31
 800cd06:	d501      	bpl.n	800cd0c <_printf_float+0x12c>
 800cd08:	3301      	adds	r3, #1
 800cd0a:	6123      	str	r3, [r4, #16]
 800cd0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d0a9      	beq.n	800cc68 <_printf_float+0x88>
 800cd14:	232d      	movs	r3, #45	; 0x2d
 800cd16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd1a:	e7a5      	b.n	800cc68 <_printf_float+0x88>
 800cd1c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800cd20:	f000 8178 	beq.w	800d014 <_printf_float+0x434>
 800cd24:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cd28:	d1be      	bne.n	800cca8 <_printf_float+0xc8>
 800cd2a:	2900      	cmp	r1, #0
 800cd2c:	d1bc      	bne.n	800cca8 <_printf_float+0xc8>
 800cd2e:	2101      	movs	r1, #1
 800cd30:	e7b9      	b.n	800cca6 <_printf_float+0xc6>
 800cd32:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cd36:	d119      	bne.n	800cd6c <_printf_float+0x18c>
 800cd38:	2900      	cmp	r1, #0
 800cd3a:	6863      	ldr	r3, [r4, #4]
 800cd3c:	dd0c      	ble.n	800cd58 <_printf_float+0x178>
 800cd3e:	6121      	str	r1, [r4, #16]
 800cd40:	b913      	cbnz	r3, 800cd48 <_printf_float+0x168>
 800cd42:	6822      	ldr	r2, [r4, #0]
 800cd44:	07d2      	lsls	r2, r2, #31
 800cd46:	d502      	bpl.n	800cd4e <_printf_float+0x16e>
 800cd48:	3301      	adds	r3, #1
 800cd4a:	440b      	add	r3, r1
 800cd4c:	6123      	str	r3, [r4, #16]
 800cd4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd50:	65a3      	str	r3, [r4, #88]	; 0x58
 800cd52:	f04f 0a00 	mov.w	sl, #0
 800cd56:	e7d9      	b.n	800cd0c <_printf_float+0x12c>
 800cd58:	b913      	cbnz	r3, 800cd60 <_printf_float+0x180>
 800cd5a:	6822      	ldr	r2, [r4, #0]
 800cd5c:	07d0      	lsls	r0, r2, #31
 800cd5e:	d501      	bpl.n	800cd64 <_printf_float+0x184>
 800cd60:	3302      	adds	r3, #2
 800cd62:	e7f3      	b.n	800cd4c <_printf_float+0x16c>
 800cd64:	2301      	movs	r3, #1
 800cd66:	e7f1      	b.n	800cd4c <_printf_float+0x16c>
 800cd68:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cd6c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cd70:	4293      	cmp	r3, r2
 800cd72:	db05      	blt.n	800cd80 <_printf_float+0x1a0>
 800cd74:	6822      	ldr	r2, [r4, #0]
 800cd76:	6123      	str	r3, [r4, #16]
 800cd78:	07d1      	lsls	r1, r2, #31
 800cd7a:	d5e8      	bpl.n	800cd4e <_printf_float+0x16e>
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	e7e5      	b.n	800cd4c <_printf_float+0x16c>
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	bfd4      	ite	le
 800cd84:	f1c3 0302 	rsble	r3, r3, #2
 800cd88:	2301      	movgt	r3, #1
 800cd8a:	4413      	add	r3, r2
 800cd8c:	e7de      	b.n	800cd4c <_printf_float+0x16c>
 800cd8e:	6823      	ldr	r3, [r4, #0]
 800cd90:	055a      	lsls	r2, r3, #21
 800cd92:	d407      	bmi.n	800cda4 <_printf_float+0x1c4>
 800cd94:	6923      	ldr	r3, [r4, #16]
 800cd96:	4642      	mov	r2, r8
 800cd98:	4631      	mov	r1, r6
 800cd9a:	4628      	mov	r0, r5
 800cd9c:	47b8      	blx	r7
 800cd9e:	3001      	adds	r0, #1
 800cda0:	d12a      	bne.n	800cdf8 <_printf_float+0x218>
 800cda2:	e76b      	b.n	800cc7c <_printf_float+0x9c>
 800cda4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cda8:	f240 80de 	bls.w	800cf68 <_printf_float+0x388>
 800cdac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cdb0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cdb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdb8:	d133      	bne.n	800ce22 <_printf_float+0x242>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	4a42      	ldr	r2, [pc, #264]	; (800cec8 <_printf_float+0x2e8>)
 800cdbe:	4631      	mov	r1, r6
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	47b8      	blx	r7
 800cdc4:	3001      	adds	r0, #1
 800cdc6:	f43f af59 	beq.w	800cc7c <_printf_float+0x9c>
 800cdca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	db02      	blt.n	800cdd8 <_printf_float+0x1f8>
 800cdd2:	6823      	ldr	r3, [r4, #0]
 800cdd4:	07d8      	lsls	r0, r3, #31
 800cdd6:	d50f      	bpl.n	800cdf8 <_printf_float+0x218>
 800cdd8:	9b05      	ldr	r3, [sp, #20]
 800cdda:	465a      	mov	r2, fp
 800cddc:	4631      	mov	r1, r6
 800cdde:	4628      	mov	r0, r5
 800cde0:	47b8      	blx	r7
 800cde2:	3001      	adds	r0, #1
 800cde4:	f43f af4a 	beq.w	800cc7c <_printf_float+0x9c>
 800cde8:	f04f 0800 	mov.w	r8, #0
 800cdec:	f104 091a 	add.w	r9, r4, #26
 800cdf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	4543      	cmp	r3, r8
 800cdf6:	dc09      	bgt.n	800ce0c <_printf_float+0x22c>
 800cdf8:	6823      	ldr	r3, [r4, #0]
 800cdfa:	079b      	lsls	r3, r3, #30
 800cdfc:	f100 8105 	bmi.w	800d00a <_printf_float+0x42a>
 800ce00:	68e0      	ldr	r0, [r4, #12]
 800ce02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce04:	4298      	cmp	r0, r3
 800ce06:	bfb8      	it	lt
 800ce08:	4618      	movlt	r0, r3
 800ce0a:	e739      	b.n	800cc80 <_printf_float+0xa0>
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	464a      	mov	r2, r9
 800ce10:	4631      	mov	r1, r6
 800ce12:	4628      	mov	r0, r5
 800ce14:	47b8      	blx	r7
 800ce16:	3001      	adds	r0, #1
 800ce18:	f43f af30 	beq.w	800cc7c <_printf_float+0x9c>
 800ce1c:	f108 0801 	add.w	r8, r8, #1
 800ce20:	e7e6      	b.n	800cdf0 <_printf_float+0x210>
 800ce22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	dc2b      	bgt.n	800ce80 <_printf_float+0x2a0>
 800ce28:	2301      	movs	r3, #1
 800ce2a:	4a27      	ldr	r2, [pc, #156]	; (800cec8 <_printf_float+0x2e8>)
 800ce2c:	4631      	mov	r1, r6
 800ce2e:	4628      	mov	r0, r5
 800ce30:	47b8      	blx	r7
 800ce32:	3001      	adds	r0, #1
 800ce34:	f43f af22 	beq.w	800cc7c <_printf_float+0x9c>
 800ce38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce3a:	b923      	cbnz	r3, 800ce46 <_printf_float+0x266>
 800ce3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce3e:	b913      	cbnz	r3, 800ce46 <_printf_float+0x266>
 800ce40:	6823      	ldr	r3, [r4, #0]
 800ce42:	07d9      	lsls	r1, r3, #31
 800ce44:	d5d8      	bpl.n	800cdf8 <_printf_float+0x218>
 800ce46:	9b05      	ldr	r3, [sp, #20]
 800ce48:	465a      	mov	r2, fp
 800ce4a:	4631      	mov	r1, r6
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	47b8      	blx	r7
 800ce50:	3001      	adds	r0, #1
 800ce52:	f43f af13 	beq.w	800cc7c <_printf_float+0x9c>
 800ce56:	f04f 0900 	mov.w	r9, #0
 800ce5a:	f104 0a1a 	add.w	sl, r4, #26
 800ce5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce60:	425b      	negs	r3, r3
 800ce62:	454b      	cmp	r3, r9
 800ce64:	dc01      	bgt.n	800ce6a <_printf_float+0x28a>
 800ce66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce68:	e795      	b.n	800cd96 <_printf_float+0x1b6>
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	4652      	mov	r2, sl
 800ce6e:	4631      	mov	r1, r6
 800ce70:	4628      	mov	r0, r5
 800ce72:	47b8      	blx	r7
 800ce74:	3001      	adds	r0, #1
 800ce76:	f43f af01 	beq.w	800cc7c <_printf_float+0x9c>
 800ce7a:	f109 0901 	add.w	r9, r9, #1
 800ce7e:	e7ee      	b.n	800ce5e <_printf_float+0x27e>
 800ce80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce84:	429a      	cmp	r2, r3
 800ce86:	bfa8      	it	ge
 800ce88:	461a      	movge	r2, r3
 800ce8a:	2a00      	cmp	r2, #0
 800ce8c:	4691      	mov	r9, r2
 800ce8e:	dd07      	ble.n	800cea0 <_printf_float+0x2c0>
 800ce90:	4613      	mov	r3, r2
 800ce92:	4631      	mov	r1, r6
 800ce94:	4642      	mov	r2, r8
 800ce96:	4628      	mov	r0, r5
 800ce98:	47b8      	blx	r7
 800ce9a:	3001      	adds	r0, #1
 800ce9c:	f43f aeee 	beq.w	800cc7c <_printf_float+0x9c>
 800cea0:	f104 031a 	add.w	r3, r4, #26
 800cea4:	f04f 0a00 	mov.w	sl, #0
 800cea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ceac:	9307      	str	r3, [sp, #28]
 800ceae:	e017      	b.n	800cee0 <_printf_float+0x300>
 800ceb0:	ffffffff 	.word	0xffffffff
 800ceb4:	7fefffff 	.word	0x7fefffff
 800ceb8:	0800ebe8 	.word	0x0800ebe8
 800cebc:	0800ebe4 	.word	0x0800ebe4
 800cec0:	0800ebf0 	.word	0x0800ebf0
 800cec4:	0800ebec 	.word	0x0800ebec
 800cec8:	0800ebf4 	.word	0x0800ebf4
 800cecc:	2301      	movs	r3, #1
 800cece:	9a07      	ldr	r2, [sp, #28]
 800ced0:	4631      	mov	r1, r6
 800ced2:	4628      	mov	r0, r5
 800ced4:	47b8      	blx	r7
 800ced6:	3001      	adds	r0, #1
 800ced8:	f43f aed0 	beq.w	800cc7c <_printf_float+0x9c>
 800cedc:	f10a 0a01 	add.w	sl, sl, #1
 800cee0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cee2:	9306      	str	r3, [sp, #24]
 800cee4:	eba3 0309 	sub.w	r3, r3, r9
 800cee8:	4553      	cmp	r3, sl
 800ceea:	dcef      	bgt.n	800cecc <_printf_float+0x2ec>
 800ceec:	9b06      	ldr	r3, [sp, #24]
 800ceee:	4498      	add	r8, r3
 800cef0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cef4:	429a      	cmp	r2, r3
 800cef6:	db15      	blt.n	800cf24 <_printf_float+0x344>
 800cef8:	6823      	ldr	r3, [r4, #0]
 800cefa:	07da      	lsls	r2, r3, #31
 800cefc:	d412      	bmi.n	800cf24 <_printf_float+0x344>
 800cefe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf00:	9a06      	ldr	r2, [sp, #24]
 800cf02:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf04:	1a9a      	subs	r2, r3, r2
 800cf06:	eba3 0a01 	sub.w	sl, r3, r1
 800cf0a:	4592      	cmp	sl, r2
 800cf0c:	bfa8      	it	ge
 800cf0e:	4692      	movge	sl, r2
 800cf10:	f1ba 0f00 	cmp.w	sl, #0
 800cf14:	dc0e      	bgt.n	800cf34 <_printf_float+0x354>
 800cf16:	f04f 0800 	mov.w	r8, #0
 800cf1a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf1e:	f104 091a 	add.w	r9, r4, #26
 800cf22:	e019      	b.n	800cf58 <_printf_float+0x378>
 800cf24:	9b05      	ldr	r3, [sp, #20]
 800cf26:	465a      	mov	r2, fp
 800cf28:	4631      	mov	r1, r6
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	47b8      	blx	r7
 800cf2e:	3001      	adds	r0, #1
 800cf30:	d1e5      	bne.n	800cefe <_printf_float+0x31e>
 800cf32:	e6a3      	b.n	800cc7c <_printf_float+0x9c>
 800cf34:	4653      	mov	r3, sl
 800cf36:	4642      	mov	r2, r8
 800cf38:	4631      	mov	r1, r6
 800cf3a:	4628      	mov	r0, r5
 800cf3c:	47b8      	blx	r7
 800cf3e:	3001      	adds	r0, #1
 800cf40:	d1e9      	bne.n	800cf16 <_printf_float+0x336>
 800cf42:	e69b      	b.n	800cc7c <_printf_float+0x9c>
 800cf44:	2301      	movs	r3, #1
 800cf46:	464a      	mov	r2, r9
 800cf48:	4631      	mov	r1, r6
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	47b8      	blx	r7
 800cf4e:	3001      	adds	r0, #1
 800cf50:	f43f ae94 	beq.w	800cc7c <_printf_float+0x9c>
 800cf54:	f108 0801 	add.w	r8, r8, #1
 800cf58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf5c:	1a9b      	subs	r3, r3, r2
 800cf5e:	eba3 030a 	sub.w	r3, r3, sl
 800cf62:	4543      	cmp	r3, r8
 800cf64:	dcee      	bgt.n	800cf44 <_printf_float+0x364>
 800cf66:	e747      	b.n	800cdf8 <_printf_float+0x218>
 800cf68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf6a:	2a01      	cmp	r2, #1
 800cf6c:	dc01      	bgt.n	800cf72 <_printf_float+0x392>
 800cf6e:	07db      	lsls	r3, r3, #31
 800cf70:	d539      	bpl.n	800cfe6 <_printf_float+0x406>
 800cf72:	2301      	movs	r3, #1
 800cf74:	4642      	mov	r2, r8
 800cf76:	4631      	mov	r1, r6
 800cf78:	4628      	mov	r0, r5
 800cf7a:	47b8      	blx	r7
 800cf7c:	3001      	adds	r0, #1
 800cf7e:	f43f ae7d 	beq.w	800cc7c <_printf_float+0x9c>
 800cf82:	9b05      	ldr	r3, [sp, #20]
 800cf84:	465a      	mov	r2, fp
 800cf86:	4631      	mov	r1, r6
 800cf88:	4628      	mov	r0, r5
 800cf8a:	47b8      	blx	r7
 800cf8c:	3001      	adds	r0, #1
 800cf8e:	f108 0801 	add.w	r8, r8, #1
 800cf92:	f43f ae73 	beq.w	800cc7c <_printf_float+0x9c>
 800cf96:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cf9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cfa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa4:	f103 33ff 	add.w	r3, r3, #4294967295
 800cfa8:	d018      	beq.n	800cfdc <_printf_float+0x3fc>
 800cfaa:	4642      	mov	r2, r8
 800cfac:	4631      	mov	r1, r6
 800cfae:	4628      	mov	r0, r5
 800cfb0:	47b8      	blx	r7
 800cfb2:	3001      	adds	r0, #1
 800cfb4:	d10e      	bne.n	800cfd4 <_printf_float+0x3f4>
 800cfb6:	e661      	b.n	800cc7c <_printf_float+0x9c>
 800cfb8:	2301      	movs	r3, #1
 800cfba:	464a      	mov	r2, r9
 800cfbc:	4631      	mov	r1, r6
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	47b8      	blx	r7
 800cfc2:	3001      	adds	r0, #1
 800cfc4:	f43f ae5a 	beq.w	800cc7c <_printf_float+0x9c>
 800cfc8:	f108 0801 	add.w	r8, r8, #1
 800cfcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfce:	3b01      	subs	r3, #1
 800cfd0:	4543      	cmp	r3, r8
 800cfd2:	dcf1      	bgt.n	800cfb8 <_printf_float+0x3d8>
 800cfd4:	4653      	mov	r3, sl
 800cfd6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cfda:	e6dd      	b.n	800cd98 <_printf_float+0x1b8>
 800cfdc:	f04f 0800 	mov.w	r8, #0
 800cfe0:	f104 091a 	add.w	r9, r4, #26
 800cfe4:	e7f2      	b.n	800cfcc <_printf_float+0x3ec>
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	e7df      	b.n	800cfaa <_printf_float+0x3ca>
 800cfea:	2301      	movs	r3, #1
 800cfec:	464a      	mov	r2, r9
 800cfee:	4631      	mov	r1, r6
 800cff0:	4628      	mov	r0, r5
 800cff2:	47b8      	blx	r7
 800cff4:	3001      	adds	r0, #1
 800cff6:	f43f ae41 	beq.w	800cc7c <_printf_float+0x9c>
 800cffa:	f108 0801 	add.w	r8, r8, #1
 800cffe:	68e3      	ldr	r3, [r4, #12]
 800d000:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d002:	1a9b      	subs	r3, r3, r2
 800d004:	4543      	cmp	r3, r8
 800d006:	dcf0      	bgt.n	800cfea <_printf_float+0x40a>
 800d008:	e6fa      	b.n	800ce00 <_printf_float+0x220>
 800d00a:	f04f 0800 	mov.w	r8, #0
 800d00e:	f104 0919 	add.w	r9, r4, #25
 800d012:	e7f4      	b.n	800cffe <_printf_float+0x41e>
 800d014:	2900      	cmp	r1, #0
 800d016:	f43f ae8a 	beq.w	800cd2e <_printf_float+0x14e>
 800d01a:	f04f 0c00 	mov.w	ip, #0
 800d01e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800d022:	e9cd 0900 	strd	r0, r9, [sp]
 800d026:	6022      	str	r2, [r4, #0]
 800d028:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d02c:	4628      	mov	r0, r5
 800d02e:	f7ff fd51 	bl	800cad4 <__cvt>
 800d032:	4680      	mov	r8, r0
 800d034:	e64a      	b.n	800cccc <_printf_float+0xec>
 800d036:	bf00      	nop

0800d038 <_printf_common>:
 800d038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d03c:	4691      	mov	r9, r2
 800d03e:	461f      	mov	r7, r3
 800d040:	688a      	ldr	r2, [r1, #8]
 800d042:	690b      	ldr	r3, [r1, #16]
 800d044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d048:	4293      	cmp	r3, r2
 800d04a:	bfb8      	it	lt
 800d04c:	4613      	movlt	r3, r2
 800d04e:	f8c9 3000 	str.w	r3, [r9]
 800d052:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d056:	4606      	mov	r6, r0
 800d058:	460c      	mov	r4, r1
 800d05a:	b112      	cbz	r2, 800d062 <_printf_common+0x2a>
 800d05c:	3301      	adds	r3, #1
 800d05e:	f8c9 3000 	str.w	r3, [r9]
 800d062:	6823      	ldr	r3, [r4, #0]
 800d064:	0699      	lsls	r1, r3, #26
 800d066:	bf42      	ittt	mi
 800d068:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d06c:	3302      	addmi	r3, #2
 800d06e:	f8c9 3000 	strmi.w	r3, [r9]
 800d072:	6825      	ldr	r5, [r4, #0]
 800d074:	f015 0506 	ands.w	r5, r5, #6
 800d078:	d107      	bne.n	800d08a <_printf_common+0x52>
 800d07a:	f104 0a19 	add.w	sl, r4, #25
 800d07e:	68e3      	ldr	r3, [r4, #12]
 800d080:	f8d9 2000 	ldr.w	r2, [r9]
 800d084:	1a9b      	subs	r3, r3, r2
 800d086:	42ab      	cmp	r3, r5
 800d088:	dc28      	bgt.n	800d0dc <_printf_common+0xa4>
 800d08a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d08e:	6822      	ldr	r2, [r4, #0]
 800d090:	3300      	adds	r3, #0
 800d092:	bf18      	it	ne
 800d094:	2301      	movne	r3, #1
 800d096:	0692      	lsls	r2, r2, #26
 800d098:	d42d      	bmi.n	800d0f6 <_printf_common+0xbe>
 800d09a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d09e:	4639      	mov	r1, r7
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	47c0      	blx	r8
 800d0a4:	3001      	adds	r0, #1
 800d0a6:	d020      	beq.n	800d0ea <_printf_common+0xb2>
 800d0a8:	6823      	ldr	r3, [r4, #0]
 800d0aa:	68e5      	ldr	r5, [r4, #12]
 800d0ac:	f8d9 2000 	ldr.w	r2, [r9]
 800d0b0:	f003 0306 	and.w	r3, r3, #6
 800d0b4:	2b04      	cmp	r3, #4
 800d0b6:	bf08      	it	eq
 800d0b8:	1aad      	subeq	r5, r5, r2
 800d0ba:	68a3      	ldr	r3, [r4, #8]
 800d0bc:	6922      	ldr	r2, [r4, #16]
 800d0be:	bf0c      	ite	eq
 800d0c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0c4:	2500      	movne	r5, #0
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	bfc4      	itt	gt
 800d0ca:	1a9b      	subgt	r3, r3, r2
 800d0cc:	18ed      	addgt	r5, r5, r3
 800d0ce:	f04f 0900 	mov.w	r9, #0
 800d0d2:	341a      	adds	r4, #26
 800d0d4:	454d      	cmp	r5, r9
 800d0d6:	d11a      	bne.n	800d10e <_printf_common+0xd6>
 800d0d8:	2000      	movs	r0, #0
 800d0da:	e008      	b.n	800d0ee <_printf_common+0xb6>
 800d0dc:	2301      	movs	r3, #1
 800d0de:	4652      	mov	r2, sl
 800d0e0:	4639      	mov	r1, r7
 800d0e2:	4630      	mov	r0, r6
 800d0e4:	47c0      	blx	r8
 800d0e6:	3001      	adds	r0, #1
 800d0e8:	d103      	bne.n	800d0f2 <_printf_common+0xba>
 800d0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0f2:	3501      	adds	r5, #1
 800d0f4:	e7c3      	b.n	800d07e <_printf_common+0x46>
 800d0f6:	18e1      	adds	r1, r4, r3
 800d0f8:	1c5a      	adds	r2, r3, #1
 800d0fa:	2030      	movs	r0, #48	; 0x30
 800d0fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d100:	4422      	add	r2, r4
 800d102:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d106:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d10a:	3302      	adds	r3, #2
 800d10c:	e7c5      	b.n	800d09a <_printf_common+0x62>
 800d10e:	2301      	movs	r3, #1
 800d110:	4622      	mov	r2, r4
 800d112:	4639      	mov	r1, r7
 800d114:	4630      	mov	r0, r6
 800d116:	47c0      	blx	r8
 800d118:	3001      	adds	r0, #1
 800d11a:	d0e6      	beq.n	800d0ea <_printf_common+0xb2>
 800d11c:	f109 0901 	add.w	r9, r9, #1
 800d120:	e7d8      	b.n	800d0d4 <_printf_common+0x9c>
	...

0800d124 <_sbrk_r>:
 800d124:	b538      	push	{r3, r4, r5, lr}
 800d126:	4c06      	ldr	r4, [pc, #24]	; (800d140 <_sbrk_r+0x1c>)
 800d128:	2300      	movs	r3, #0
 800d12a:	4605      	mov	r5, r0
 800d12c:	4608      	mov	r0, r1
 800d12e:	6023      	str	r3, [r4, #0]
 800d130:	f7f5 fd44 	bl	8002bbc <_sbrk>
 800d134:	1c43      	adds	r3, r0, #1
 800d136:	d102      	bne.n	800d13e <_sbrk_r+0x1a>
 800d138:	6823      	ldr	r3, [r4, #0]
 800d13a:	b103      	cbz	r3, 800d13e <_sbrk_r+0x1a>
 800d13c:	602b      	str	r3, [r5, #0]
 800d13e:	bd38      	pop	{r3, r4, r5, pc}
 800d140:	240264b4 	.word	0x240264b4

0800d144 <strcat>:
 800d144:	b510      	push	{r4, lr}
 800d146:	4603      	mov	r3, r0
 800d148:	781a      	ldrb	r2, [r3, #0]
 800d14a:	1c5c      	adds	r4, r3, #1
 800d14c:	b93a      	cbnz	r2, 800d15e <strcat+0x1a>
 800d14e:	3b01      	subs	r3, #1
 800d150:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d154:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d158:	2a00      	cmp	r2, #0
 800d15a:	d1f9      	bne.n	800d150 <strcat+0xc>
 800d15c:	bd10      	pop	{r4, pc}
 800d15e:	4623      	mov	r3, r4
 800d160:	e7f2      	b.n	800d148 <strcat+0x4>

0800d162 <strcpy>:
 800d162:	4603      	mov	r3, r0
 800d164:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d168:	f803 2b01 	strb.w	r2, [r3], #1
 800d16c:	2a00      	cmp	r2, #0
 800d16e:	d1f9      	bne.n	800d164 <strcpy+0x2>
 800d170:	4770      	bx	lr

0800d172 <strstr>:
 800d172:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d174:	7803      	ldrb	r3, [r0, #0]
 800d176:	b17b      	cbz	r3, 800d198 <strstr+0x26>
 800d178:	4604      	mov	r4, r0
 800d17a:	7823      	ldrb	r3, [r4, #0]
 800d17c:	4620      	mov	r0, r4
 800d17e:	1c66      	adds	r6, r4, #1
 800d180:	b17b      	cbz	r3, 800d1a2 <strstr+0x30>
 800d182:	1e4a      	subs	r2, r1, #1
 800d184:	1e63      	subs	r3, r4, #1
 800d186:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800d18a:	b14d      	cbz	r5, 800d1a0 <strstr+0x2e>
 800d18c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800d190:	42af      	cmp	r7, r5
 800d192:	4634      	mov	r4, r6
 800d194:	d0f7      	beq.n	800d186 <strstr+0x14>
 800d196:	e7f0      	b.n	800d17a <strstr+0x8>
 800d198:	780b      	ldrb	r3, [r1, #0]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	bf18      	it	ne
 800d19e:	2000      	movne	r0, #0
 800d1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	e7fc      	b.n	800d1a0 <strstr+0x2e>
	...

0800d1a8 <__utoa>:
 800d1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1aa:	4b1d      	ldr	r3, [pc, #116]	; (800d220 <__utoa+0x78>)
 800d1ac:	b08b      	sub	sp, #44	; 0x2c
 800d1ae:	4605      	mov	r5, r0
 800d1b0:	460c      	mov	r4, r1
 800d1b2:	466e      	mov	r6, sp
 800d1b4:	f103 0c20 	add.w	ip, r3, #32
 800d1b8:	6818      	ldr	r0, [r3, #0]
 800d1ba:	6859      	ldr	r1, [r3, #4]
 800d1bc:	4637      	mov	r7, r6
 800d1be:	c703      	stmia	r7!, {r0, r1}
 800d1c0:	3308      	adds	r3, #8
 800d1c2:	4563      	cmp	r3, ip
 800d1c4:	463e      	mov	r6, r7
 800d1c6:	d1f7      	bne.n	800d1b8 <__utoa+0x10>
 800d1c8:	6818      	ldr	r0, [r3, #0]
 800d1ca:	791b      	ldrb	r3, [r3, #4]
 800d1cc:	713b      	strb	r3, [r7, #4]
 800d1ce:	1e93      	subs	r3, r2, #2
 800d1d0:	2b22      	cmp	r3, #34	; 0x22
 800d1d2:	6038      	str	r0, [r7, #0]
 800d1d4:	f04f 0300 	mov.w	r3, #0
 800d1d8:	d904      	bls.n	800d1e4 <__utoa+0x3c>
 800d1da:	7023      	strb	r3, [r4, #0]
 800d1dc:	461c      	mov	r4, r3
 800d1de:	4620      	mov	r0, r4
 800d1e0:	b00b      	add	sp, #44	; 0x2c
 800d1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1e4:	1e66      	subs	r6, r4, #1
 800d1e6:	fbb5 f0f2 	udiv	r0, r5, r2
 800d1ea:	af0a      	add	r7, sp, #40	; 0x28
 800d1ec:	fb02 5510 	mls	r5, r2, r0, r5
 800d1f0:	443d      	add	r5, r7
 800d1f2:	1c59      	adds	r1, r3, #1
 800d1f4:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800d1f8:	f806 5f01 	strb.w	r5, [r6, #1]!
 800d1fc:	4605      	mov	r5, r0
 800d1fe:	b968      	cbnz	r0, 800d21c <__utoa+0x74>
 800d200:	5460      	strb	r0, [r4, r1]
 800d202:	4423      	add	r3, r4
 800d204:	4622      	mov	r2, r4
 800d206:	1b19      	subs	r1, r3, r4
 800d208:	1b10      	subs	r0, r2, r4
 800d20a:	4281      	cmp	r1, r0
 800d20c:	dde7      	ble.n	800d1de <__utoa+0x36>
 800d20e:	7811      	ldrb	r1, [r2, #0]
 800d210:	7818      	ldrb	r0, [r3, #0]
 800d212:	f802 0b01 	strb.w	r0, [r2], #1
 800d216:	f803 1901 	strb.w	r1, [r3], #-1
 800d21a:	e7f4      	b.n	800d206 <__utoa+0x5e>
 800d21c:	460b      	mov	r3, r1
 800d21e:	e7e2      	b.n	800d1e6 <__utoa+0x3e>
 800d220:	0800ebf6 	.word	0x0800ebf6

0800d224 <quorem>:
 800d224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d228:	6903      	ldr	r3, [r0, #16]
 800d22a:	690c      	ldr	r4, [r1, #16]
 800d22c:	42a3      	cmp	r3, r4
 800d22e:	4680      	mov	r8, r0
 800d230:	f2c0 8082 	blt.w	800d338 <quorem+0x114>
 800d234:	3c01      	subs	r4, #1
 800d236:	f101 0714 	add.w	r7, r1, #20
 800d23a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d23e:	f100 0614 	add.w	r6, r0, #20
 800d242:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d246:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d24a:	eb06 030c 	add.w	r3, r6, ip
 800d24e:	3501      	adds	r5, #1
 800d250:	eb07 090c 	add.w	r9, r7, ip
 800d254:	9301      	str	r3, [sp, #4]
 800d256:	fbb0 f5f5 	udiv	r5, r0, r5
 800d25a:	b395      	cbz	r5, 800d2c2 <quorem+0x9e>
 800d25c:	f04f 0a00 	mov.w	sl, #0
 800d260:	4638      	mov	r0, r7
 800d262:	46b6      	mov	lr, r6
 800d264:	46d3      	mov	fp, sl
 800d266:	f850 2b04 	ldr.w	r2, [r0], #4
 800d26a:	b293      	uxth	r3, r2
 800d26c:	fb05 a303 	mla	r3, r5, r3, sl
 800d270:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d274:	b29b      	uxth	r3, r3
 800d276:	ebab 0303 	sub.w	r3, fp, r3
 800d27a:	0c12      	lsrs	r2, r2, #16
 800d27c:	f8de b000 	ldr.w	fp, [lr]
 800d280:	fb05 a202 	mla	r2, r5, r2, sl
 800d284:	fa13 f38b 	uxtah	r3, r3, fp
 800d288:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d28c:	fa1f fb82 	uxth.w	fp, r2
 800d290:	f8de 2000 	ldr.w	r2, [lr]
 800d294:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d298:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2a2:	4581      	cmp	r9, r0
 800d2a4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d2a8:	f84e 3b04 	str.w	r3, [lr], #4
 800d2ac:	d2db      	bcs.n	800d266 <quorem+0x42>
 800d2ae:	f856 300c 	ldr.w	r3, [r6, ip]
 800d2b2:	b933      	cbnz	r3, 800d2c2 <quorem+0x9e>
 800d2b4:	9b01      	ldr	r3, [sp, #4]
 800d2b6:	3b04      	subs	r3, #4
 800d2b8:	429e      	cmp	r6, r3
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	d330      	bcc.n	800d320 <quorem+0xfc>
 800d2be:	f8c8 4010 	str.w	r4, [r8, #16]
 800d2c2:	4640      	mov	r0, r8
 800d2c4:	f000 ffae 	bl	800e224 <__mcmp>
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	db25      	blt.n	800d318 <quorem+0xf4>
 800d2cc:	3501      	adds	r5, #1
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	f04f 0c00 	mov.w	ip, #0
 800d2d4:	f857 2b04 	ldr.w	r2, [r7], #4
 800d2d8:	f8d0 e000 	ldr.w	lr, [r0]
 800d2dc:	b293      	uxth	r3, r2
 800d2de:	ebac 0303 	sub.w	r3, ip, r3
 800d2e2:	0c12      	lsrs	r2, r2, #16
 800d2e4:	fa13 f38e 	uxtah	r3, r3, lr
 800d2e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d2ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2f6:	45b9      	cmp	r9, r7
 800d2f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d2fc:	f840 3b04 	str.w	r3, [r0], #4
 800d300:	d2e8      	bcs.n	800d2d4 <quorem+0xb0>
 800d302:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d306:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d30a:	b92a      	cbnz	r2, 800d318 <quorem+0xf4>
 800d30c:	3b04      	subs	r3, #4
 800d30e:	429e      	cmp	r6, r3
 800d310:	461a      	mov	r2, r3
 800d312:	d30b      	bcc.n	800d32c <quorem+0x108>
 800d314:	f8c8 4010 	str.w	r4, [r8, #16]
 800d318:	4628      	mov	r0, r5
 800d31a:	b003      	add	sp, #12
 800d31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d320:	6812      	ldr	r2, [r2, #0]
 800d322:	3b04      	subs	r3, #4
 800d324:	2a00      	cmp	r2, #0
 800d326:	d1ca      	bne.n	800d2be <quorem+0x9a>
 800d328:	3c01      	subs	r4, #1
 800d32a:	e7c5      	b.n	800d2b8 <quorem+0x94>
 800d32c:	6812      	ldr	r2, [r2, #0]
 800d32e:	3b04      	subs	r3, #4
 800d330:	2a00      	cmp	r2, #0
 800d332:	d1ef      	bne.n	800d314 <quorem+0xf0>
 800d334:	3c01      	subs	r4, #1
 800d336:	e7ea      	b.n	800d30e <quorem+0xea>
 800d338:	2000      	movs	r0, #0
 800d33a:	e7ee      	b.n	800d31a <quorem+0xf6>
 800d33c:	0000      	movs	r0, r0
	...

0800d340 <_dtoa_r>:
 800d340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d344:	ec57 6b10 	vmov	r6, r7, d0
 800d348:	b095      	sub	sp, #84	; 0x54
 800d34a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d34c:	9108      	str	r1, [sp, #32]
 800d34e:	4604      	mov	r4, r0
 800d350:	920a      	str	r2, [sp, #40]	; 0x28
 800d352:	9311      	str	r3, [sp, #68]	; 0x44
 800d354:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800d358:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d35c:	b93d      	cbnz	r5, 800d36e <_dtoa_r+0x2e>
 800d35e:	2010      	movs	r0, #16
 800d360:	f7ff faec 	bl	800c93c <malloc>
 800d364:	6260      	str	r0, [r4, #36]	; 0x24
 800d366:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d36a:	6005      	str	r5, [r0, #0]
 800d36c:	60c5      	str	r5, [r0, #12]
 800d36e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d370:	6819      	ldr	r1, [r3, #0]
 800d372:	b151      	cbz	r1, 800d38a <_dtoa_r+0x4a>
 800d374:	685a      	ldr	r2, [r3, #4]
 800d376:	604a      	str	r2, [r1, #4]
 800d378:	2301      	movs	r3, #1
 800d37a:	4093      	lsls	r3, r2
 800d37c:	608b      	str	r3, [r1, #8]
 800d37e:	4620      	mov	r0, r4
 800d380:	f000 fd6e 	bl	800de60 <_Bfree>
 800d384:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d386:	2200      	movs	r2, #0
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	1e3b      	subs	r3, r7, #0
 800d38c:	bfb9      	ittee	lt
 800d38e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d392:	9303      	strlt	r3, [sp, #12]
 800d394:	2300      	movge	r3, #0
 800d396:	f8c8 3000 	strge.w	r3, [r8]
 800d39a:	9d03      	ldr	r5, [sp, #12]
 800d39c:	4bac      	ldr	r3, [pc, #688]	; (800d650 <_dtoa_r+0x310>)
 800d39e:	bfbc      	itt	lt
 800d3a0:	2201      	movlt	r2, #1
 800d3a2:	f8c8 2000 	strlt.w	r2, [r8]
 800d3a6:	43ab      	bics	r3, r5
 800d3a8:	d11b      	bne.n	800d3e2 <_dtoa_r+0xa2>
 800d3aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d3ac:	f242 730f 	movw	r3, #9999	; 0x270f
 800d3b0:	6013      	str	r3, [r2, #0]
 800d3b2:	9b02      	ldr	r3, [sp, #8]
 800d3b4:	b923      	cbnz	r3, 800d3c0 <_dtoa_r+0x80>
 800d3b6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d3ba:	2d00      	cmp	r5, #0
 800d3bc:	f000 84dd 	beq.w	800dd7a <_dtoa_r+0xa3a>
 800d3c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d3c2:	b953      	cbnz	r3, 800d3da <_dtoa_r+0x9a>
 800d3c4:	4ba3      	ldr	r3, [pc, #652]	; (800d654 <_dtoa_r+0x314>)
 800d3c6:	e020      	b.n	800d40a <_dtoa_r+0xca>
 800d3c8:	4ba3      	ldr	r3, [pc, #652]	; (800d658 <_dtoa_r+0x318>)
 800d3ca:	9304      	str	r3, [sp, #16]
 800d3cc:	3308      	adds	r3, #8
 800d3ce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d3d0:	6013      	str	r3, [r2, #0]
 800d3d2:	9804      	ldr	r0, [sp, #16]
 800d3d4:	b015      	add	sp, #84	; 0x54
 800d3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3da:	4b9e      	ldr	r3, [pc, #632]	; (800d654 <_dtoa_r+0x314>)
 800d3dc:	9304      	str	r3, [sp, #16]
 800d3de:	3303      	adds	r3, #3
 800d3e0:	e7f5      	b.n	800d3ce <_dtoa_r+0x8e>
 800d3e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d3e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ee:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d3f2:	d10c      	bne.n	800d40e <_dtoa_r+0xce>
 800d3f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	6013      	str	r3, [r2, #0]
 800d3fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	f000 84b9 	beq.w	800dd74 <_dtoa_r+0xa34>
 800d402:	4b96      	ldr	r3, [pc, #600]	; (800d65c <_dtoa_r+0x31c>)
 800d404:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d406:	6013      	str	r3, [r2, #0]
 800d408:	3b01      	subs	r3, #1
 800d40a:	9304      	str	r3, [sp, #16]
 800d40c:	e7e1      	b.n	800d3d2 <_dtoa_r+0x92>
 800d40e:	a913      	add	r1, sp, #76	; 0x4c
 800d410:	aa12      	add	r2, sp, #72	; 0x48
 800d412:	ed9d 0b04 	vldr	d0, [sp, #16]
 800d416:	4620      	mov	r0, r4
 800d418:	f000 ff7b 	bl	800e312 <__d2b>
 800d41c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800d420:	9001      	str	r0, [sp, #4]
 800d422:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d424:	2e00      	cmp	r6, #0
 800d426:	d046      	beq.n	800d4b6 <_dtoa_r+0x176>
 800d428:	9805      	ldr	r0, [sp, #20]
 800d42a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800d42e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d432:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800d436:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d43a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800d43e:	2700      	movs	r7, #0
 800d440:	ee07 aa90 	vmov	s15, sl
 800d444:	ec43 2b16 	vmov	d6, r2, r3
 800d448:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800d44c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800d638 <_dtoa_r+0x2f8>
 800d450:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d454:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d458:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800d640 <_dtoa_r+0x300>
 800d45c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800d460:	eeb0 7b46 	vmov.f64	d7, d6
 800d464:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800d648 <_dtoa_r+0x308>
 800d468:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d46c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d470:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d478:	ee16 ba90 	vmov	fp, s13
 800d47c:	d508      	bpl.n	800d490 <_dtoa_r+0x150>
 800d47e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d482:	eeb4 6b47 	vcmp.f64	d6, d7
 800d486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d48a:	bf18      	it	ne
 800d48c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d490:	f1bb 0f16 	cmp.w	fp, #22
 800d494:	d834      	bhi.n	800d500 <_dtoa_r+0x1c0>
 800d496:	4b72      	ldr	r3, [pc, #456]	; (800d660 <_dtoa_r+0x320>)
 800d498:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d49c:	ed93 7b00 	vldr	d7, [r3]
 800d4a0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d4a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ac:	dd01      	ble.n	800d4b2 <_dtoa_r+0x172>
 800d4ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	e025      	b.n	800d502 <_dtoa_r+0x1c2>
 800d4b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d4b8:	eb01 0a03 	add.w	sl, r1, r3
 800d4bc:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800d4c0:	2b20      	cmp	r3, #32
 800d4c2:	dd17      	ble.n	800d4f4 <_dtoa_r+0x1b4>
 800d4c4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800d4c8:	9a02      	ldr	r2, [sp, #8]
 800d4ca:	409d      	lsls	r5, r3
 800d4cc:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800d4d0:	fa22 f303 	lsr.w	r3, r2, r3
 800d4d4:	432b      	orrs	r3, r5
 800d4d6:	ee07 3a90 	vmov	s15, r3
 800d4da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d4de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d4e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d4e6:	9805      	ldr	r0, [sp, #20]
 800d4e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4ec:	2701      	movs	r7, #1
 800d4ee:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800d4f2:	e7a5      	b.n	800d440 <_dtoa_r+0x100>
 800d4f4:	9a02      	ldr	r2, [sp, #8]
 800d4f6:	f1c3 0320 	rsb	r3, r3, #32
 800d4fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d4fe:	e7ea      	b.n	800d4d6 <_dtoa_r+0x196>
 800d500:	2301      	movs	r3, #1
 800d502:	eba1 0a0a 	sub.w	sl, r1, sl
 800d506:	9310      	str	r3, [sp, #64]	; 0x40
 800d508:	f1ba 0301 	subs.w	r3, sl, #1
 800d50c:	9307      	str	r3, [sp, #28]
 800d50e:	bf43      	ittte	mi
 800d510:	2300      	movmi	r3, #0
 800d512:	f1ca 0a01 	rsbmi	sl, sl, #1
 800d516:	9307      	strmi	r3, [sp, #28]
 800d518:	f04f 0a00 	movpl.w	sl, #0
 800d51c:	f1bb 0f00 	cmp.w	fp, #0
 800d520:	db19      	blt.n	800d556 <_dtoa_r+0x216>
 800d522:	9b07      	ldr	r3, [sp, #28]
 800d524:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d528:	445b      	add	r3, fp
 800d52a:	9307      	str	r3, [sp, #28]
 800d52c:	f04f 0800 	mov.w	r8, #0
 800d530:	9b08      	ldr	r3, [sp, #32]
 800d532:	2b09      	cmp	r3, #9
 800d534:	d866      	bhi.n	800d604 <_dtoa_r+0x2c4>
 800d536:	2b05      	cmp	r3, #5
 800d538:	bfc4      	itt	gt
 800d53a:	3b04      	subgt	r3, #4
 800d53c:	9308      	strgt	r3, [sp, #32]
 800d53e:	9b08      	ldr	r3, [sp, #32]
 800d540:	f1a3 0302 	sub.w	r3, r3, #2
 800d544:	bfcc      	ite	gt
 800d546:	2500      	movgt	r5, #0
 800d548:	2501      	movle	r5, #1
 800d54a:	2b03      	cmp	r3, #3
 800d54c:	d866      	bhi.n	800d61c <_dtoa_r+0x2dc>
 800d54e:	e8df f003 	tbb	[pc, r3]
 800d552:	5755      	.short	0x5755
 800d554:	4909      	.short	0x4909
 800d556:	2300      	movs	r3, #0
 800d558:	ebaa 0a0b 	sub.w	sl, sl, fp
 800d55c:	f1cb 0800 	rsb	r8, fp, #0
 800d560:	930b      	str	r3, [sp, #44]	; 0x2c
 800d562:	e7e5      	b.n	800d530 <_dtoa_r+0x1f0>
 800d564:	2301      	movs	r3, #1
 800d566:	9309      	str	r3, [sp, #36]	; 0x24
 800d568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	dd59      	ble.n	800d622 <_dtoa_r+0x2e2>
 800d56e:	9306      	str	r3, [sp, #24]
 800d570:	4699      	mov	r9, r3
 800d572:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d574:	2200      	movs	r2, #0
 800d576:	6072      	str	r2, [r6, #4]
 800d578:	2204      	movs	r2, #4
 800d57a:	f102 0014 	add.w	r0, r2, #20
 800d57e:	4298      	cmp	r0, r3
 800d580:	6871      	ldr	r1, [r6, #4]
 800d582:	d953      	bls.n	800d62c <_dtoa_r+0x2ec>
 800d584:	4620      	mov	r0, r4
 800d586:	f000 fc37 	bl	800ddf8 <_Balloc>
 800d58a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d58c:	6030      	str	r0, [r6, #0]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	9304      	str	r3, [sp, #16]
 800d592:	f1b9 0f0e 	cmp.w	r9, #14
 800d596:	f200 80c2 	bhi.w	800d71e <_dtoa_r+0x3de>
 800d59a:	2d00      	cmp	r5, #0
 800d59c:	f000 80bf 	beq.w	800d71e <_dtoa_r+0x3de>
 800d5a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d5a4:	f1bb 0f00 	cmp.w	fp, #0
 800d5a8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800d5ac:	f340 80e6 	ble.w	800d77c <_dtoa_r+0x43c>
 800d5b0:	4a2b      	ldr	r2, [pc, #172]	; (800d660 <_dtoa_r+0x320>)
 800d5b2:	f00b 030f 	and.w	r3, fp, #15
 800d5b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d5ba:	ed93 7b00 	vldr	d7, [r3]
 800d5be:	ea4f 132b 	mov.w	r3, fp, asr #4
 800d5c2:	06da      	lsls	r2, r3, #27
 800d5c4:	f140 80d8 	bpl.w	800d778 <_dtoa_r+0x438>
 800d5c8:	4a26      	ldr	r2, [pc, #152]	; (800d664 <_dtoa_r+0x324>)
 800d5ca:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800d5ce:	ed92 6b08 	vldr	d6, [r2, #32]
 800d5d2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d5d6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d5da:	f003 030f 	and.w	r3, r3, #15
 800d5de:	2203      	movs	r2, #3
 800d5e0:	4920      	ldr	r1, [pc, #128]	; (800d664 <_dtoa_r+0x324>)
 800d5e2:	e04a      	b.n	800d67a <_dtoa_r+0x33a>
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5ea:	445b      	add	r3, fp
 800d5ec:	f103 0901 	add.w	r9, r3, #1
 800d5f0:	9306      	str	r3, [sp, #24]
 800d5f2:	464b      	mov	r3, r9
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	bfb8      	it	lt
 800d5f8:	2301      	movlt	r3, #1
 800d5fa:	e7ba      	b.n	800d572 <_dtoa_r+0x232>
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	e7b2      	b.n	800d566 <_dtoa_r+0x226>
 800d600:	2300      	movs	r3, #0
 800d602:	e7f0      	b.n	800d5e6 <_dtoa_r+0x2a6>
 800d604:	2501      	movs	r5, #1
 800d606:	2300      	movs	r3, #0
 800d608:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800d60c:	f04f 33ff 	mov.w	r3, #4294967295
 800d610:	9306      	str	r3, [sp, #24]
 800d612:	4699      	mov	r9, r3
 800d614:	2200      	movs	r2, #0
 800d616:	2312      	movs	r3, #18
 800d618:	920a      	str	r2, [sp, #40]	; 0x28
 800d61a:	e7aa      	b.n	800d572 <_dtoa_r+0x232>
 800d61c:	2301      	movs	r3, #1
 800d61e:	9309      	str	r3, [sp, #36]	; 0x24
 800d620:	e7f4      	b.n	800d60c <_dtoa_r+0x2cc>
 800d622:	2301      	movs	r3, #1
 800d624:	9306      	str	r3, [sp, #24]
 800d626:	4699      	mov	r9, r3
 800d628:	461a      	mov	r2, r3
 800d62a:	e7f5      	b.n	800d618 <_dtoa_r+0x2d8>
 800d62c:	3101      	adds	r1, #1
 800d62e:	6071      	str	r1, [r6, #4]
 800d630:	0052      	lsls	r2, r2, #1
 800d632:	e7a2      	b.n	800d57a <_dtoa_r+0x23a>
 800d634:	f3af 8000 	nop.w
 800d638:	636f4361 	.word	0x636f4361
 800d63c:	3fd287a7 	.word	0x3fd287a7
 800d640:	8b60c8b3 	.word	0x8b60c8b3
 800d644:	3fc68a28 	.word	0x3fc68a28
 800d648:	509f79fb 	.word	0x509f79fb
 800d64c:	3fd34413 	.word	0x3fd34413
 800d650:	7ff00000 	.word	0x7ff00000
 800d654:	0800ec24 	.word	0x0800ec24
 800d658:	0800ec1b 	.word	0x0800ec1b
 800d65c:	0800ebf5 	.word	0x0800ebf5
 800d660:	0800ec50 	.word	0x0800ec50
 800d664:	0800ec28 	.word	0x0800ec28
 800d668:	07de      	lsls	r6, r3, #31
 800d66a:	d504      	bpl.n	800d676 <_dtoa_r+0x336>
 800d66c:	ed91 6b00 	vldr	d6, [r1]
 800d670:	3201      	adds	r2, #1
 800d672:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d676:	105b      	asrs	r3, r3, #1
 800d678:	3108      	adds	r1, #8
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d1f4      	bne.n	800d668 <_dtoa_r+0x328>
 800d67e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d682:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d686:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d68a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	f000 80a7 	beq.w	800d7e0 <_dtoa_r+0x4a0>
 800d692:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d696:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d69a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6a2:	f140 809d 	bpl.w	800d7e0 <_dtoa_r+0x4a0>
 800d6a6:	f1b9 0f00 	cmp.w	r9, #0
 800d6aa:	f000 8099 	beq.w	800d7e0 <_dtoa_r+0x4a0>
 800d6ae:	9b06      	ldr	r3, [sp, #24]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	dd30      	ble.n	800d716 <_dtoa_r+0x3d6>
 800d6b4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d6b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d6bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d6c0:	9d06      	ldr	r5, [sp, #24]
 800d6c2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d6c6:	3201      	adds	r2, #1
 800d6c8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d6cc:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d6d0:	ee07 2a90 	vmov	s15, r2
 800d6d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d6d8:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d6dc:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d6e0:	9a03      	ldr	r2, [sp, #12]
 800d6e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6e6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800d6ea:	2d00      	cmp	r5, #0
 800d6ec:	d17b      	bne.n	800d7e6 <_dtoa_r+0x4a6>
 800d6ee:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d6f2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d6f6:	ec41 0b17 	vmov	d7, r0, r1
 800d6fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d702:	f300 8253 	bgt.w	800dbac <_dtoa_r+0x86c>
 800d706:	eeb1 7b47 	vneg.f64	d7, d7
 800d70a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d712:	f100 8249 	bmi.w	800dba8 <_dtoa_r+0x868>
 800d716:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d71a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d71e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d720:	2b00      	cmp	r3, #0
 800d722:	f2c0 8119 	blt.w	800d958 <_dtoa_r+0x618>
 800d726:	f1bb 0f0e 	cmp.w	fp, #14
 800d72a:	f300 8115 	bgt.w	800d958 <_dtoa_r+0x618>
 800d72e:	4bc3      	ldr	r3, [pc, #780]	; (800da3c <_dtoa_r+0x6fc>)
 800d730:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d734:	ed93 6b00 	vldr	d6, [r3]
 800d738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	f280 80ba 	bge.w	800d8b4 <_dtoa_r+0x574>
 800d740:	f1b9 0f00 	cmp.w	r9, #0
 800d744:	f300 80b6 	bgt.w	800d8b4 <_dtoa_r+0x574>
 800d748:	f040 822d 	bne.w	800dba6 <_dtoa_r+0x866>
 800d74c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d750:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d754:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d758:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d760:	464d      	mov	r5, r9
 800d762:	464f      	mov	r7, r9
 800d764:	f280 8204 	bge.w	800db70 <_dtoa_r+0x830>
 800d768:	9b04      	ldr	r3, [sp, #16]
 800d76a:	9a04      	ldr	r2, [sp, #16]
 800d76c:	1c5e      	adds	r6, r3, #1
 800d76e:	2331      	movs	r3, #49	; 0x31
 800d770:	7013      	strb	r3, [r2, #0]
 800d772:	f10b 0b01 	add.w	fp, fp, #1
 800d776:	e1ff      	b.n	800db78 <_dtoa_r+0x838>
 800d778:	2202      	movs	r2, #2
 800d77a:	e731      	b.n	800d5e0 <_dtoa_r+0x2a0>
 800d77c:	d02e      	beq.n	800d7dc <_dtoa_r+0x49c>
 800d77e:	f1cb 0300 	rsb	r3, fp, #0
 800d782:	4aae      	ldr	r2, [pc, #696]	; (800da3c <_dtoa_r+0x6fc>)
 800d784:	f003 010f 	and.w	r1, r3, #15
 800d788:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d78c:	ed92 7b00 	vldr	d7, [r2]
 800d790:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800d794:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d798:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d79c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800d7a0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d7a4:	49a6      	ldr	r1, [pc, #664]	; (800da40 <_dtoa_r+0x700>)
 800d7a6:	111b      	asrs	r3, r3, #4
 800d7a8:	2000      	movs	r0, #0
 800d7aa:	2202      	movs	r2, #2
 800d7ac:	b93b      	cbnz	r3, 800d7be <_dtoa_r+0x47e>
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	f43f af6b 	beq.w	800d68a <_dtoa_r+0x34a>
 800d7b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d7b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7bc:	e765      	b.n	800d68a <_dtoa_r+0x34a>
 800d7be:	07dd      	lsls	r5, r3, #31
 800d7c0:	d509      	bpl.n	800d7d6 <_dtoa_r+0x496>
 800d7c2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d7c6:	ed91 7b00 	vldr	d7, [r1]
 800d7ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d7ce:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d7d2:	3201      	adds	r2, #1
 800d7d4:	2001      	movs	r0, #1
 800d7d6:	105b      	asrs	r3, r3, #1
 800d7d8:	3108      	adds	r1, #8
 800d7da:	e7e7      	b.n	800d7ac <_dtoa_r+0x46c>
 800d7dc:	2202      	movs	r2, #2
 800d7de:	e754      	b.n	800d68a <_dtoa_r+0x34a>
 800d7e0:	465b      	mov	r3, fp
 800d7e2:	464d      	mov	r5, r9
 800d7e4:	e770      	b.n	800d6c8 <_dtoa_r+0x388>
 800d7e6:	4a95      	ldr	r2, [pc, #596]	; (800da3c <_dtoa_r+0x6fc>)
 800d7e8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800d7ec:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d7f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7f2:	ec41 0b17 	vmov	d7, r0, r1
 800d7f6:	b35a      	cbz	r2, 800d850 <_dtoa_r+0x510>
 800d7f8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d7fc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d800:	9e04      	ldr	r6, [sp, #16]
 800d802:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d806:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d80a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d80e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d812:	ee14 2a90 	vmov	r2, s9
 800d816:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d81a:	3230      	adds	r2, #48	; 0x30
 800d81c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d820:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d828:	f806 2b01 	strb.w	r2, [r6], #1
 800d82c:	d43b      	bmi.n	800d8a6 <_dtoa_r+0x566>
 800d82e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d832:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d83a:	d472      	bmi.n	800d922 <_dtoa_r+0x5e2>
 800d83c:	9a04      	ldr	r2, [sp, #16]
 800d83e:	1ab2      	subs	r2, r6, r2
 800d840:	4295      	cmp	r5, r2
 800d842:	f77f af68 	ble.w	800d716 <_dtoa_r+0x3d6>
 800d846:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d84a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d84e:	e7de      	b.n	800d80e <_dtoa_r+0x4ce>
 800d850:	9a04      	ldr	r2, [sp, #16]
 800d852:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d856:	1956      	adds	r6, r2, r5
 800d858:	4611      	mov	r1, r2
 800d85a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d85e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d862:	ee14 2a90 	vmov	r2, s9
 800d866:	3230      	adds	r2, #48	; 0x30
 800d868:	f801 2b01 	strb.w	r2, [r1], #1
 800d86c:	42b1      	cmp	r1, r6
 800d86e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d872:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d876:	d11a      	bne.n	800d8ae <_dtoa_r+0x56e>
 800d878:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d87c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d880:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d888:	dc4b      	bgt.n	800d922 <_dtoa_r+0x5e2>
 800d88a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d88e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d896:	f57f af3e 	bpl.w	800d716 <_dtoa_r+0x3d6>
 800d89a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d89e:	2a30      	cmp	r2, #48	; 0x30
 800d8a0:	f106 31ff 	add.w	r1, r6, #4294967295
 800d8a4:	d001      	beq.n	800d8aa <_dtoa_r+0x56a>
 800d8a6:	469b      	mov	fp, r3
 800d8a8:	e02a      	b.n	800d900 <_dtoa_r+0x5c0>
 800d8aa:	460e      	mov	r6, r1
 800d8ac:	e7f5      	b.n	800d89a <_dtoa_r+0x55a>
 800d8ae:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d8b2:	e7d4      	b.n	800d85e <_dtoa_r+0x51e>
 800d8b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8b8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d8bc:	9e04      	ldr	r6, [sp, #16]
 800d8be:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d8c2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d8c6:	ee15 3a10 	vmov	r3, s10
 800d8ca:	3330      	adds	r3, #48	; 0x30
 800d8cc:	f806 3b01 	strb.w	r3, [r6], #1
 800d8d0:	9b04      	ldr	r3, [sp, #16]
 800d8d2:	1af3      	subs	r3, r6, r3
 800d8d4:	4599      	cmp	r9, r3
 800d8d6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d8da:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d8de:	d133      	bne.n	800d948 <_dtoa_r+0x608>
 800d8e0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d8e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ec:	dc18      	bgt.n	800d920 <_dtoa_r+0x5e0>
 800d8ee:	eeb4 7b46 	vcmp.f64	d7, d6
 800d8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8f6:	d103      	bne.n	800d900 <_dtoa_r+0x5c0>
 800d8f8:	ee15 3a10 	vmov	r3, s10
 800d8fc:	07db      	lsls	r3, r3, #31
 800d8fe:	d40f      	bmi.n	800d920 <_dtoa_r+0x5e0>
 800d900:	9901      	ldr	r1, [sp, #4]
 800d902:	4620      	mov	r0, r4
 800d904:	f000 faac 	bl	800de60 <_Bfree>
 800d908:	2300      	movs	r3, #0
 800d90a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d90c:	7033      	strb	r3, [r6, #0]
 800d90e:	f10b 0301 	add.w	r3, fp, #1
 800d912:	6013      	str	r3, [r2, #0]
 800d914:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d916:	2b00      	cmp	r3, #0
 800d918:	f43f ad5b 	beq.w	800d3d2 <_dtoa_r+0x92>
 800d91c:	601e      	str	r6, [r3, #0]
 800d91e:	e558      	b.n	800d3d2 <_dtoa_r+0x92>
 800d920:	465b      	mov	r3, fp
 800d922:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d926:	2939      	cmp	r1, #57	; 0x39
 800d928:	f106 32ff 	add.w	r2, r6, #4294967295
 800d92c:	d106      	bne.n	800d93c <_dtoa_r+0x5fc>
 800d92e:	9904      	ldr	r1, [sp, #16]
 800d930:	4291      	cmp	r1, r2
 800d932:	d107      	bne.n	800d944 <_dtoa_r+0x604>
 800d934:	2230      	movs	r2, #48	; 0x30
 800d936:	700a      	strb	r2, [r1, #0]
 800d938:	3301      	adds	r3, #1
 800d93a:	460a      	mov	r2, r1
 800d93c:	7811      	ldrb	r1, [r2, #0]
 800d93e:	3101      	adds	r1, #1
 800d940:	7011      	strb	r1, [r2, #0]
 800d942:	e7b0      	b.n	800d8a6 <_dtoa_r+0x566>
 800d944:	4616      	mov	r6, r2
 800d946:	e7ec      	b.n	800d922 <_dtoa_r+0x5e2>
 800d948:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d94c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d954:	d1b3      	bne.n	800d8be <_dtoa_r+0x57e>
 800d956:	e7d3      	b.n	800d900 <_dtoa_r+0x5c0>
 800d958:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d95a:	2a00      	cmp	r2, #0
 800d95c:	f000 808d 	beq.w	800da7a <_dtoa_r+0x73a>
 800d960:	9a08      	ldr	r2, [sp, #32]
 800d962:	2a01      	cmp	r2, #1
 800d964:	dc72      	bgt.n	800da4c <_dtoa_r+0x70c>
 800d966:	2f00      	cmp	r7, #0
 800d968:	d06c      	beq.n	800da44 <_dtoa_r+0x704>
 800d96a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d96e:	4645      	mov	r5, r8
 800d970:	4656      	mov	r6, sl
 800d972:	9a07      	ldr	r2, [sp, #28]
 800d974:	2101      	movs	r1, #1
 800d976:	441a      	add	r2, r3
 800d978:	4620      	mov	r0, r4
 800d97a:	449a      	add	sl, r3
 800d97c:	9207      	str	r2, [sp, #28]
 800d97e:	f000 fb0f 	bl	800dfa0 <__i2b>
 800d982:	4607      	mov	r7, r0
 800d984:	2e00      	cmp	r6, #0
 800d986:	dd0b      	ble.n	800d9a0 <_dtoa_r+0x660>
 800d988:	9b07      	ldr	r3, [sp, #28]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	dd08      	ble.n	800d9a0 <_dtoa_r+0x660>
 800d98e:	42b3      	cmp	r3, r6
 800d990:	9a07      	ldr	r2, [sp, #28]
 800d992:	bfa8      	it	ge
 800d994:	4633      	movge	r3, r6
 800d996:	ebaa 0a03 	sub.w	sl, sl, r3
 800d99a:	1af6      	subs	r6, r6, r3
 800d99c:	1ad3      	subs	r3, r2, r3
 800d99e:	9307      	str	r3, [sp, #28]
 800d9a0:	f1b8 0f00 	cmp.w	r8, #0
 800d9a4:	d01d      	beq.n	800d9e2 <_dtoa_r+0x6a2>
 800d9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d06a      	beq.n	800da82 <_dtoa_r+0x742>
 800d9ac:	b18d      	cbz	r5, 800d9d2 <_dtoa_r+0x692>
 800d9ae:	4639      	mov	r1, r7
 800d9b0:	462a      	mov	r2, r5
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	f000 fb94 	bl	800e0e0 <__pow5mult>
 800d9b8:	9a01      	ldr	r2, [sp, #4]
 800d9ba:	4601      	mov	r1, r0
 800d9bc:	4607      	mov	r7, r0
 800d9be:	4620      	mov	r0, r4
 800d9c0:	f000 faf7 	bl	800dfb2 <__multiply>
 800d9c4:	9901      	ldr	r1, [sp, #4]
 800d9c6:	900c      	str	r0, [sp, #48]	; 0x30
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	f000 fa49 	bl	800de60 <_Bfree>
 800d9ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9d0:	9301      	str	r3, [sp, #4]
 800d9d2:	ebb8 0205 	subs.w	r2, r8, r5
 800d9d6:	d004      	beq.n	800d9e2 <_dtoa_r+0x6a2>
 800d9d8:	9901      	ldr	r1, [sp, #4]
 800d9da:	4620      	mov	r0, r4
 800d9dc:	f000 fb80 	bl	800e0e0 <__pow5mult>
 800d9e0:	9001      	str	r0, [sp, #4]
 800d9e2:	2101      	movs	r1, #1
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f000 fadb 	bl	800dfa0 <__i2b>
 800d9ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9ec:	4605      	mov	r5, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	f000 81ca 	beq.w	800dd88 <_dtoa_r+0xa48>
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	4601      	mov	r1, r0
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	f000 fb71 	bl	800e0e0 <__pow5mult>
 800d9fe:	9b08      	ldr	r3, [sp, #32]
 800da00:	2b01      	cmp	r3, #1
 800da02:	4605      	mov	r5, r0
 800da04:	dc44      	bgt.n	800da90 <_dtoa_r+0x750>
 800da06:	9b02      	ldr	r3, [sp, #8]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d13c      	bne.n	800da86 <_dtoa_r+0x746>
 800da0c:	9b03      	ldr	r3, [sp, #12]
 800da0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da12:	2b00      	cmp	r3, #0
 800da14:	d137      	bne.n	800da86 <_dtoa_r+0x746>
 800da16:	9b03      	ldr	r3, [sp, #12]
 800da18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da1c:	0d1b      	lsrs	r3, r3, #20
 800da1e:	051b      	lsls	r3, r3, #20
 800da20:	2b00      	cmp	r3, #0
 800da22:	d033      	beq.n	800da8c <_dtoa_r+0x74c>
 800da24:	9b07      	ldr	r3, [sp, #28]
 800da26:	3301      	adds	r3, #1
 800da28:	f10a 0a01 	add.w	sl, sl, #1
 800da2c:	9307      	str	r3, [sp, #28]
 800da2e:	f04f 0801 	mov.w	r8, #1
 800da32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da34:	bb73      	cbnz	r3, 800da94 <_dtoa_r+0x754>
 800da36:	2001      	movs	r0, #1
 800da38:	e034      	b.n	800daa4 <_dtoa_r+0x764>
 800da3a:	bf00      	nop
 800da3c:	0800ec50 	.word	0x0800ec50
 800da40:	0800ec28 	.word	0x0800ec28
 800da44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800da46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800da4a:	e790      	b.n	800d96e <_dtoa_r+0x62e>
 800da4c:	f109 35ff 	add.w	r5, r9, #4294967295
 800da50:	45a8      	cmp	r8, r5
 800da52:	bfbf      	itttt	lt
 800da54:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800da56:	eba5 0808 	sublt.w	r8, r5, r8
 800da5a:	4443      	addlt	r3, r8
 800da5c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800da5e:	bfb6      	itet	lt
 800da60:	46a8      	movlt	r8, r5
 800da62:	eba8 0505 	subge.w	r5, r8, r5
 800da66:	2500      	movlt	r5, #0
 800da68:	f1b9 0f00 	cmp.w	r9, #0
 800da6c:	bfb9      	ittee	lt
 800da6e:	ebaa 0609 	sublt.w	r6, sl, r9
 800da72:	2300      	movlt	r3, #0
 800da74:	4656      	movge	r6, sl
 800da76:	464b      	movge	r3, r9
 800da78:	e77b      	b.n	800d972 <_dtoa_r+0x632>
 800da7a:	4645      	mov	r5, r8
 800da7c:	4656      	mov	r6, sl
 800da7e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800da80:	e780      	b.n	800d984 <_dtoa_r+0x644>
 800da82:	4642      	mov	r2, r8
 800da84:	e7a8      	b.n	800d9d8 <_dtoa_r+0x698>
 800da86:	f04f 0800 	mov.w	r8, #0
 800da8a:	e7d2      	b.n	800da32 <_dtoa_r+0x6f2>
 800da8c:	4698      	mov	r8, r3
 800da8e:	e7d0      	b.n	800da32 <_dtoa_r+0x6f2>
 800da90:	f04f 0800 	mov.w	r8, #0
 800da94:	692b      	ldr	r3, [r5, #16]
 800da96:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800da9a:	6918      	ldr	r0, [r3, #16]
 800da9c:	f000 fa32 	bl	800df04 <__hi0bits>
 800daa0:	f1c0 0020 	rsb	r0, r0, #32
 800daa4:	9b07      	ldr	r3, [sp, #28]
 800daa6:	4418      	add	r0, r3
 800daa8:	f010 001f 	ands.w	r0, r0, #31
 800daac:	d047      	beq.n	800db3e <_dtoa_r+0x7fe>
 800daae:	f1c0 0320 	rsb	r3, r0, #32
 800dab2:	2b04      	cmp	r3, #4
 800dab4:	dd3b      	ble.n	800db2e <_dtoa_r+0x7ee>
 800dab6:	9b07      	ldr	r3, [sp, #28]
 800dab8:	f1c0 001c 	rsb	r0, r0, #28
 800dabc:	4482      	add	sl, r0
 800dabe:	4406      	add	r6, r0
 800dac0:	4403      	add	r3, r0
 800dac2:	9307      	str	r3, [sp, #28]
 800dac4:	f1ba 0f00 	cmp.w	sl, #0
 800dac8:	dd05      	ble.n	800dad6 <_dtoa_r+0x796>
 800daca:	4652      	mov	r2, sl
 800dacc:	9901      	ldr	r1, [sp, #4]
 800dace:	4620      	mov	r0, r4
 800dad0:	f000 fb54 	bl	800e17c <__lshift>
 800dad4:	9001      	str	r0, [sp, #4]
 800dad6:	9b07      	ldr	r3, [sp, #28]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	dd05      	ble.n	800dae8 <_dtoa_r+0x7a8>
 800dadc:	4629      	mov	r1, r5
 800dade:	461a      	mov	r2, r3
 800dae0:	4620      	mov	r0, r4
 800dae2:	f000 fb4b 	bl	800e17c <__lshift>
 800dae6:	4605      	mov	r5, r0
 800dae8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800daea:	b353      	cbz	r3, 800db42 <_dtoa_r+0x802>
 800daec:	4629      	mov	r1, r5
 800daee:	9801      	ldr	r0, [sp, #4]
 800daf0:	f000 fb98 	bl	800e224 <__mcmp>
 800daf4:	2800      	cmp	r0, #0
 800daf6:	da24      	bge.n	800db42 <_dtoa_r+0x802>
 800daf8:	2300      	movs	r3, #0
 800dafa:	220a      	movs	r2, #10
 800dafc:	9901      	ldr	r1, [sp, #4]
 800dafe:	4620      	mov	r0, r4
 800db00:	f000 f9c5 	bl	800de8e <__multadd>
 800db04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db06:	9001      	str	r0, [sp, #4]
 800db08:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	f000 8142 	beq.w	800dd96 <_dtoa_r+0xa56>
 800db12:	2300      	movs	r3, #0
 800db14:	4639      	mov	r1, r7
 800db16:	220a      	movs	r2, #10
 800db18:	4620      	mov	r0, r4
 800db1a:	f000 f9b8 	bl	800de8e <__multadd>
 800db1e:	9b06      	ldr	r3, [sp, #24]
 800db20:	2b00      	cmp	r3, #0
 800db22:	4607      	mov	r7, r0
 800db24:	dc4b      	bgt.n	800dbbe <_dtoa_r+0x87e>
 800db26:	9b08      	ldr	r3, [sp, #32]
 800db28:	2b02      	cmp	r3, #2
 800db2a:	dd48      	ble.n	800dbbe <_dtoa_r+0x87e>
 800db2c:	e011      	b.n	800db52 <_dtoa_r+0x812>
 800db2e:	d0c9      	beq.n	800dac4 <_dtoa_r+0x784>
 800db30:	9a07      	ldr	r2, [sp, #28]
 800db32:	331c      	adds	r3, #28
 800db34:	441a      	add	r2, r3
 800db36:	449a      	add	sl, r3
 800db38:	441e      	add	r6, r3
 800db3a:	4613      	mov	r3, r2
 800db3c:	e7c1      	b.n	800dac2 <_dtoa_r+0x782>
 800db3e:	4603      	mov	r3, r0
 800db40:	e7f6      	b.n	800db30 <_dtoa_r+0x7f0>
 800db42:	f1b9 0f00 	cmp.w	r9, #0
 800db46:	dc34      	bgt.n	800dbb2 <_dtoa_r+0x872>
 800db48:	9b08      	ldr	r3, [sp, #32]
 800db4a:	2b02      	cmp	r3, #2
 800db4c:	dd31      	ble.n	800dbb2 <_dtoa_r+0x872>
 800db4e:	f8cd 9018 	str.w	r9, [sp, #24]
 800db52:	9b06      	ldr	r3, [sp, #24]
 800db54:	b963      	cbnz	r3, 800db70 <_dtoa_r+0x830>
 800db56:	4629      	mov	r1, r5
 800db58:	2205      	movs	r2, #5
 800db5a:	4620      	mov	r0, r4
 800db5c:	f000 f997 	bl	800de8e <__multadd>
 800db60:	4601      	mov	r1, r0
 800db62:	4605      	mov	r5, r0
 800db64:	9801      	ldr	r0, [sp, #4]
 800db66:	f000 fb5d 	bl	800e224 <__mcmp>
 800db6a:	2800      	cmp	r0, #0
 800db6c:	f73f adfc 	bgt.w	800d768 <_dtoa_r+0x428>
 800db70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db72:	9e04      	ldr	r6, [sp, #16]
 800db74:	ea6f 0b03 	mvn.w	fp, r3
 800db78:	f04f 0900 	mov.w	r9, #0
 800db7c:	4629      	mov	r1, r5
 800db7e:	4620      	mov	r0, r4
 800db80:	f000 f96e 	bl	800de60 <_Bfree>
 800db84:	2f00      	cmp	r7, #0
 800db86:	f43f aebb 	beq.w	800d900 <_dtoa_r+0x5c0>
 800db8a:	f1b9 0f00 	cmp.w	r9, #0
 800db8e:	d005      	beq.n	800db9c <_dtoa_r+0x85c>
 800db90:	45b9      	cmp	r9, r7
 800db92:	d003      	beq.n	800db9c <_dtoa_r+0x85c>
 800db94:	4649      	mov	r1, r9
 800db96:	4620      	mov	r0, r4
 800db98:	f000 f962 	bl	800de60 <_Bfree>
 800db9c:	4639      	mov	r1, r7
 800db9e:	4620      	mov	r0, r4
 800dba0:	f000 f95e 	bl	800de60 <_Bfree>
 800dba4:	e6ac      	b.n	800d900 <_dtoa_r+0x5c0>
 800dba6:	2500      	movs	r5, #0
 800dba8:	462f      	mov	r7, r5
 800dbaa:	e7e1      	b.n	800db70 <_dtoa_r+0x830>
 800dbac:	469b      	mov	fp, r3
 800dbae:	462f      	mov	r7, r5
 800dbb0:	e5da      	b.n	800d768 <_dtoa_r+0x428>
 800dbb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbb4:	f8cd 9018 	str.w	r9, [sp, #24]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	f000 80f3 	beq.w	800dda4 <_dtoa_r+0xa64>
 800dbbe:	2e00      	cmp	r6, #0
 800dbc0:	dd05      	ble.n	800dbce <_dtoa_r+0x88e>
 800dbc2:	4639      	mov	r1, r7
 800dbc4:	4632      	mov	r2, r6
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f000 fad8 	bl	800e17c <__lshift>
 800dbcc:	4607      	mov	r7, r0
 800dbce:	f1b8 0f00 	cmp.w	r8, #0
 800dbd2:	d04c      	beq.n	800dc6e <_dtoa_r+0x92e>
 800dbd4:	6879      	ldr	r1, [r7, #4]
 800dbd6:	4620      	mov	r0, r4
 800dbd8:	f000 f90e 	bl	800ddf8 <_Balloc>
 800dbdc:	693a      	ldr	r2, [r7, #16]
 800dbde:	3202      	adds	r2, #2
 800dbe0:	4606      	mov	r6, r0
 800dbe2:	0092      	lsls	r2, r2, #2
 800dbe4:	f107 010c 	add.w	r1, r7, #12
 800dbe8:	300c      	adds	r0, #12
 800dbea:	f7fe feb7 	bl	800c95c <memcpy>
 800dbee:	2201      	movs	r2, #1
 800dbf0:	4631      	mov	r1, r6
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f000 fac2 	bl	800e17c <__lshift>
 800dbf8:	9b02      	ldr	r3, [sp, #8]
 800dbfa:	f8dd a010 	ldr.w	sl, [sp, #16]
 800dbfe:	f003 0301 	and.w	r3, r3, #1
 800dc02:	46b9      	mov	r9, r7
 800dc04:	9307      	str	r3, [sp, #28]
 800dc06:	4607      	mov	r7, r0
 800dc08:	4629      	mov	r1, r5
 800dc0a:	9801      	ldr	r0, [sp, #4]
 800dc0c:	f7ff fb0a 	bl	800d224 <quorem>
 800dc10:	4649      	mov	r1, r9
 800dc12:	4606      	mov	r6, r0
 800dc14:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dc18:	9801      	ldr	r0, [sp, #4]
 800dc1a:	f000 fb03 	bl	800e224 <__mcmp>
 800dc1e:	463a      	mov	r2, r7
 800dc20:	9002      	str	r0, [sp, #8]
 800dc22:	4629      	mov	r1, r5
 800dc24:	4620      	mov	r0, r4
 800dc26:	f000 fb17 	bl	800e258 <__mdiff>
 800dc2a:	68c3      	ldr	r3, [r0, #12]
 800dc2c:	4602      	mov	r2, r0
 800dc2e:	bb03      	cbnz	r3, 800dc72 <_dtoa_r+0x932>
 800dc30:	4601      	mov	r1, r0
 800dc32:	9009      	str	r0, [sp, #36]	; 0x24
 800dc34:	9801      	ldr	r0, [sp, #4]
 800dc36:	f000 faf5 	bl	800e224 <__mcmp>
 800dc3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	4611      	mov	r1, r2
 800dc40:	4620      	mov	r0, r4
 800dc42:	9309      	str	r3, [sp, #36]	; 0x24
 800dc44:	f000 f90c 	bl	800de60 <_Bfree>
 800dc48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc4a:	b9a3      	cbnz	r3, 800dc76 <_dtoa_r+0x936>
 800dc4c:	9a08      	ldr	r2, [sp, #32]
 800dc4e:	b992      	cbnz	r2, 800dc76 <_dtoa_r+0x936>
 800dc50:	9a07      	ldr	r2, [sp, #28]
 800dc52:	b982      	cbnz	r2, 800dc76 <_dtoa_r+0x936>
 800dc54:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dc58:	d029      	beq.n	800dcae <_dtoa_r+0x96e>
 800dc5a:	9b02      	ldr	r3, [sp, #8]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	dd01      	ble.n	800dc64 <_dtoa_r+0x924>
 800dc60:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800dc64:	f10a 0601 	add.w	r6, sl, #1
 800dc68:	f88a 8000 	strb.w	r8, [sl]
 800dc6c:	e786      	b.n	800db7c <_dtoa_r+0x83c>
 800dc6e:	4638      	mov	r0, r7
 800dc70:	e7c2      	b.n	800dbf8 <_dtoa_r+0x8b8>
 800dc72:	2301      	movs	r3, #1
 800dc74:	e7e3      	b.n	800dc3e <_dtoa_r+0x8fe>
 800dc76:	9a02      	ldr	r2, [sp, #8]
 800dc78:	2a00      	cmp	r2, #0
 800dc7a:	db04      	blt.n	800dc86 <_dtoa_r+0x946>
 800dc7c:	d124      	bne.n	800dcc8 <_dtoa_r+0x988>
 800dc7e:	9a08      	ldr	r2, [sp, #32]
 800dc80:	bb12      	cbnz	r2, 800dcc8 <_dtoa_r+0x988>
 800dc82:	9a07      	ldr	r2, [sp, #28]
 800dc84:	bb02      	cbnz	r2, 800dcc8 <_dtoa_r+0x988>
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	ddec      	ble.n	800dc64 <_dtoa_r+0x924>
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	9901      	ldr	r1, [sp, #4]
 800dc8e:	4620      	mov	r0, r4
 800dc90:	f000 fa74 	bl	800e17c <__lshift>
 800dc94:	4629      	mov	r1, r5
 800dc96:	9001      	str	r0, [sp, #4]
 800dc98:	f000 fac4 	bl	800e224 <__mcmp>
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	dc03      	bgt.n	800dca8 <_dtoa_r+0x968>
 800dca0:	d1e0      	bne.n	800dc64 <_dtoa_r+0x924>
 800dca2:	f018 0f01 	tst.w	r8, #1
 800dca6:	d0dd      	beq.n	800dc64 <_dtoa_r+0x924>
 800dca8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dcac:	d1d8      	bne.n	800dc60 <_dtoa_r+0x920>
 800dcae:	2339      	movs	r3, #57	; 0x39
 800dcb0:	f10a 0601 	add.w	r6, sl, #1
 800dcb4:	f88a 3000 	strb.w	r3, [sl]
 800dcb8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dcbc:	2b39      	cmp	r3, #57	; 0x39
 800dcbe:	f106 32ff 	add.w	r2, r6, #4294967295
 800dcc2:	d04c      	beq.n	800dd5e <_dtoa_r+0xa1e>
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	e051      	b.n	800dd6c <_dtoa_r+0xa2c>
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	f10a 0601 	add.w	r6, sl, #1
 800dcce:	dd05      	ble.n	800dcdc <_dtoa_r+0x99c>
 800dcd0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dcd4:	d0eb      	beq.n	800dcae <_dtoa_r+0x96e>
 800dcd6:	f108 0801 	add.w	r8, r8, #1
 800dcda:	e7c5      	b.n	800dc68 <_dtoa_r+0x928>
 800dcdc:	9b04      	ldr	r3, [sp, #16]
 800dcde:	9a06      	ldr	r2, [sp, #24]
 800dce0:	f806 8c01 	strb.w	r8, [r6, #-1]
 800dce4:	1af3      	subs	r3, r6, r3
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d021      	beq.n	800dd2e <_dtoa_r+0x9ee>
 800dcea:	2300      	movs	r3, #0
 800dcec:	220a      	movs	r2, #10
 800dcee:	9901      	ldr	r1, [sp, #4]
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	f000 f8cc 	bl	800de8e <__multadd>
 800dcf6:	45b9      	cmp	r9, r7
 800dcf8:	9001      	str	r0, [sp, #4]
 800dcfa:	f04f 0300 	mov.w	r3, #0
 800dcfe:	f04f 020a 	mov.w	r2, #10
 800dd02:	4649      	mov	r1, r9
 800dd04:	4620      	mov	r0, r4
 800dd06:	d105      	bne.n	800dd14 <_dtoa_r+0x9d4>
 800dd08:	f000 f8c1 	bl	800de8e <__multadd>
 800dd0c:	4681      	mov	r9, r0
 800dd0e:	4607      	mov	r7, r0
 800dd10:	46b2      	mov	sl, r6
 800dd12:	e779      	b.n	800dc08 <_dtoa_r+0x8c8>
 800dd14:	f000 f8bb 	bl	800de8e <__multadd>
 800dd18:	4639      	mov	r1, r7
 800dd1a:	4681      	mov	r9, r0
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	220a      	movs	r2, #10
 800dd20:	4620      	mov	r0, r4
 800dd22:	f000 f8b4 	bl	800de8e <__multadd>
 800dd26:	4607      	mov	r7, r0
 800dd28:	e7f2      	b.n	800dd10 <_dtoa_r+0x9d0>
 800dd2a:	f04f 0900 	mov.w	r9, #0
 800dd2e:	2201      	movs	r2, #1
 800dd30:	9901      	ldr	r1, [sp, #4]
 800dd32:	4620      	mov	r0, r4
 800dd34:	f000 fa22 	bl	800e17c <__lshift>
 800dd38:	4629      	mov	r1, r5
 800dd3a:	9001      	str	r0, [sp, #4]
 800dd3c:	f000 fa72 	bl	800e224 <__mcmp>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	dcb9      	bgt.n	800dcb8 <_dtoa_r+0x978>
 800dd44:	d102      	bne.n	800dd4c <_dtoa_r+0xa0c>
 800dd46:	f018 0f01 	tst.w	r8, #1
 800dd4a:	d1b5      	bne.n	800dcb8 <_dtoa_r+0x978>
 800dd4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dd50:	2b30      	cmp	r3, #48	; 0x30
 800dd52:	f106 32ff 	add.w	r2, r6, #4294967295
 800dd56:	f47f af11 	bne.w	800db7c <_dtoa_r+0x83c>
 800dd5a:	4616      	mov	r6, r2
 800dd5c:	e7f6      	b.n	800dd4c <_dtoa_r+0xa0c>
 800dd5e:	9b04      	ldr	r3, [sp, #16]
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d105      	bne.n	800dd70 <_dtoa_r+0xa30>
 800dd64:	9a04      	ldr	r2, [sp, #16]
 800dd66:	f10b 0b01 	add.w	fp, fp, #1
 800dd6a:	2331      	movs	r3, #49	; 0x31
 800dd6c:	7013      	strb	r3, [r2, #0]
 800dd6e:	e705      	b.n	800db7c <_dtoa_r+0x83c>
 800dd70:	4616      	mov	r6, r2
 800dd72:	e7a1      	b.n	800dcb8 <_dtoa_r+0x978>
 800dd74:	4b16      	ldr	r3, [pc, #88]	; (800ddd0 <_dtoa_r+0xa90>)
 800dd76:	f7ff bb48 	b.w	800d40a <_dtoa_r+0xca>
 800dd7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	f47f ab23 	bne.w	800d3c8 <_dtoa_r+0x88>
 800dd82:	4b14      	ldr	r3, [pc, #80]	; (800ddd4 <_dtoa_r+0xa94>)
 800dd84:	f7ff bb41 	b.w	800d40a <_dtoa_r+0xca>
 800dd88:	9b08      	ldr	r3, [sp, #32]
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	f77f ae3b 	ble.w	800da06 <_dtoa_r+0x6c6>
 800dd90:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800dd94:	e64f      	b.n	800da36 <_dtoa_r+0x6f6>
 800dd96:	9b06      	ldr	r3, [sp, #24]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	dc03      	bgt.n	800dda4 <_dtoa_r+0xa64>
 800dd9c:	9b08      	ldr	r3, [sp, #32]
 800dd9e:	2b02      	cmp	r3, #2
 800dda0:	f73f aed7 	bgt.w	800db52 <_dtoa_r+0x812>
 800dda4:	9e04      	ldr	r6, [sp, #16]
 800dda6:	9801      	ldr	r0, [sp, #4]
 800dda8:	4629      	mov	r1, r5
 800ddaa:	f7ff fa3b 	bl	800d224 <quorem>
 800ddae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ddb2:	f806 8b01 	strb.w	r8, [r6], #1
 800ddb6:	9b04      	ldr	r3, [sp, #16]
 800ddb8:	9a06      	ldr	r2, [sp, #24]
 800ddba:	1af3      	subs	r3, r6, r3
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	ddb4      	ble.n	800dd2a <_dtoa_r+0x9ea>
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	220a      	movs	r2, #10
 800ddc4:	9901      	ldr	r1, [sp, #4]
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	f000 f861 	bl	800de8e <__multadd>
 800ddcc:	9001      	str	r0, [sp, #4]
 800ddce:	e7ea      	b.n	800dda6 <_dtoa_r+0xa66>
 800ddd0:	0800ebf4 	.word	0x0800ebf4
 800ddd4:	0800ec1b 	.word	0x0800ec1b

0800ddd8 <_localeconv_r>:
 800ddd8:	4b04      	ldr	r3, [pc, #16]	; (800ddec <_localeconv_r+0x14>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	6a18      	ldr	r0, [r3, #32]
 800ddde:	4b04      	ldr	r3, [pc, #16]	; (800ddf0 <_localeconv_r+0x18>)
 800dde0:	2800      	cmp	r0, #0
 800dde2:	bf08      	it	eq
 800dde4:	4618      	moveq	r0, r3
 800dde6:	30f0      	adds	r0, #240	; 0xf0
 800dde8:	4770      	bx	lr
 800ddea:	bf00      	nop
 800ddec:	2400004c 	.word	0x2400004c
 800ddf0:	240000b0 	.word	0x240000b0

0800ddf4 <__malloc_lock>:
 800ddf4:	4770      	bx	lr

0800ddf6 <__malloc_unlock>:
 800ddf6:	4770      	bx	lr

0800ddf8 <_Balloc>:
 800ddf8:	b570      	push	{r4, r5, r6, lr}
 800ddfa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ddfc:	4604      	mov	r4, r0
 800ddfe:	460e      	mov	r6, r1
 800de00:	b93d      	cbnz	r5, 800de12 <_Balloc+0x1a>
 800de02:	2010      	movs	r0, #16
 800de04:	f7fe fd9a 	bl	800c93c <malloc>
 800de08:	6260      	str	r0, [r4, #36]	; 0x24
 800de0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de0e:	6005      	str	r5, [r0, #0]
 800de10:	60c5      	str	r5, [r0, #12]
 800de12:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800de14:	68eb      	ldr	r3, [r5, #12]
 800de16:	b183      	cbz	r3, 800de3a <_Balloc+0x42>
 800de18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800de20:	b9b8      	cbnz	r0, 800de52 <_Balloc+0x5a>
 800de22:	2101      	movs	r1, #1
 800de24:	fa01 f506 	lsl.w	r5, r1, r6
 800de28:	1d6a      	adds	r2, r5, #5
 800de2a:	0092      	lsls	r2, r2, #2
 800de2c:	4620      	mov	r0, r4
 800de2e:	f000 fabf 	bl	800e3b0 <_calloc_r>
 800de32:	b160      	cbz	r0, 800de4e <_Balloc+0x56>
 800de34:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800de38:	e00e      	b.n	800de58 <_Balloc+0x60>
 800de3a:	2221      	movs	r2, #33	; 0x21
 800de3c:	2104      	movs	r1, #4
 800de3e:	4620      	mov	r0, r4
 800de40:	f000 fab6 	bl	800e3b0 <_calloc_r>
 800de44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de46:	60e8      	str	r0, [r5, #12]
 800de48:	68db      	ldr	r3, [r3, #12]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d1e4      	bne.n	800de18 <_Balloc+0x20>
 800de4e:	2000      	movs	r0, #0
 800de50:	bd70      	pop	{r4, r5, r6, pc}
 800de52:	6802      	ldr	r2, [r0, #0]
 800de54:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800de58:	2300      	movs	r3, #0
 800de5a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de5e:	e7f7      	b.n	800de50 <_Balloc+0x58>

0800de60 <_Bfree>:
 800de60:	b570      	push	{r4, r5, r6, lr}
 800de62:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800de64:	4606      	mov	r6, r0
 800de66:	460d      	mov	r5, r1
 800de68:	b93c      	cbnz	r4, 800de7a <_Bfree+0x1a>
 800de6a:	2010      	movs	r0, #16
 800de6c:	f7fe fd66 	bl	800c93c <malloc>
 800de70:	6270      	str	r0, [r6, #36]	; 0x24
 800de72:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de76:	6004      	str	r4, [r0, #0]
 800de78:	60c4      	str	r4, [r0, #12]
 800de7a:	b13d      	cbz	r5, 800de8c <_Bfree+0x2c>
 800de7c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800de7e:	686a      	ldr	r2, [r5, #4]
 800de80:	68db      	ldr	r3, [r3, #12]
 800de82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de86:	6029      	str	r1, [r5, #0]
 800de88:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800de8c:	bd70      	pop	{r4, r5, r6, pc}

0800de8e <__multadd>:
 800de8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de92:	690d      	ldr	r5, [r1, #16]
 800de94:	461f      	mov	r7, r3
 800de96:	4606      	mov	r6, r0
 800de98:	460c      	mov	r4, r1
 800de9a:	f101 0c14 	add.w	ip, r1, #20
 800de9e:	2300      	movs	r3, #0
 800dea0:	f8dc 0000 	ldr.w	r0, [ip]
 800dea4:	b281      	uxth	r1, r0
 800dea6:	fb02 7101 	mla	r1, r2, r1, r7
 800deaa:	0c0f      	lsrs	r7, r1, #16
 800deac:	0c00      	lsrs	r0, r0, #16
 800deae:	fb02 7000 	mla	r0, r2, r0, r7
 800deb2:	b289      	uxth	r1, r1
 800deb4:	3301      	adds	r3, #1
 800deb6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800deba:	429d      	cmp	r5, r3
 800debc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800dec0:	f84c 1b04 	str.w	r1, [ip], #4
 800dec4:	dcec      	bgt.n	800dea0 <__multadd+0x12>
 800dec6:	b1d7      	cbz	r7, 800defe <__multadd+0x70>
 800dec8:	68a3      	ldr	r3, [r4, #8]
 800deca:	42ab      	cmp	r3, r5
 800decc:	dc12      	bgt.n	800def4 <__multadd+0x66>
 800dece:	6861      	ldr	r1, [r4, #4]
 800ded0:	4630      	mov	r0, r6
 800ded2:	3101      	adds	r1, #1
 800ded4:	f7ff ff90 	bl	800ddf8 <_Balloc>
 800ded8:	6922      	ldr	r2, [r4, #16]
 800deda:	3202      	adds	r2, #2
 800dedc:	f104 010c 	add.w	r1, r4, #12
 800dee0:	4680      	mov	r8, r0
 800dee2:	0092      	lsls	r2, r2, #2
 800dee4:	300c      	adds	r0, #12
 800dee6:	f7fe fd39 	bl	800c95c <memcpy>
 800deea:	4621      	mov	r1, r4
 800deec:	4630      	mov	r0, r6
 800deee:	f7ff ffb7 	bl	800de60 <_Bfree>
 800def2:	4644      	mov	r4, r8
 800def4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800def8:	3501      	adds	r5, #1
 800defa:	615f      	str	r7, [r3, #20]
 800defc:	6125      	str	r5, [r4, #16]
 800defe:	4620      	mov	r0, r4
 800df00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800df04 <__hi0bits>:
 800df04:	0c02      	lsrs	r2, r0, #16
 800df06:	0412      	lsls	r2, r2, #16
 800df08:	4603      	mov	r3, r0
 800df0a:	b9b2      	cbnz	r2, 800df3a <__hi0bits+0x36>
 800df0c:	0403      	lsls	r3, r0, #16
 800df0e:	2010      	movs	r0, #16
 800df10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800df14:	bf04      	itt	eq
 800df16:	021b      	lsleq	r3, r3, #8
 800df18:	3008      	addeq	r0, #8
 800df1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800df1e:	bf04      	itt	eq
 800df20:	011b      	lsleq	r3, r3, #4
 800df22:	3004      	addeq	r0, #4
 800df24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800df28:	bf04      	itt	eq
 800df2a:	009b      	lsleq	r3, r3, #2
 800df2c:	3002      	addeq	r0, #2
 800df2e:	2b00      	cmp	r3, #0
 800df30:	db06      	blt.n	800df40 <__hi0bits+0x3c>
 800df32:	005b      	lsls	r3, r3, #1
 800df34:	d503      	bpl.n	800df3e <__hi0bits+0x3a>
 800df36:	3001      	adds	r0, #1
 800df38:	4770      	bx	lr
 800df3a:	2000      	movs	r0, #0
 800df3c:	e7e8      	b.n	800df10 <__hi0bits+0xc>
 800df3e:	2020      	movs	r0, #32
 800df40:	4770      	bx	lr

0800df42 <__lo0bits>:
 800df42:	6803      	ldr	r3, [r0, #0]
 800df44:	f013 0207 	ands.w	r2, r3, #7
 800df48:	4601      	mov	r1, r0
 800df4a:	d00b      	beq.n	800df64 <__lo0bits+0x22>
 800df4c:	07da      	lsls	r2, r3, #31
 800df4e:	d423      	bmi.n	800df98 <__lo0bits+0x56>
 800df50:	0798      	lsls	r0, r3, #30
 800df52:	bf49      	itett	mi
 800df54:	085b      	lsrmi	r3, r3, #1
 800df56:	089b      	lsrpl	r3, r3, #2
 800df58:	2001      	movmi	r0, #1
 800df5a:	600b      	strmi	r3, [r1, #0]
 800df5c:	bf5c      	itt	pl
 800df5e:	600b      	strpl	r3, [r1, #0]
 800df60:	2002      	movpl	r0, #2
 800df62:	4770      	bx	lr
 800df64:	b298      	uxth	r0, r3
 800df66:	b9a8      	cbnz	r0, 800df94 <__lo0bits+0x52>
 800df68:	0c1b      	lsrs	r3, r3, #16
 800df6a:	2010      	movs	r0, #16
 800df6c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800df70:	bf04      	itt	eq
 800df72:	0a1b      	lsreq	r3, r3, #8
 800df74:	3008      	addeq	r0, #8
 800df76:	071a      	lsls	r2, r3, #28
 800df78:	bf04      	itt	eq
 800df7a:	091b      	lsreq	r3, r3, #4
 800df7c:	3004      	addeq	r0, #4
 800df7e:	079a      	lsls	r2, r3, #30
 800df80:	bf04      	itt	eq
 800df82:	089b      	lsreq	r3, r3, #2
 800df84:	3002      	addeq	r0, #2
 800df86:	07da      	lsls	r2, r3, #31
 800df88:	d402      	bmi.n	800df90 <__lo0bits+0x4e>
 800df8a:	085b      	lsrs	r3, r3, #1
 800df8c:	d006      	beq.n	800df9c <__lo0bits+0x5a>
 800df8e:	3001      	adds	r0, #1
 800df90:	600b      	str	r3, [r1, #0]
 800df92:	4770      	bx	lr
 800df94:	4610      	mov	r0, r2
 800df96:	e7e9      	b.n	800df6c <__lo0bits+0x2a>
 800df98:	2000      	movs	r0, #0
 800df9a:	4770      	bx	lr
 800df9c:	2020      	movs	r0, #32
 800df9e:	4770      	bx	lr

0800dfa0 <__i2b>:
 800dfa0:	b510      	push	{r4, lr}
 800dfa2:	460c      	mov	r4, r1
 800dfa4:	2101      	movs	r1, #1
 800dfa6:	f7ff ff27 	bl	800ddf8 <_Balloc>
 800dfaa:	2201      	movs	r2, #1
 800dfac:	6144      	str	r4, [r0, #20]
 800dfae:	6102      	str	r2, [r0, #16]
 800dfb0:	bd10      	pop	{r4, pc}

0800dfb2 <__multiply>:
 800dfb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb6:	4614      	mov	r4, r2
 800dfb8:	690a      	ldr	r2, [r1, #16]
 800dfba:	6923      	ldr	r3, [r4, #16]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	bfb8      	it	lt
 800dfc0:	460b      	movlt	r3, r1
 800dfc2:	4688      	mov	r8, r1
 800dfc4:	bfbc      	itt	lt
 800dfc6:	46a0      	movlt	r8, r4
 800dfc8:	461c      	movlt	r4, r3
 800dfca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dfce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dfd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dfd6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dfda:	eb07 0609 	add.w	r6, r7, r9
 800dfde:	42b3      	cmp	r3, r6
 800dfe0:	bfb8      	it	lt
 800dfe2:	3101      	addlt	r1, #1
 800dfe4:	f7ff ff08 	bl	800ddf8 <_Balloc>
 800dfe8:	f100 0514 	add.w	r5, r0, #20
 800dfec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800dff0:	462b      	mov	r3, r5
 800dff2:	2200      	movs	r2, #0
 800dff4:	4573      	cmp	r3, lr
 800dff6:	d316      	bcc.n	800e026 <__multiply+0x74>
 800dff8:	f104 0214 	add.w	r2, r4, #20
 800dffc:	f108 0114 	add.w	r1, r8, #20
 800e000:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e004:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e008:	9300      	str	r3, [sp, #0]
 800e00a:	9b00      	ldr	r3, [sp, #0]
 800e00c:	9201      	str	r2, [sp, #4]
 800e00e:	4293      	cmp	r3, r2
 800e010:	d80c      	bhi.n	800e02c <__multiply+0x7a>
 800e012:	2e00      	cmp	r6, #0
 800e014:	dd03      	ble.n	800e01e <__multiply+0x6c>
 800e016:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d05d      	beq.n	800e0da <__multiply+0x128>
 800e01e:	6106      	str	r6, [r0, #16]
 800e020:	b003      	add	sp, #12
 800e022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e026:	f843 2b04 	str.w	r2, [r3], #4
 800e02a:	e7e3      	b.n	800dff4 <__multiply+0x42>
 800e02c:	f8b2 b000 	ldrh.w	fp, [r2]
 800e030:	f1bb 0f00 	cmp.w	fp, #0
 800e034:	d023      	beq.n	800e07e <__multiply+0xcc>
 800e036:	4689      	mov	r9, r1
 800e038:	46ac      	mov	ip, r5
 800e03a:	f04f 0800 	mov.w	r8, #0
 800e03e:	f859 4b04 	ldr.w	r4, [r9], #4
 800e042:	f8dc a000 	ldr.w	sl, [ip]
 800e046:	b2a3      	uxth	r3, r4
 800e048:	fa1f fa8a 	uxth.w	sl, sl
 800e04c:	fb0b a303 	mla	r3, fp, r3, sl
 800e050:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e054:	f8dc 4000 	ldr.w	r4, [ip]
 800e058:	4443      	add	r3, r8
 800e05a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e05e:	fb0b 840a 	mla	r4, fp, sl, r8
 800e062:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e066:	46e2      	mov	sl, ip
 800e068:	b29b      	uxth	r3, r3
 800e06a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e06e:	454f      	cmp	r7, r9
 800e070:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e074:	f84a 3b04 	str.w	r3, [sl], #4
 800e078:	d82b      	bhi.n	800e0d2 <__multiply+0x120>
 800e07a:	f8cc 8004 	str.w	r8, [ip, #4]
 800e07e:	9b01      	ldr	r3, [sp, #4]
 800e080:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e084:	3204      	adds	r2, #4
 800e086:	f1ba 0f00 	cmp.w	sl, #0
 800e08a:	d020      	beq.n	800e0ce <__multiply+0x11c>
 800e08c:	682b      	ldr	r3, [r5, #0]
 800e08e:	4689      	mov	r9, r1
 800e090:	46a8      	mov	r8, r5
 800e092:	f04f 0b00 	mov.w	fp, #0
 800e096:	f8b9 c000 	ldrh.w	ip, [r9]
 800e09a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e09e:	fb0a 440c 	mla	r4, sl, ip, r4
 800e0a2:	445c      	add	r4, fp
 800e0a4:	46c4      	mov	ip, r8
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e0ac:	f84c 3b04 	str.w	r3, [ip], #4
 800e0b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800e0b4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e0b8:	0c1b      	lsrs	r3, r3, #16
 800e0ba:	fb0a b303 	mla	r3, sl, r3, fp
 800e0be:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e0c2:	454f      	cmp	r7, r9
 800e0c4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e0c8:	d805      	bhi.n	800e0d6 <__multiply+0x124>
 800e0ca:	f8c8 3004 	str.w	r3, [r8, #4]
 800e0ce:	3504      	adds	r5, #4
 800e0d0:	e79b      	b.n	800e00a <__multiply+0x58>
 800e0d2:	46d4      	mov	ip, sl
 800e0d4:	e7b3      	b.n	800e03e <__multiply+0x8c>
 800e0d6:	46e0      	mov	r8, ip
 800e0d8:	e7dd      	b.n	800e096 <__multiply+0xe4>
 800e0da:	3e01      	subs	r6, #1
 800e0dc:	e799      	b.n	800e012 <__multiply+0x60>
	...

0800e0e0 <__pow5mult>:
 800e0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0e4:	4615      	mov	r5, r2
 800e0e6:	f012 0203 	ands.w	r2, r2, #3
 800e0ea:	4606      	mov	r6, r0
 800e0ec:	460f      	mov	r7, r1
 800e0ee:	d007      	beq.n	800e100 <__pow5mult+0x20>
 800e0f0:	3a01      	subs	r2, #1
 800e0f2:	4c21      	ldr	r4, [pc, #132]	; (800e178 <__pow5mult+0x98>)
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e0fa:	f7ff fec8 	bl	800de8e <__multadd>
 800e0fe:	4607      	mov	r7, r0
 800e100:	10ad      	asrs	r5, r5, #2
 800e102:	d035      	beq.n	800e170 <__pow5mult+0x90>
 800e104:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e106:	b93c      	cbnz	r4, 800e118 <__pow5mult+0x38>
 800e108:	2010      	movs	r0, #16
 800e10a:	f7fe fc17 	bl	800c93c <malloc>
 800e10e:	6270      	str	r0, [r6, #36]	; 0x24
 800e110:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e114:	6004      	str	r4, [r0, #0]
 800e116:	60c4      	str	r4, [r0, #12]
 800e118:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e11c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e120:	b94c      	cbnz	r4, 800e136 <__pow5mult+0x56>
 800e122:	f240 2171 	movw	r1, #625	; 0x271
 800e126:	4630      	mov	r0, r6
 800e128:	f7ff ff3a 	bl	800dfa0 <__i2b>
 800e12c:	2300      	movs	r3, #0
 800e12e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e132:	4604      	mov	r4, r0
 800e134:	6003      	str	r3, [r0, #0]
 800e136:	f04f 0800 	mov.w	r8, #0
 800e13a:	07eb      	lsls	r3, r5, #31
 800e13c:	d50a      	bpl.n	800e154 <__pow5mult+0x74>
 800e13e:	4639      	mov	r1, r7
 800e140:	4622      	mov	r2, r4
 800e142:	4630      	mov	r0, r6
 800e144:	f7ff ff35 	bl	800dfb2 <__multiply>
 800e148:	4639      	mov	r1, r7
 800e14a:	4681      	mov	r9, r0
 800e14c:	4630      	mov	r0, r6
 800e14e:	f7ff fe87 	bl	800de60 <_Bfree>
 800e152:	464f      	mov	r7, r9
 800e154:	106d      	asrs	r5, r5, #1
 800e156:	d00b      	beq.n	800e170 <__pow5mult+0x90>
 800e158:	6820      	ldr	r0, [r4, #0]
 800e15a:	b938      	cbnz	r0, 800e16c <__pow5mult+0x8c>
 800e15c:	4622      	mov	r2, r4
 800e15e:	4621      	mov	r1, r4
 800e160:	4630      	mov	r0, r6
 800e162:	f7ff ff26 	bl	800dfb2 <__multiply>
 800e166:	6020      	str	r0, [r4, #0]
 800e168:	f8c0 8000 	str.w	r8, [r0]
 800e16c:	4604      	mov	r4, r0
 800e16e:	e7e4      	b.n	800e13a <__pow5mult+0x5a>
 800e170:	4638      	mov	r0, r7
 800e172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e176:	bf00      	nop
 800e178:	0800ed18 	.word	0x0800ed18

0800e17c <__lshift>:
 800e17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e180:	460c      	mov	r4, r1
 800e182:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e186:	6923      	ldr	r3, [r4, #16]
 800e188:	6849      	ldr	r1, [r1, #4]
 800e18a:	eb0a 0903 	add.w	r9, sl, r3
 800e18e:	68a3      	ldr	r3, [r4, #8]
 800e190:	4607      	mov	r7, r0
 800e192:	4616      	mov	r6, r2
 800e194:	f109 0501 	add.w	r5, r9, #1
 800e198:	42ab      	cmp	r3, r5
 800e19a:	db32      	blt.n	800e202 <__lshift+0x86>
 800e19c:	4638      	mov	r0, r7
 800e19e:	f7ff fe2b 	bl	800ddf8 <_Balloc>
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	4680      	mov	r8, r0
 800e1a6:	f100 0114 	add.w	r1, r0, #20
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	4553      	cmp	r3, sl
 800e1ae:	db2b      	blt.n	800e208 <__lshift+0x8c>
 800e1b0:	6920      	ldr	r0, [r4, #16]
 800e1b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e1b6:	f104 0314 	add.w	r3, r4, #20
 800e1ba:	f016 021f 	ands.w	r2, r6, #31
 800e1be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e1c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e1c6:	d025      	beq.n	800e214 <__lshift+0x98>
 800e1c8:	f1c2 0e20 	rsb	lr, r2, #32
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	681e      	ldr	r6, [r3, #0]
 800e1d0:	468a      	mov	sl, r1
 800e1d2:	4096      	lsls	r6, r2
 800e1d4:	4330      	orrs	r0, r6
 800e1d6:	f84a 0b04 	str.w	r0, [sl], #4
 800e1da:	f853 0b04 	ldr.w	r0, [r3], #4
 800e1de:	459c      	cmp	ip, r3
 800e1e0:	fa20 f00e 	lsr.w	r0, r0, lr
 800e1e4:	d814      	bhi.n	800e210 <__lshift+0x94>
 800e1e6:	6048      	str	r0, [r1, #4]
 800e1e8:	b108      	cbz	r0, 800e1ee <__lshift+0x72>
 800e1ea:	f109 0502 	add.w	r5, r9, #2
 800e1ee:	3d01      	subs	r5, #1
 800e1f0:	4638      	mov	r0, r7
 800e1f2:	f8c8 5010 	str.w	r5, [r8, #16]
 800e1f6:	4621      	mov	r1, r4
 800e1f8:	f7ff fe32 	bl	800de60 <_Bfree>
 800e1fc:	4640      	mov	r0, r8
 800e1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e202:	3101      	adds	r1, #1
 800e204:	005b      	lsls	r3, r3, #1
 800e206:	e7c7      	b.n	800e198 <__lshift+0x1c>
 800e208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e20c:	3301      	adds	r3, #1
 800e20e:	e7cd      	b.n	800e1ac <__lshift+0x30>
 800e210:	4651      	mov	r1, sl
 800e212:	e7dc      	b.n	800e1ce <__lshift+0x52>
 800e214:	3904      	subs	r1, #4
 800e216:	f853 2b04 	ldr.w	r2, [r3], #4
 800e21a:	f841 2f04 	str.w	r2, [r1, #4]!
 800e21e:	459c      	cmp	ip, r3
 800e220:	d8f9      	bhi.n	800e216 <__lshift+0x9a>
 800e222:	e7e4      	b.n	800e1ee <__lshift+0x72>

0800e224 <__mcmp>:
 800e224:	6903      	ldr	r3, [r0, #16]
 800e226:	690a      	ldr	r2, [r1, #16]
 800e228:	1a9b      	subs	r3, r3, r2
 800e22a:	b530      	push	{r4, r5, lr}
 800e22c:	d10c      	bne.n	800e248 <__mcmp+0x24>
 800e22e:	0092      	lsls	r2, r2, #2
 800e230:	3014      	adds	r0, #20
 800e232:	3114      	adds	r1, #20
 800e234:	1884      	adds	r4, r0, r2
 800e236:	4411      	add	r1, r2
 800e238:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e23c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e240:	4295      	cmp	r5, r2
 800e242:	d003      	beq.n	800e24c <__mcmp+0x28>
 800e244:	d305      	bcc.n	800e252 <__mcmp+0x2e>
 800e246:	2301      	movs	r3, #1
 800e248:	4618      	mov	r0, r3
 800e24a:	bd30      	pop	{r4, r5, pc}
 800e24c:	42a0      	cmp	r0, r4
 800e24e:	d3f3      	bcc.n	800e238 <__mcmp+0x14>
 800e250:	e7fa      	b.n	800e248 <__mcmp+0x24>
 800e252:	f04f 33ff 	mov.w	r3, #4294967295
 800e256:	e7f7      	b.n	800e248 <__mcmp+0x24>

0800e258 <__mdiff>:
 800e258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e25c:	460d      	mov	r5, r1
 800e25e:	4607      	mov	r7, r0
 800e260:	4611      	mov	r1, r2
 800e262:	4628      	mov	r0, r5
 800e264:	4614      	mov	r4, r2
 800e266:	f7ff ffdd 	bl	800e224 <__mcmp>
 800e26a:	1e06      	subs	r6, r0, #0
 800e26c:	d108      	bne.n	800e280 <__mdiff+0x28>
 800e26e:	4631      	mov	r1, r6
 800e270:	4638      	mov	r0, r7
 800e272:	f7ff fdc1 	bl	800ddf8 <_Balloc>
 800e276:	2301      	movs	r3, #1
 800e278:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e280:	bfa4      	itt	ge
 800e282:	4623      	movge	r3, r4
 800e284:	462c      	movge	r4, r5
 800e286:	4638      	mov	r0, r7
 800e288:	6861      	ldr	r1, [r4, #4]
 800e28a:	bfa6      	itte	ge
 800e28c:	461d      	movge	r5, r3
 800e28e:	2600      	movge	r6, #0
 800e290:	2601      	movlt	r6, #1
 800e292:	f7ff fdb1 	bl	800ddf8 <_Balloc>
 800e296:	692b      	ldr	r3, [r5, #16]
 800e298:	60c6      	str	r6, [r0, #12]
 800e29a:	6926      	ldr	r6, [r4, #16]
 800e29c:	f105 0914 	add.w	r9, r5, #20
 800e2a0:	f104 0214 	add.w	r2, r4, #20
 800e2a4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e2a8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e2ac:	f100 0514 	add.w	r5, r0, #20
 800e2b0:	f04f 0e00 	mov.w	lr, #0
 800e2b4:	f852 ab04 	ldr.w	sl, [r2], #4
 800e2b8:	f859 4b04 	ldr.w	r4, [r9], #4
 800e2bc:	fa1e f18a 	uxtah	r1, lr, sl
 800e2c0:	b2a3      	uxth	r3, r4
 800e2c2:	1ac9      	subs	r1, r1, r3
 800e2c4:	0c23      	lsrs	r3, r4, #16
 800e2c6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e2ca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e2ce:	b289      	uxth	r1, r1
 800e2d0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e2d4:	45c8      	cmp	r8, r9
 800e2d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e2da:	4694      	mov	ip, r2
 800e2dc:	f845 3b04 	str.w	r3, [r5], #4
 800e2e0:	d8e8      	bhi.n	800e2b4 <__mdiff+0x5c>
 800e2e2:	45bc      	cmp	ip, r7
 800e2e4:	d304      	bcc.n	800e2f0 <__mdiff+0x98>
 800e2e6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e2ea:	b183      	cbz	r3, 800e30e <__mdiff+0xb6>
 800e2ec:	6106      	str	r6, [r0, #16]
 800e2ee:	e7c5      	b.n	800e27c <__mdiff+0x24>
 800e2f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e2f4:	fa1e f381 	uxtah	r3, lr, r1
 800e2f8:	141a      	asrs	r2, r3, #16
 800e2fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e304:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e308:	f845 3b04 	str.w	r3, [r5], #4
 800e30c:	e7e9      	b.n	800e2e2 <__mdiff+0x8a>
 800e30e:	3e01      	subs	r6, #1
 800e310:	e7e9      	b.n	800e2e6 <__mdiff+0x8e>

0800e312 <__d2b>:
 800e312:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e316:	460e      	mov	r6, r1
 800e318:	2101      	movs	r1, #1
 800e31a:	ec59 8b10 	vmov	r8, r9, d0
 800e31e:	4615      	mov	r5, r2
 800e320:	f7ff fd6a 	bl	800ddf8 <_Balloc>
 800e324:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e328:	4607      	mov	r7, r0
 800e32a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e32e:	bb34      	cbnz	r4, 800e37e <__d2b+0x6c>
 800e330:	9301      	str	r3, [sp, #4]
 800e332:	f1b8 0300 	subs.w	r3, r8, #0
 800e336:	d027      	beq.n	800e388 <__d2b+0x76>
 800e338:	a802      	add	r0, sp, #8
 800e33a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e33e:	f7ff fe00 	bl	800df42 <__lo0bits>
 800e342:	9900      	ldr	r1, [sp, #0]
 800e344:	b1f0      	cbz	r0, 800e384 <__d2b+0x72>
 800e346:	9a01      	ldr	r2, [sp, #4]
 800e348:	f1c0 0320 	rsb	r3, r0, #32
 800e34c:	fa02 f303 	lsl.w	r3, r2, r3
 800e350:	430b      	orrs	r3, r1
 800e352:	40c2      	lsrs	r2, r0
 800e354:	617b      	str	r3, [r7, #20]
 800e356:	9201      	str	r2, [sp, #4]
 800e358:	9b01      	ldr	r3, [sp, #4]
 800e35a:	61bb      	str	r3, [r7, #24]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	bf14      	ite	ne
 800e360:	2102      	movne	r1, #2
 800e362:	2101      	moveq	r1, #1
 800e364:	6139      	str	r1, [r7, #16]
 800e366:	b1c4      	cbz	r4, 800e39a <__d2b+0x88>
 800e368:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e36c:	4404      	add	r4, r0
 800e36e:	6034      	str	r4, [r6, #0]
 800e370:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e374:	6028      	str	r0, [r5, #0]
 800e376:	4638      	mov	r0, r7
 800e378:	b003      	add	sp, #12
 800e37a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e37e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e382:	e7d5      	b.n	800e330 <__d2b+0x1e>
 800e384:	6179      	str	r1, [r7, #20]
 800e386:	e7e7      	b.n	800e358 <__d2b+0x46>
 800e388:	a801      	add	r0, sp, #4
 800e38a:	f7ff fdda 	bl	800df42 <__lo0bits>
 800e38e:	9b01      	ldr	r3, [sp, #4]
 800e390:	617b      	str	r3, [r7, #20]
 800e392:	2101      	movs	r1, #1
 800e394:	6139      	str	r1, [r7, #16]
 800e396:	3020      	adds	r0, #32
 800e398:	e7e5      	b.n	800e366 <__d2b+0x54>
 800e39a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e39e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e3a2:	6030      	str	r0, [r6, #0]
 800e3a4:	6918      	ldr	r0, [r3, #16]
 800e3a6:	f7ff fdad 	bl	800df04 <__hi0bits>
 800e3aa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e3ae:	e7e1      	b.n	800e374 <__d2b+0x62>

0800e3b0 <_calloc_r>:
 800e3b0:	b538      	push	{r3, r4, r5, lr}
 800e3b2:	fb02 f401 	mul.w	r4, r2, r1
 800e3b6:	4621      	mov	r1, r4
 800e3b8:	f7fe fb32 	bl	800ca20 <_malloc_r>
 800e3bc:	4605      	mov	r5, r0
 800e3be:	b118      	cbz	r0, 800e3c8 <_calloc_r+0x18>
 800e3c0:	4622      	mov	r2, r4
 800e3c2:	2100      	movs	r1, #0
 800e3c4:	f7fe fad5 	bl	800c972 <memset>
 800e3c8:	4628      	mov	r0, r5
 800e3ca:	bd38      	pop	{r3, r4, r5, pc}

0800e3cc <__ascii_mbtowc>:
 800e3cc:	b082      	sub	sp, #8
 800e3ce:	b901      	cbnz	r1, 800e3d2 <__ascii_mbtowc+0x6>
 800e3d0:	a901      	add	r1, sp, #4
 800e3d2:	b142      	cbz	r2, 800e3e6 <__ascii_mbtowc+0x1a>
 800e3d4:	b14b      	cbz	r3, 800e3ea <__ascii_mbtowc+0x1e>
 800e3d6:	7813      	ldrb	r3, [r2, #0]
 800e3d8:	600b      	str	r3, [r1, #0]
 800e3da:	7812      	ldrb	r2, [r2, #0]
 800e3dc:	1c10      	adds	r0, r2, #0
 800e3de:	bf18      	it	ne
 800e3e0:	2001      	movne	r0, #1
 800e3e2:	b002      	add	sp, #8
 800e3e4:	4770      	bx	lr
 800e3e6:	4610      	mov	r0, r2
 800e3e8:	e7fb      	b.n	800e3e2 <__ascii_mbtowc+0x16>
 800e3ea:	f06f 0001 	mvn.w	r0, #1
 800e3ee:	e7f8      	b.n	800e3e2 <__ascii_mbtowc+0x16>

0800e3f0 <__ascii_wctomb>:
 800e3f0:	b149      	cbz	r1, 800e406 <__ascii_wctomb+0x16>
 800e3f2:	2aff      	cmp	r2, #255	; 0xff
 800e3f4:	bf85      	ittet	hi
 800e3f6:	238a      	movhi	r3, #138	; 0x8a
 800e3f8:	6003      	strhi	r3, [r0, #0]
 800e3fa:	700a      	strbls	r2, [r1, #0]
 800e3fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800e400:	bf98      	it	ls
 800e402:	2001      	movls	r0, #1
 800e404:	4770      	bx	lr
 800e406:	4608      	mov	r0, r1
 800e408:	4770      	bx	lr
	...

0800e40c <_init>:
 800e40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e40e:	bf00      	nop
 800e410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e412:	bc08      	pop	{r3}
 800e414:	469e      	mov	lr, r3
 800e416:	4770      	bx	lr

0800e418 <_fini>:
 800e418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e41a:	bf00      	nop
 800e41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e41e:	bc08      	pop	{r3}
 800e420:	469e      	mov	lr, r3
 800e422:	4770      	bx	lr
